"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.de_UpdateThemeCommand = exports.de_UpdateFormCommand = exports.de_UpdateComponentCommand = exports.de_StartCodegenJobCommand = exports.de_RefreshTokenCommand = exports.de_PutMetadataFlagCommand = exports.de_ListThemesCommand = exports.de_ListFormsCommand = exports.de_ListComponentsCommand = exports.de_ListCodegenJobsCommand = exports.de_GetThemeCommand = exports.de_GetMetadataCommand = exports.de_GetFormCommand = exports.de_GetComponentCommand = exports.de_GetCodegenJobCommand = exports.de_ExportThemesCommand = exports.de_ExportFormsCommand = exports.de_ExportComponentsCommand = exports.de_ExchangeCodeForTokenCommand = exports.de_DeleteThemeCommand = exports.de_DeleteFormCommand = exports.de_DeleteComponentCommand = exports.de_CreateThemeCommand = exports.de_CreateFormCommand = exports.de_CreateComponentCommand = exports.se_UpdateThemeCommand = exports.se_UpdateFormCommand = exports.se_UpdateComponentCommand = exports.se_StartCodegenJobCommand = exports.se_RefreshTokenCommand = exports.se_PutMetadataFlagCommand = exports.se_ListThemesCommand = exports.se_ListFormsCommand = exports.se_ListComponentsCommand = exports.se_ListCodegenJobsCommand = exports.se_GetThemeCommand = exports.se_GetMetadataCommand = exports.se_GetFormCommand = exports.se_GetComponentCommand = exports.se_GetCodegenJobCommand = exports.se_ExportThemesCommand = exports.se_ExportFormsCommand = exports.se_ExportComponentsCommand = exports.se_ExchangeCodeForTokenCommand = exports.se_DeleteThemeCommand = exports.se_DeleteFormCommand = exports.se_DeleteComponentCommand = exports.se_CreateThemeCommand = exports.se_CreateFormCommand = exports.se_CreateComponentCommand = void 0;
const core_1 = require("@aws-sdk/core");
const protocol_http_1 = require("@smithy/protocol-http");
const smithy_client_1 = require("@smithy/smithy-client");
const uuid_1 = require("uuid");
const AmplifyUIBuilderServiceException_1 = require("../models/AmplifyUIBuilderServiceException");
const models_0_1 = require("../models/models_0");
const se_CreateComponentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/components";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        clientToken: [, input.clientToken ?? (0, uuid_1.v4)()],
    });
    let body;
    if (input.componentToCreate !== undefined) {
        body = se_CreateComponentData(input.componentToCreate, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_CreateComponentCommand = se_CreateComponentCommand;
const se_CreateFormCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/forms";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        clientToken: [, input.clientToken ?? (0, uuid_1.v4)()],
    });
    let body;
    if (input.formToCreate !== undefined) {
        body = se_CreateFormData(input.formToCreate, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_CreateFormCommand = se_CreateFormCommand;
const se_CreateThemeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/themes";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        clientToken: [, input.clientToken ?? (0, uuid_1.v4)()],
    });
    let body;
    if (input.themeToCreate !== undefined) {
        body = se_CreateThemeData(input.themeToCreate, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_CreateThemeCommand = se_CreateThemeCommand;
const se_DeleteComponentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/components/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteComponentCommand = se_DeleteComponentCommand;
const se_DeleteFormCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/forms/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteFormCommand = se_DeleteFormCommand;
const se_DeleteThemeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/themes/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_DeleteThemeCommand = se_DeleteThemeCommand;
const se_ExchangeCodeForTokenCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/tokens/{provider}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "provider", () => input.provider, "{provider}", false);
    let body;
    if (input.request !== undefined) {
        body = (0, smithy_client_1._json)(input.request);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_ExchangeCodeForTokenCommand = se_ExchangeCodeForTokenCommand;
const se_ExportComponentsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/export/app/{appId}/environment/{environmentName}/components";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        nextToken: [, input.nextToken],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ExportComponentsCommand = se_ExportComponentsCommand;
const se_ExportFormsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/export/app/{appId}/environment/{environmentName}/forms";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        nextToken: [, input.nextToken],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ExportFormsCommand = se_ExportFormsCommand;
const se_ExportThemesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/export/app/{appId}/environment/{environmentName}/themes";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        nextToken: [, input.nextToken],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ExportThemesCommand = se_ExportThemesCommand;
const se_GetCodegenJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/codegen-jobs/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetCodegenJobCommand = se_GetCodegenJobCommand;
const se_GetComponentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/components/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetComponentCommand = se_GetComponentCommand;
const se_GetFormCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/forms/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetFormCommand = se_GetFormCommand;
const se_GetMetadataCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/metadata";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetMetadataCommand = se_GetMetadataCommand;
const se_GetThemeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/themes/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_GetThemeCommand = se_GetThemeCommand;
const se_ListCodegenJobsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/codegen-jobs";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        nextToken: [, input.nextToken],
        maxResults: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListCodegenJobsCommand = se_ListCodegenJobsCommand;
const se_ListComponentsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/components";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        nextToken: [, input.nextToken],
        maxResults: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListComponentsCommand = se_ListComponentsCommand;
const se_ListFormsCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/forms";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        nextToken: [, input.nextToken],
        maxResults: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListFormsCommand = se_ListFormsCommand;
const se_ListThemesCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {};
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/themes";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        nextToken: [, input.nextToken],
        maxResults: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
    });
    let body;
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_ListThemesCommand = se_ListThemesCommand;
const se_PutMetadataFlagCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/metadata/features/{featureName}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "featureName", () => input.featureName, "{featureName}", false);
    let body;
    if (input.body !== undefined) {
        body = (0, smithy_client_1._json)(input.body);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_PutMetadataFlagCommand = se_PutMetadataFlagCommand;
const se_RefreshTokenCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` + "/tokens/{provider}/refresh";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "provider", () => input.provider, "{provider}", false);
    let body;
    if (input.refreshTokenBody !== undefined) {
        body = (0, smithy_client_1._json)(input.refreshTokenBody);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body,
    });
};
exports.se_RefreshTokenCommand = se_RefreshTokenCommand;
const se_StartCodegenJobCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/codegen-jobs";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    const query = (0, smithy_client_1.map)({
        clientToken: [, input.clientToken ?? (0, uuid_1.v4)()],
    });
    let body;
    if (input.codegenJobToCreate !== undefined) {
        body = (0, smithy_client_1._json)(input.codegenJobToCreate);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_StartCodegenJobCommand = se_StartCodegenJobCommand;
const se_UpdateComponentCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/components/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    const query = (0, smithy_client_1.map)({
        clientToken: [, input.clientToken ?? (0, uuid_1.v4)()],
    });
    let body;
    if (input.updatedComponent !== undefined) {
        body = se_UpdateComponentData(input.updatedComponent, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_UpdateComponentCommand = se_UpdateComponentCommand;
const se_UpdateFormCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/forms/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    const query = (0, smithy_client_1.map)({
        clientToken: [, input.clientToken ?? (0, uuid_1.v4)()],
    });
    let body;
    if (input.updatedForm !== undefined) {
        body = se_UpdateFormData(input.updatedForm, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_UpdateFormCommand = se_UpdateFormCommand;
const se_UpdateThemeCommand = async (input, context) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const headers = {
        "content-type": "application/json",
    };
    let resolvedPath = `${basePath?.endsWith("/") ? basePath.slice(0, -1) : basePath || ""}` +
        "/app/{appId}/environment/{environmentName}/themes/{id}";
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "appId", () => input.appId, "{appId}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "environmentName", () => input.environmentName, "{environmentName}", false);
    resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "id", () => input.id, "{id}", false);
    const query = (0, smithy_client_1.map)({
        clientToken: [, input.clientToken ?? (0, uuid_1.v4)()],
    });
    let body;
    if (input.updatedTheme !== undefined) {
        body = se_UpdateThemeData(input.updatedTheme, context);
    }
    if (body === undefined) {
        body = {};
    }
    body = JSON.stringify(body);
    return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PATCH",
        headers,
        path: resolvedPath,
        query,
        body,
    });
};
exports.se_UpdateThemeCommand = se_UpdateThemeCommand;
const de_CreateComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateComponentCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.entity = de_Component(data, context);
    return contents;
};
exports.de_CreateComponentCommand = de_CreateComponentCommand;
const de_CreateComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.amplifyuibuilder#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.amplifyuibuilder#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateFormCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.entity = de_Form(data, context);
    return contents;
};
exports.de_CreateFormCommand = de_CreateFormCommand;
const de_CreateFormCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.amplifyuibuilder#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.amplifyuibuilder#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_CreateThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CreateThemeCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.entity = de_Theme(data, context);
    return contents;
};
exports.de_CreateThemeCommand = de_CreateThemeCommand;
const de_CreateThemeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.amplifyuibuilder#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.amplifyuibuilder#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteComponentCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteComponentCommand = de_DeleteComponentCommand;
const de_DeleteComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplifyuibuilder#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteFormCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteFormCommand = de_DeleteFormCommand;
const de_DeleteFormCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplifyuibuilder#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_DeleteThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_DeleteThemeCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_DeleteThemeCommand = de_DeleteThemeCommand;
const de_DeleteThemeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplifyuibuilder#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ExchangeCodeForTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ExchangeCodeForTokenCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        accessToken: smithy_client_1.expectString,
        expiresIn: smithy_client_1.expectInt32,
        refreshToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ExchangeCodeForTokenCommand = de_ExchangeCodeForTokenCommand;
const de_ExchangeCodeForTokenCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ExportComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ExportComponentsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        entities: (_) => de_ComponentList(_, context),
        nextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ExportComponentsCommand = de_ExportComponentsCommand;
const de_ExportComponentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ExportFormsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ExportFormsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        entities: (_) => de_FormList(_, context),
        nextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ExportFormsCommand = de_ExportFormsCommand;
const de_ExportFormsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ExportThemesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ExportThemesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        entities: (_) => de_ThemeList(_, context),
        nextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ExportThemesCommand = de_ExportThemesCommand;
const de_ExportThemesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetCodegenJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetCodegenJobCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.job = de_CodegenJob(data, context);
    return contents;
};
exports.de_GetCodegenJobCommand = de_GetCodegenJobCommand;
const de_GetCodegenJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplifyuibuilder#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.amplifyuibuilder#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetComponentCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.component = de_Component(data, context);
    return contents;
};
exports.de_GetComponentCommand = de_GetComponentCommand;
const de_GetComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplifyuibuilder#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetFormCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.form = de_Form(data, context);
    return contents;
};
exports.de_GetFormCommand = de_GetFormCommand;
const de_GetFormCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplifyuibuilder#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetMetadataCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetMetadataCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        features: smithy_client_1._json,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_GetMetadataCommand = de_GetMetadataCommand;
const de_GetMetadataCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.amplifyuibuilder#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_GetThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_GetThemeCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.theme = de_Theme(data, context);
    return contents;
};
exports.de_GetThemeCommand = de_GetThemeCommand;
const de_GetThemeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.amplifyuibuilder#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListCodegenJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListCodegenJobsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        entities: (_) => de_CodegenJobSummaryList(_, context),
        nextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListCodegenJobsCommand = de_ListCodegenJobsCommand;
const de_ListCodegenJobsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.amplifyuibuilder#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListComponentsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        entities: smithy_client_1._json,
        nextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListComponentsCommand = de_ListComponentsCommand;
const de_ListComponentsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListFormsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListFormsCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        entities: smithy_client_1._json,
        nextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListFormsCommand = de_ListFormsCommand;
const de_ListFormsCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ListThemesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_ListThemesCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        entities: smithy_client_1._json,
        nextToken: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_ListThemesCommand = de_ListThemesCommand;
const de_ListThemesCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_PutMetadataFlagCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_PutMetadataFlagCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    await (0, smithy_client_1.collectBody)(output.body, context);
    return contents;
};
exports.de_PutMetadataFlagCommand = de_PutMetadataFlagCommand;
const de_PutMetadataFlagCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.amplifyuibuilder#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_RefreshTokenCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_RefreshTokenCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
    const doc = (0, smithy_client_1.take)(data, {
        accessToken: smithy_client_1.expectString,
        expiresIn: smithy_client_1.expectInt32,
    });
    Object.assign(contents, doc);
    return contents;
};
exports.de_RefreshTokenCommand = de_RefreshTokenCommand;
const de_RefreshTokenCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_StartCodegenJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_StartCodegenJobCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.entity = de_CodegenJob(data, context);
    return contents;
};
exports.de_StartCodegenJobCommand = de_StartCodegenJobCommand;
const de_StartCodegenJobCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.amplifyuibuilder#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateComponentCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.entity = de_Component(data, context);
    return contents;
};
exports.de_UpdateComponentCommand = de_UpdateComponentCommand;
const de_UpdateComponentCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.amplifyuibuilder#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateFormCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateFormCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.entity = de_Form(data, context);
    return contents;
};
exports.de_UpdateFormCommand = de_UpdateFormCommand;
const de_UpdateFormCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.amplifyuibuilder#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_UpdateThemeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_UpdateThemeCommandError(output, context);
    }
    const contents = (0, smithy_client_1.map)({
        $metadata: deserializeMetadata(output),
    });
    const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
    contents.entity = de_Theme(data, context);
    return contents;
};
exports.de_UpdateThemeCommand = de_UpdateThemeCommand;
const de_UpdateThemeCommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.amplifyuibuilder#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.amplifyuibuilder#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.amplifyuibuilder#ResourceConflictException":
            throw await de_ResourceConflictExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = (0, smithy_client_1.withBaseException)(AmplifyUIBuilderServiceException_1.AmplifyUIBuilderServiceException);
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ResourceConflictExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ResourceConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const contents = (0, smithy_client_1.map)({});
    const data = parsedOutput.body;
    const doc = (0, smithy_client_1.take)(data, {
        message: smithy_client_1.expectString,
    });
    Object.assign(contents, doc);
    const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
};
const se_ActionParameters = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        anchor: (_) => se_ComponentProperty(_, context),
        fields: (_) => se_ComponentProperties(_, context),
        global: (_) => se_ComponentProperty(_, context),
        id: (_) => se_ComponentProperty(_, context),
        model: [],
        state: (_) => se_MutationActionSetStateParameter(_, context),
        target: (_) => se_ComponentProperty(_, context),
        type: (_) => se_ComponentProperty(_, context),
        url: (_) => se_ComponentProperty(_, context),
    });
};
const se_ComponentBindingProperties = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentBindingPropertiesValue(value, context);
        return acc;
    }, {});
};
const se_ComponentBindingPropertiesValue = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        bindingProperties: (_) => se_ComponentBindingPropertiesValueProperties(_, context),
        defaultValue: [],
        type: [],
    });
};
const se_ComponentBindingPropertiesValueProperties = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        bucket: [],
        defaultValue: [],
        field: [],
        key: [],
        model: [],
        predicates: (_) => se_PredicateList(_, context),
        slotName: [],
        userAttribute: [],
    });
};
const se_ComponentChild = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        children: (_) => se_ComponentChildList(_, context),
        componentType: [],
        events: (_) => se_ComponentEvents(_, context),
        name: [],
        properties: (_) => se_ComponentProperties(_, context),
        sourceId: [],
    });
};
const se_ComponentChildList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ComponentChild(entry, context);
    });
};
const se_ComponentCollectionProperties = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentDataConfiguration(value, context);
        return acc;
    }, {});
};
const se_ComponentConditionProperty = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        else: (_) => se_ComponentProperty(_, context),
        field: [],
        operand: [],
        operandType: [],
        operator: [],
        property: [],
        then: (_) => se_ComponentProperty(_, context),
    });
};
const se_ComponentDataConfiguration = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        identifiers: smithy_client_1._json,
        model: [],
        predicate: (_) => se_Predicate(_, context),
        sort: smithy_client_1._json,
    });
};
const se_ComponentEvent = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        action: [],
        bindingEvent: [],
        parameters: (_) => se_ActionParameters(_, context),
    });
};
const se_ComponentEvents = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentEvent(value, context);
        return acc;
    }, {});
};
const se_ComponentProperties = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentProperty(value, context);
        return acc;
    }, {});
};
const se_ComponentProperty = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        bindingProperties: smithy_client_1._json,
        bindings: smithy_client_1._json,
        collectionBindingProperties: smithy_client_1._json,
        componentName: [],
        concat: (_) => se_ComponentPropertyList(_, context),
        condition: (_) => se_ComponentConditionProperty(_, context),
        configured: [],
        defaultValue: [],
        event: [],
        importedValue: [],
        model: [],
        property: [],
        type: [],
        userAttribute: [],
        value: [],
    });
};
const se_ComponentPropertyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ComponentProperty(entry, context);
    });
};
const se_CreateComponentData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        bindingProperties: (_) => se_ComponentBindingProperties(_, context),
        children: (_) => se_ComponentChildList(_, context),
        collectionProperties: (_) => se_ComponentCollectionProperties(_, context),
        componentType: [],
        events: (_) => se_ComponentEvents(_, context),
        name: [],
        overrides: smithy_client_1._json,
        properties: (_) => se_ComponentProperties(_, context),
        schemaVersion: [],
        sourceId: [],
        tags: smithy_client_1._json,
        variants: smithy_client_1._json,
    });
};
const se_CreateFormData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        cta: smithy_client_1._json,
        dataType: smithy_client_1._json,
        fields: (_) => se_FieldsMap(_, context),
        formActionType: [],
        labelDecorator: [],
        name: [],
        schemaVersion: [],
        sectionalElements: smithy_client_1._json,
        style: smithy_client_1._json,
        tags: smithy_client_1._json,
    });
};
const se_CreateThemeData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        name: [],
        overrides: (_) => se_ThemeValuesList(_, context),
        tags: smithy_client_1._json,
        values: (_) => se_ThemeValuesList(_, context),
    });
};
const se_FieldConfig = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        excluded: [],
        inputType: (_) => se_FieldInputConfig(_, context),
        label: [],
        position: smithy_client_1._json,
        validations: smithy_client_1._json,
    });
};
const se_FieldInputConfig = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        defaultChecked: [],
        defaultCountryCode: [],
        defaultValue: [],
        descriptiveText: [],
        fileUploaderConfig: smithy_client_1._json,
        isArray: [],
        maxValue: smithy_client_1.serializeFloat,
        minValue: smithy_client_1.serializeFloat,
        name: [],
        placeholder: [],
        readOnly: [],
        required: [],
        step: smithy_client_1.serializeFloat,
        type: [],
        value: [],
        valueMappings: (_) => se_ValueMappings(_, context),
    });
};
const se_FieldsMap = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_FieldConfig(value, context);
        return acc;
    }, {});
};
const se_FormInputValueProperty = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        bindingProperties: smithy_client_1._json,
        concat: (_) => se_FormInputValuePropertyList(_, context),
        value: [],
    });
};
const se_FormInputValuePropertyList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_FormInputValueProperty(entry, context);
    });
};
const se_MutationActionSetStateParameter = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        componentName: [],
        property: [],
        set: (_) => se_ComponentProperty(_, context),
    });
};
const se_Predicate = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        and: (_) => se_PredicateList(_, context),
        field: [],
        operand: [],
        operandType: [],
        operator: [],
        or: (_) => se_PredicateList(_, context),
    });
};
const se_PredicateList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Predicate(entry, context);
    });
};
const se_ThemeValue = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        children: (_) => se_ThemeValuesList(_, context),
        value: [],
    });
};
const se_ThemeValues = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        key: [],
        value: (_) => se_ThemeValue(_, context),
    });
};
const se_ThemeValuesList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ThemeValues(entry, context);
    });
};
const se_UpdateComponentData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        bindingProperties: (_) => se_ComponentBindingProperties(_, context),
        children: (_) => se_ComponentChildList(_, context),
        collectionProperties: (_) => se_ComponentCollectionProperties(_, context),
        componentType: [],
        events: (_) => se_ComponentEvents(_, context),
        id: [],
        name: [],
        overrides: smithy_client_1._json,
        properties: (_) => se_ComponentProperties(_, context),
        schemaVersion: [],
        sourceId: [],
        variants: smithy_client_1._json,
    });
};
const se_UpdateFormData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        cta: smithy_client_1._json,
        dataType: smithy_client_1._json,
        fields: (_) => se_FieldsMap(_, context),
        formActionType: [],
        labelDecorator: [],
        name: [],
        schemaVersion: [],
        sectionalElements: smithy_client_1._json,
        style: smithy_client_1._json,
    });
};
const se_UpdateThemeData = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        id: [],
        name: [],
        overrides: (_) => se_ThemeValuesList(_, context),
        values: (_) => se_ThemeValuesList(_, context),
    });
};
const se_ValueMapping = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        displayValue: (_) => se_FormInputValueProperty(_, context),
        value: (_) => se_FormInputValueProperty(_, context),
    });
};
const se_ValueMappingList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ValueMapping(entry, context);
    });
};
const se_ValueMappings = (input, context) => {
    return (0, smithy_client_1.take)(input, {
        bindingProperties: smithy_client_1._json,
        values: (_) => se_ValueMappingList(_, context),
    });
};
const de_ActionParameters = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        anchor: (_) => de_ComponentProperty(_, context),
        fields: (_) => de_ComponentProperties(_, context),
        global: (_) => de_ComponentProperty(_, context),
        id: (_) => de_ComponentProperty(_, context),
        model: smithy_client_1.expectString,
        state: (_) => de_MutationActionSetStateParameter(_, context),
        target: (_) => de_ComponentProperty(_, context),
        type: (_) => de_ComponentProperty(_, context),
        url: (_) => de_ComponentProperty(_, context),
    });
};
const de_CodegenJob = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        appId: smithy_client_1.expectString,
        asset: smithy_client_1._json,
        autoGenerateForms: smithy_client_1.expectBoolean,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        dependencies: smithy_client_1._json,
        environmentName: smithy_client_1.expectString,
        features: smithy_client_1._json,
        genericDataSchema: smithy_client_1._json,
        id: smithy_client_1.expectString,
        modifiedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        renderConfig: (_) => (0, smithy_client_1._json)((0, core_1.awsExpectUnion)(_)),
        status: smithy_client_1.expectString,
        statusMessage: smithy_client_1.expectString,
        tags: smithy_client_1._json,
    });
};
const de_CodegenJobSummary = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        appId: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        environmentName: smithy_client_1.expectString,
        id: smithy_client_1.expectString,
        modifiedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
    });
};
const de_CodegenJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CodegenJobSummary(entry, context);
    });
    return retVal;
};
const de_Component = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        appId: smithy_client_1.expectString,
        bindingProperties: (_) => de_ComponentBindingProperties(_, context),
        children: (_) => de_ComponentChildList(_, context),
        collectionProperties: (_) => de_ComponentCollectionProperties(_, context),
        componentType: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        environmentName: smithy_client_1.expectString,
        events: (_) => de_ComponentEvents(_, context),
        id: smithy_client_1.expectString,
        modifiedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        name: smithy_client_1.expectString,
        overrides: smithy_client_1._json,
        properties: (_) => de_ComponentProperties(_, context),
        schemaVersion: smithy_client_1.expectString,
        sourceId: smithy_client_1.expectString,
        tags: smithy_client_1._json,
        variants: smithy_client_1._json,
    });
};
const de_ComponentBindingProperties = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentBindingPropertiesValue(value, context);
        return acc;
    }, {});
};
const de_ComponentBindingPropertiesValue = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bindingProperties: (_) => de_ComponentBindingPropertiesValueProperties(_, context),
        defaultValue: smithy_client_1.expectString,
        type: smithy_client_1.expectString,
    });
};
const de_ComponentBindingPropertiesValueProperties = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bucket: smithy_client_1.expectString,
        defaultValue: smithy_client_1.expectString,
        field: smithy_client_1.expectString,
        key: smithy_client_1.expectString,
        model: smithy_client_1.expectString,
        predicates: (_) => de_PredicateList(_, context),
        slotName: smithy_client_1.expectString,
        userAttribute: smithy_client_1.expectString,
    });
};
const de_ComponentChild = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        children: (_) => de_ComponentChildList(_, context),
        componentType: smithy_client_1.expectString,
        events: (_) => de_ComponentEvents(_, context),
        name: smithy_client_1.expectString,
        properties: (_) => de_ComponentProperties(_, context),
        sourceId: smithy_client_1.expectString,
    });
};
const de_ComponentChildList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComponentChild(entry, context);
    });
    return retVal;
};
const de_ComponentCollectionProperties = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentDataConfiguration(value, context);
        return acc;
    }, {});
};
const de_ComponentConditionProperty = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        else: (_) => de_ComponentProperty(_, context),
        field: smithy_client_1.expectString,
        operand: smithy_client_1.expectString,
        operandType: smithy_client_1.expectString,
        operator: smithy_client_1.expectString,
        property: smithy_client_1.expectString,
        then: (_) => de_ComponentProperty(_, context),
    });
};
const de_ComponentDataConfiguration = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        identifiers: smithy_client_1._json,
        model: smithy_client_1.expectString,
        predicate: (_) => de_Predicate(_, context),
        sort: smithy_client_1._json,
    });
};
const de_ComponentEvent = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        action: smithy_client_1.expectString,
        bindingEvent: smithy_client_1.expectString,
        parameters: (_) => de_ActionParameters(_, context),
    });
};
const de_ComponentEvents = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentEvent(value, context);
        return acc;
    }, {});
};
const de_ComponentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Component(entry, context);
    });
    return retVal;
};
const de_ComponentProperties = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentProperty(value, context);
        return acc;
    }, {});
};
const de_ComponentProperty = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bindingProperties: smithy_client_1._json,
        bindings: smithy_client_1._json,
        collectionBindingProperties: smithy_client_1._json,
        componentName: smithy_client_1.expectString,
        concat: (_) => de_ComponentPropertyList(_, context),
        condition: (_) => de_ComponentConditionProperty(_, context),
        configured: smithy_client_1.expectBoolean,
        defaultValue: smithy_client_1.expectString,
        event: smithy_client_1.expectString,
        importedValue: smithy_client_1.expectString,
        model: smithy_client_1.expectString,
        property: smithy_client_1.expectString,
        type: smithy_client_1.expectString,
        userAttribute: smithy_client_1.expectString,
        value: smithy_client_1.expectString,
    });
};
const de_ComponentPropertyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComponentProperty(entry, context);
    });
    return retVal;
};
const de_FieldConfig = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        excluded: smithy_client_1.expectBoolean,
        inputType: (_) => de_FieldInputConfig(_, context),
        label: smithy_client_1.expectString,
        position: (_) => (0, smithy_client_1._json)((0, core_1.awsExpectUnion)(_)),
        validations: smithy_client_1._json,
    });
};
const de_FieldInputConfig = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        defaultChecked: smithy_client_1.expectBoolean,
        defaultCountryCode: smithy_client_1.expectString,
        defaultValue: smithy_client_1.expectString,
        descriptiveText: smithy_client_1.expectString,
        fileUploaderConfig: smithy_client_1._json,
        isArray: smithy_client_1.expectBoolean,
        maxValue: smithy_client_1.limitedParseFloat32,
        minValue: smithy_client_1.limitedParseFloat32,
        name: smithy_client_1.expectString,
        placeholder: smithy_client_1.expectString,
        readOnly: smithy_client_1.expectBoolean,
        required: smithy_client_1.expectBoolean,
        step: smithy_client_1.limitedParseFloat32,
        type: smithy_client_1.expectString,
        value: smithy_client_1.expectString,
        valueMappings: (_) => de_ValueMappings(_, context),
    });
};
const de_FieldsMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_FieldConfig(value, context);
        return acc;
    }, {});
};
const de_Form = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        appId: smithy_client_1.expectString,
        cta: smithy_client_1._json,
        dataType: smithy_client_1._json,
        environmentName: smithy_client_1.expectString,
        fields: (_) => de_FieldsMap(_, context),
        formActionType: smithy_client_1.expectString,
        id: smithy_client_1.expectString,
        labelDecorator: smithy_client_1.expectString,
        name: smithy_client_1.expectString,
        schemaVersion: smithy_client_1.expectString,
        sectionalElements: smithy_client_1._json,
        style: smithy_client_1._json,
        tags: smithy_client_1._json,
    });
};
const de_FormInputValueProperty = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bindingProperties: smithy_client_1._json,
        concat: (_) => de_FormInputValuePropertyList(_, context),
        value: smithy_client_1.expectString,
    });
};
const de_FormInputValuePropertyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FormInputValueProperty(entry, context);
    });
    return retVal;
};
const de_FormList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Form(entry, context);
    });
    return retVal;
};
const de_MutationActionSetStateParameter = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        componentName: smithy_client_1.expectString,
        property: smithy_client_1.expectString,
        set: (_) => de_ComponentProperty(_, context),
    });
};
const de_Predicate = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        and: (_) => de_PredicateList(_, context),
        field: smithy_client_1.expectString,
        operand: smithy_client_1.expectString,
        operandType: smithy_client_1.expectString,
        operator: smithy_client_1.expectString,
        or: (_) => de_PredicateList(_, context),
    });
};
const de_PredicateList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Predicate(entry, context);
    });
    return retVal;
};
const de_Theme = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        appId: smithy_client_1.expectString,
        createdAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        environmentName: smithy_client_1.expectString,
        id: smithy_client_1.expectString,
        modifiedAt: (_) => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTimeWithOffset)(_)),
        name: smithy_client_1.expectString,
        overrides: (_) => de_ThemeValuesList(_, context),
        tags: smithy_client_1._json,
        values: (_) => de_ThemeValuesList(_, context),
    });
};
const de_ThemeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Theme(entry, context);
    });
    return retVal;
};
const de_ThemeValue = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        children: (_) => de_ThemeValuesList(_, context),
        value: smithy_client_1.expectString,
    });
};
const de_ThemeValues = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        key: smithy_client_1.expectString,
        value: (_) => de_ThemeValue(_, context),
    });
};
const de_ThemeValuesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThemeValues(entry, context);
    });
    return retVal;
};
const de_ValueMapping = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        displayValue: (_) => de_FormInputValueProperty(_, context),
        value: (_) => de_FormInputValueProperty(_, context),
    });
};
const de_ValueMappingList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValueMapping(entry, context);
    });
    return retVal;
};
const de_ValueMappings = (output, context) => {
    return (0, smithy_client_1.take)(output, {
        bindingProperties: smithy_client_1._json,
        values: (_) => de_ValueMappingList(_, context),
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => (0, smithy_client_1.collectBody)(streamBody, context).then((body) => context.utf8Encoder(body));
const isSerializableHeaderValue = (value) => value !== undefined &&
    value !== null &&
    value !== "" &&
    (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) &&
    (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
const parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
    if (encoded.length) {
        return JSON.parse(encoded);
    }
    return {};
});
const parseErrorBody = async (errorBody, context) => {
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data) => {
    const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
            cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
            cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
            cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
            cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) {
        return sanitizeErrorCode(output.headers[headerKey]);
    }
    if (data.code !== undefined) {
        return sanitizeErrorCode(data.code);
    }
    if (data["__type"] !== undefined) {
        return sanitizeErrorCode(data["__type"]);
    }
};
