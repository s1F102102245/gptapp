import { FieldMapEntry, ResolverReferenceEntry, TransformerContextProvider, TransformerResourceHelperProvider } from '@aws-amplify/graphql-transformer-interfaces';
import type { TransformParameters } from '@aws-amplify/graphql-transformer-interfaces';
import { DirectiveNode, FieldDefinitionNode, ObjectTypeDefinitionNode } from 'graphql';
import { BelongsToDirectiveConfiguration, HasManyDirectiveConfiguration, HasOneDirectiveConfiguration, ManyToManyDirectiveConfiguration } from './types';
export declare const validateParentReferencesFields: (config: HasManyDirectiveConfiguration | HasOneDirectiveConfiguration, ctx: TransformerContextProvider) => void;
export declare const validateChildReferencesFields: (config: BelongsToDirectiveConfiguration, ctx: TransformerContextProvider) => void;
export declare function getRelatedTypeIndex(config: HasOneDirectiveConfiguration, ctx: TransformerContextProvider, indexName?: string): FieldDefinitionNode[];
export declare function ensureFieldsArray(config: HasManyDirectiveConfiguration | HasOneDirectiveConfiguration | BelongsToDirectiveConfiguration): void;
export declare function ensureReferencesArray(config: HasManyDirectiveConfiguration | HasOneDirectiveConfiguration | BelongsToDirectiveConfiguration): void;
export declare function getModelDirective(objectType: ObjectTypeDefinitionNode): DirectiveNode | undefined;
export declare function validateModelDirective(config: HasManyDirectiveConfiguration | HasOneDirectiveConfiguration | BelongsToDirectiveConfiguration | ManyToManyDirectiveConfiguration): void;
export declare function getRelatedType(config: HasManyDirectiveConfiguration | HasOneDirectiveConfiguration | BelongsToDirectiveConfiguration, ctx: TransformerContextProvider): ObjectTypeDefinitionNode;
export declare function getFieldsNodes(config: HasManyDirectiveConfiguration | HasOneDirectiveConfiguration | BelongsToDirectiveConfiguration, ctx: TransformerContextProvider): FieldDefinitionNode[];
export declare function getReferencesNodes(config: HasManyDirectiveConfiguration | HasOneDirectiveConfiguration, ctx: TransformerContextProvider): FieldDefinitionNode[];
export declare function getBelongsToReferencesNodes(config: BelongsToDirectiveConfiguration, ctx: TransformerContextProvider): FieldDefinitionNode[];
export declare function validateRelatedModelDirective(config: HasManyDirectiveConfiguration | HasOneDirectiveConfiguration | BelongsToDirectiveConfiguration): void;
export declare function getConnectionAttributeName(transformParameters: TransformParameters, type: string, field: string, relatedTypeField: string): string;
export declare function getManyToManyConnectionAttributeName(transformParameters: TransformParameters, field: string, relatedTypeField: string): string;
export declare function getSortKeyConnectionAttributeName(type: string, field: string, relatedTypeField: string): string;
export declare function getBackendConnectionAttributeName(transformParameters: TransformParameters, resourceHelper: TransformerResourceHelperProvider, type: string, field: string, relatedTypeField: string): string;
export declare function validateDisallowedDataStoreRelationships(config: HasManyDirectiveConfiguration | HasOneDirectiveConfiguration, ctx: TransformerContextProvider): void;
type RegisterForeignKeyMappingParams = {
    transformParameters: TransformParameters;
    resourceHelper: TransformerResourceHelperProvider;
    thisTypeName: string;
    thisFieldName: string;
    relatedType: ObjectTypeDefinitionNode;
};
export declare function registerHasOneForeignKeyMappings({ transformParameters, resourceHelper, thisTypeName, thisFieldName, relatedType, }: RegisterForeignKeyMappingParams): void;
export declare function registerHasManyForeignKeyMappings({ transformParameters, resourceHelper, thisTypeName, thisFieldName, relatedType, }: RegisterForeignKeyMappingParams): void;
export type ManyToManyForeignKeyMappingParams = {
    resourceHelper: TransformerResourceHelperProvider;
    typeName: string;
    referencedBy: ResolverReferenceEntry[];
    fieldMap: FieldMapEntry[];
};
export declare function registerManyToManyForeignKeyMappings({ resourceHelper, typeName, referencedBy, fieldMap, }: ManyToManyForeignKeyMappingParams): void;
export declare const getObjectPrimaryKey: (object: ObjectTypeDefinitionNode) => FieldDefinitionNode;
export {};
//# sourceMappingURL=utils.d.ts.map