import { AppSyncAuthConfiguration, AssetProvider, CustomSqlDataSourceStrategy, DataSourceType, GraphQLAPIProvider, NestedStackProvider, ProvisionedConcurrencyConfig, RDSLayerMapping, StackManagerProvider, SynthParameters, TransformerContextMetadataProvider, TransformerContextOutputProvider, TransformerContextProvider, TransformerDataSourceManagerProvider, TransformParameterProvider, TransformParameters, VpcConfig } from '@aws-amplify/graphql-transformer-interfaces';
import { DocumentNode } from 'graphql';
import { Construct } from 'constructs';
import { ResolverConfig } from '../config/transformer-config';
import { RDSConnectionSecrets } from '../types';
import { TransformerContextProviderRegistry } from './provider-registry';
import { ResolverManager } from './resolver';
import { TransformerResourceHelper } from './resource-helper';
export { TransformerResolver } from './resolver';
export { StackManager } from './stack-manager';
export declare class TransformerContextMetadata implements TransformerContextMetadataProvider {
    private metadata;
    get<T>(key: string): T | undefined;
    set<T>(key: string, val: T): void;
    has(key: string): boolean;
}
export interface TransformerContextConstructorOptions {
    scope: Construct;
    nestedStackProvider: NestedStackProvider;
    parameterProvider: TransformParameterProvider | undefined;
    assetProvider: AssetProvider;
    synthParameters: SynthParameters;
    inputDocument: DocumentNode;
    modelToDatasourceMap: Map<string, DataSourceType>;
    customSqlDataSourceStrategies: CustomSqlDataSourceStrategy[];
    customQueries: Map<string, string>;
    stackMapping: Record<string, string>;
    authConfig: AppSyncAuthConfiguration;
    transformParameters: TransformParameters;
    resolverConfig?: ResolverConfig;
    datasourceSecretParameterLocations?: Map<string, RDSConnectionSecrets>;
    sqlLambdaVpcConfig?: VpcConfig;
    rdsLayerMapping?: RDSLayerMapping;
    sqlLambdaProvisionedConcurrencyConfig?: ProvisionedConcurrencyConfig;
}
export declare class TransformerContext implements TransformerContextProvider {
    readonly output: TransformerContextOutputProvider;
    readonly resolvers: ResolverManager;
    readonly dataSources: TransformerDataSourceManagerProvider;
    readonly providerRegistry: TransformerContextProviderRegistry;
    readonly stackManager: StackManagerProvider;
    readonly resourceHelper: TransformerResourceHelper;
    readonly transformParameters: TransformParameters;
    _api?: GraphQLAPIProvider;
    readonly authConfig: AppSyncAuthConfiguration;
    private resolverConfig;
    readonly modelToDatasourceMap: Map<string, DataSourceType>;
    readonly customSqlDataSourceStrategies: CustomSqlDataSourceStrategy[];
    readonly datasourceSecretParameterLocations: Map<string, RDSConnectionSecrets>;
    readonly sqlLambdaVpcConfig?: VpcConfig;
    readonly rdsLayerMapping?: RDSLayerMapping;
    readonly sqlLambdaProvisionedConcurrencyConfig?: ProvisionedConcurrencyConfig;
    readonly customQueries: Map<string, string>;
    metadata: TransformerContextMetadata;
    readonly synthParameters: SynthParameters;
    readonly inputDocument: DocumentNode;
    constructor(options: TransformerContextConstructorOptions);
    get api(): GraphQLAPIProvider;
    getResolverConfig: <ResolverConfig_1>() => ResolverConfig_1 | undefined;
    isProjectUsingDataStore(): boolean;
}
//# sourceMappingURL=index.d.ts.map