"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImportedRDSType = exports.getEngineFromDBType = exports.constructDataSourceMap = exports.isRDSDBType = exports.isImportedRDSType = exports.isRDSModel = exports.isDynamoDBModel = exports.getModelDataSourceType = exports.getParameterStoreSecretPath = void 0;
const path_1 = __importDefault(require("path"));
const lodash_1 = __importDefault(require("lodash"));
const graphql_1 = require("graphql");
const types_1 = require("../types");
const types_2 = require("../types");
const api_category_1 = require("./api-category");
const getParameterNameForDBSecret = (secret, secretsKey) => {
    return `${secretsKey}_${secret}`;
};
const getParameterStoreSecretPath = (secret, secretsKey, apiName, environmentName, appId) => {
    if (lodash_1.default.isEmpty(appId)) {
        throw new Error('Unable to read the App ID');
    }
    const categoryName = api_category_1.APICategory;
    const paramName = getParameterNameForDBSecret(secret, secretsKey);
    if (!environmentName) {
        throw new Error('Unable to create RDS secret path, environment not found/defined');
    }
    return path_1.default.posix.join('/amplify', appId, environmentName, `AMPLIFY_${categoryName}${apiName}${paramName}`);
};
exports.getParameterStoreSecretPath = getParameterStoreSecretPath;
const getModelDataSourceType = (ctx, typename) => {
    const config = ctx.modelToDatasourceMap.get(typename);
    return (config === null || config === void 0 ? void 0 : config.dbType) || types_1.DDB_DB_TYPE;
};
exports.getModelDataSourceType = getModelDataSourceType;
const isDynamoDBModel = (ctx, typename) => {
    return (0, exports.getModelDataSourceType)(ctx, typename) === types_1.DDB_DB_TYPE;
};
exports.isDynamoDBModel = isDynamoDBModel;
const isRDSModel = (ctx, typename) => {
    const modelDataSourceType = (0, exports.getModelDataSourceType)(ctx, typename);
    return [types_1.MYSQL_DB_TYPE, types_1.POSTGRES_DB_TYPE].includes(modelDataSourceType);
};
exports.isRDSModel = isRDSModel;
const isImportedRDSType = (dbInfo) => {
    return (0, exports.isRDSDBType)(dbInfo === null || dbInfo === void 0 ? void 0 : dbInfo.dbType) && !(dbInfo === null || dbInfo === void 0 ? void 0 : dbInfo.provisionDB);
};
exports.isImportedRDSType = isImportedRDSType;
const isRDSDBType = (dbType) => {
    return [types_1.MYSQL_DB_TYPE, types_1.POSTGRES_DB_TYPE].includes(dbType);
};
exports.isRDSDBType = isRDSDBType;
const constructDataSourceMap = (schema, datasourceType) => {
    const parsedSchema = (0, graphql_1.parse)(schema);
    const result = new Map();
    parsedSchema.definitions
        .filter((obj) => { var _a; return obj.kind === graphql_1.Kind.OBJECT_TYPE_DEFINITION && ((_a = obj.directives) === null || _a === void 0 ? void 0 : _a.some((dir) => dir.name.value === 'model')); })
        .forEach((type) => {
        result.set(type.name.value, datasourceType);
    });
    return result;
};
exports.constructDataSourceMap = constructDataSourceMap;
const getEngineFromDBType = (dbType) => {
    switch (dbType) {
        case types_1.MYSQL_DB_TYPE:
            return types_2.ImportedRDSType.MYSQL;
        case types_1.POSTGRES_DB_TYPE:
            return types_2.ImportedRDSType.POSTGRESQL;
        default:
            throw new Error(`Unsupported RDS datasource type: ${dbType}`);
    }
};
exports.getEngineFromDBType = getEngineFromDBType;
const getImportedRDSType = (modelToDatasourceMap) => {
    var _a;
    const datasourceMapValues = Array.from(modelToDatasourceMap === null || modelToDatasourceMap === void 0 ? void 0 : modelToDatasourceMap.values());
    const dbTypes = new Set((_a = datasourceMapValues === null || datasourceMapValues === void 0 ? void 0 : datasourceMapValues.filter((value) => (0, exports.isImportedRDSType)(value))) === null || _a === void 0 ? void 0 : _a.map((value) => value === null || value === void 0 ? void 0 : value.dbType));
    if (dbTypes.size > 1) {
        throw new Error(`Multiple imported SQL datasource types ${Array.from(dbTypes)} are detected. Only one type is supported.`);
    }
    return dbTypes.values().next().value;
};
exports.getImportedRDSType = getImportedRDSType;
//# sourceMappingURL=rds-util.js.map