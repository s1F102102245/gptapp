"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeDbType = exports.isSqlModelDataSourceDbType = exports.isSqlStrategy = exports.isDynamoModelDataSourceDbType = exports.isAmplifyDynamoDbModelDataSourceStrategy = exports.isDefaultDynamoDbModelDataSourceStrategy = exports.isDynamoDbStrategy = exports.convertSQLDBType = exports.dataSourceStrategyToDataSourceType = void 0;
const import_appsync_api_types_1 = require("../types/import-appsync-api-types");
const dataSourceStrategyToDataSourceType = (dataSourceStrategy) => {
    if (dataSourceStrategy.dbType === 'DYNAMODB') {
        switch (dataSourceStrategy.provisionStrategy) {
            case 'DEFAULT':
                return {
                    dbType: 'DDB',
                    provisionDB: true,
                    provisionStrategy: "DEFAULT",
                };
            case 'AMPLIFY_TABLE':
                return {
                    dbType: 'DDB',
                    provisionDB: true,
                    provisionStrategy: "AMPLIFY_TABLE",
                };
            default:
                throw new Error(`Encountered unexpected provision strategy: ${dataSourceStrategy.provisionStrategy}`);
        }
    }
    else if (dataSourceStrategy.dbType === 'MYSQL' || dataSourceStrategy.dbType === 'POSTGRES') {
        return {
            dbType: (0, exports.convertSQLDBType)(dataSourceStrategy.dbType),
            provisionDB: false,
            provisionStrategy: "DEFAULT",
        };
    }
    throw new Error(`Encountered unexpected database type ${dataSourceStrategy.dbType}`);
};
exports.dataSourceStrategyToDataSourceType = dataSourceStrategyToDataSourceType;
const convertSQLDBType = (definitionDBType) => definitionDBType === 'MYSQL' ? 'MySQL' : 'Postgres';
exports.convertSQLDBType = convertSQLDBType;
const isDynamoDbStrategy = (strategy) => {
    return (0, exports.isDefaultDynamoDbModelDataSourceStrategy)(strategy) || (0, exports.isAmplifyDynamoDbModelDataSourceStrategy)(strategy);
};
exports.isDynamoDbStrategy = isDynamoDbStrategy;
const isDefaultDynamoDbModelDataSourceStrategy = (strategy) => {
    return ((0, exports.isDynamoModelDataSourceDbType)(strategy.dbType) &&
        typeof strategy['provisionStrategy'] === 'string' &&
        strategy['provisionStrategy'] === 'DEFAULT');
};
exports.isDefaultDynamoDbModelDataSourceStrategy = isDefaultDynamoDbModelDataSourceStrategy;
const isAmplifyDynamoDbModelDataSourceStrategy = (strategy) => {
    return ((0, exports.isDynamoModelDataSourceDbType)(strategy.dbType) &&
        typeof strategy['provisionStrategy'] === 'string' &&
        strategy['provisionStrategy'] === 'AMPLIFY_TABLE');
};
exports.isAmplifyDynamoDbModelDataSourceStrategy = isAmplifyDynamoDbModelDataSourceStrategy;
const isDynamoModelDataSourceDbType = (dbType) => {
    return dbType === 'DYNAMODB';
};
exports.isDynamoModelDataSourceDbType = isDynamoModelDataSourceDbType;
const isSqlStrategy = (strategy) => {
    return ((0, exports.isSqlModelDataSourceDbType)(strategy.dbType) &&
        typeof strategy.name === 'string' &&
        typeof strategy.dbConnectionConfig === 'object');
};
exports.isSqlStrategy = isSqlStrategy;
const isSqlModelDataSourceDbType = (dbType) => {
    const validDbTypes = ['MYSQL', 'POSTGRES'];
    return validDbTypes.includes(dbType);
};
exports.isSqlModelDataSourceDbType = isSqlModelDataSourceDbType;
const normalizeDbType = (candidate) => {
    switch (candidate.toLowerCase()) {
        case 'mysql':
            return import_appsync_api_types_1.MYSQL_DB_TYPE;
        case 'ddb':
        case 'dynamodb':
        case 'dynamo_db':
            return import_appsync_api_types_1.DDB_DB_TYPE;
        case 'pg':
        case 'postgres':
        case 'postgresql':
            return import_appsync_api_types_1.POSTGRES_DB_TYPE;
        default:
            throw new Error(`Unknown database type ${candidate}`);
    }
};
exports.normalizeDbType = normalizeDbType;
//# sourceMappingURL=model-datasource-strategy-utils.js.map