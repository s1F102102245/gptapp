"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplifyGraphqlDefinition = exports.DEFAULT_MODEL_DATA_SOURCE_STRATEGY = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const os = require("os");
const aws_appsync_1 = require("aws-cdk-lib/aws-appsync");
const internal_1 = require("./internal");
const data_source_config_1 = require("./internal/data-source-config");
exports.DEFAULT_MODEL_DATA_SOURCE_STRATEGY = {
    dbType: 'DYNAMODB',
    provisionStrategy: 'DEFAULT',
};
/**
 * Class exposing utilities to produce IAmplifyGraphqlDefinition objects given various inputs.
 */
class AmplifyGraphqlDefinition {
    /**
     * Produce a schema definition from a string input.
     *
     * **NOTE** The 'dataSourceStrategy' configuration option is in preview and is not recommended to use with production systems.
     *
     * @param schema the graphql input as a string
     * @param dataSourceStrategy the provisioning definition for datasources that resolve `@model`s and custom SQL statements in this schema.
     * The DynamoDB from CloudFormation will be used by default.
     * @experimental dataSourceStrategy
     * @returns a fully formed amplify graphql definition
     */
    static fromString(schema, dataSourceStrategy = exports.DEFAULT_MODEL_DATA_SOURCE_STRATEGY) {
        return {
            schema,
            functionSlots: [],
            referencedLambdaFunctions: {},
            dataSourceStrategies: (0, internal_1.constructDataSourceStrategyMap)(schema, dataSourceStrategy),
            customSqlDataSourceStrategies: (0, data_source_config_1.constructCustomSqlDataSourceStrategies)(schema, dataSourceStrategy),
        };
    }
    /**
     * Convert one or more appsync SchemaFile objects into an Amplify Graphql Schema, binding them to a DynamoDB data source.
     * @param filePaths one or more paths to the graphql files to process
     * @returns a fully formed amplify graphql definition, whose models will be resolved by DynamoDB tables created during deployment.
     */
    static fromFiles(...filePaths) {
        if (!Array.isArray(filePaths)) {
            filePaths = [filePaths];
        }
        const schema = filePaths.map((filePath) => new aws_appsync_1.SchemaFile({ filePath }).definition).join(os.EOL);
        return AmplifyGraphqlDefinition.fromString(schema, exports.DEFAULT_MODEL_DATA_SOURCE_STRATEGY);
    }
    /**
     * Convert one or more appsync SchemaFile objects into an Amplify Graphql Schema
     *
     * **NOTE** This API is in preview and is not recommended to use with production systems.
     *
     * @experimental
     * @param filePaths one or more paths to the graphql files to process
     * @param dataSourceStrategy the provisioning definition for datasources that resolve `@model`s in this schema. The DynamoDB from
     * CloudFormation will be used by default.
     * @returns a fully formed amplify graphql definition
     */
    static fromFilesAndStrategy(filePaths, dataSourceStrategy = exports.DEFAULT_MODEL_DATA_SOURCE_STRATEGY) {
        if (!Array.isArray(filePaths)) {
            filePaths = [filePaths];
        }
        const schema = filePaths.map((filePath) => new aws_appsync_1.SchemaFile({ filePath }).definition).join(os.EOL);
        return AmplifyGraphqlDefinition.fromString(schema, dataSourceStrategy);
    }
    /**
     * Combines multiple IAmplifyGraphqlDefinitions into a single definition.
     *
     * **NOTE** This API is in preview and is not recommended to use with production systems.
     *
     * @experimental
     * @param definitions the definitions to combine
     */
    static combine(definitions) {
        if (definitions.length === 0) {
            throw new Error('The definitions of amplify GraphQL cannot be empty.');
        }
        if (definitions.length === 1) {
            return definitions[0];
        }
        return {
            schema: definitions.map((def) => def.schema).join(os.EOL),
            functionSlots: [],
            referencedLambdaFunctions: definitions.reduce((acc, cur) => ({ ...acc, ...cur.referencedLambdaFunctions }), {}),
            dataSourceStrategies: definitions.reduce((acc, cur) => ({ ...acc, ...cur.dataSourceStrategies }), {}),
        };
    }
}
exports.AmplifyGraphqlDefinition = AmplifyGraphqlDefinition;
_a = JSII_RTTI_SYMBOL_1;
AmplifyGraphqlDefinition[_a] = { fqn: "@aws-amplify/graphql-api-construct.AmplifyGraphqlDefinition", version: "1.4.3" };
//# sourceMappingURL=data:application/json;base64,