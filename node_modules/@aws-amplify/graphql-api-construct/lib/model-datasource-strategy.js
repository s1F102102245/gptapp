"use strict";
// #########################################################################################################################################
// These are the public-facing types used by customers to define their L3 CDK construct. Many of these have corresponding definitions in the
// transformer-interfaces package to define internal behavior.
//
// If you change types in this file (the customer-facing interface), be sure to make corresponding changes to
// amplify-graphql-transformer-interfaces/src/model-datasource (the internal implementation)
// #########################################################################################################################################
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,