"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"","sourcesContent":["import { Duration, CfnResource, NestedStack } from 'aws-cdk-lib';\nimport {\n  CfnGraphQLApi,\n  CfnGraphQLSchema,\n  CfnApiKey,\n  CfnResolver,\n  CfnFunctionConfiguration,\n  CfnDataSource,\n  IGraphqlApi,\n  MappingTemplate,\n  BaseDataSource,\n  Code,\n  FunctionRuntime,\n} from 'aws-cdk-lib/aws-appsync';\nimport { CfnTable, ITable } from 'aws-cdk-lib/aws-dynamodb';\nimport { IRole, CfnRole } from 'aws-cdk-lib/aws-iam';\nimport { IUserPool } from 'aws-cdk-lib/aws-cognito';\nimport { IFunction, CfnFunction } from 'aws-cdk-lib/aws-lambda';\nimport { IBucket } from 'aws-cdk-lib/aws-s3';\nimport { AmplifyDynamoDbTableWrapper } from './amplify-dynamodb-table-wrapper';\nimport { CustomSqlDataSourceStrategy, ModelDataSourceStrategy } from './model-datasource-strategy';\n\n/**\n * Configuration for IAM Authorization on the Graphql Api.\n * @struct - required since this interface begins with an 'I'\n */\nexport interface IAMAuthorizationConfig {\n  /**\n   * ID for the Cognito Identity Pool vending auth and unauth roles.\n   * Format: `<region>:<id string>`\n   */\n  readonly identityPoolId: string;\n\n  /**\n   * Authenticated user role, applies to { provider: iam, allow: private } access.\n   */\n  readonly authenticatedUserRole: IRole;\n\n  /**\n   * Unauthenticated user role, applies to { provider: iam, allow: public } access.\n   */\n  readonly unauthenticatedUserRole: IRole;\n\n  /**\n   * A list of IAM roles which will be granted full read/write access to the generated model if IAM auth is enabled.\n   * If an IRole is provided, the role `name` will be used for matching.\n   * If a string is provided, the raw value will be used for matching.\n   */\n  readonly allowListedRoles?: (IRole | string)[];\n}\n\n/**\n * Configuration for Cognito UserPool Authorization on the Graphql Api.\n */\nexport interface UserPoolAuthorizationConfig {\n  /**\n   * The Cognito User Pool which is used to authenticated JWT tokens, and vends group and user information.\n   */\n  readonly userPool: IUserPool;\n}\n\n/**\n * Configuration for OpenId Connect Authorization on the Graphql Api.\n */\nexport interface OIDCAuthorizationConfig {\n  /**\n   * The issuer for the OIDC configuration.\n   */\n  readonly oidcProviderName: string;\n\n  /**\n   * Url for the OIDC token issuer.\n   */\n  readonly oidcIssuerUrl: string;\n\n  /**\n   * The client identifier of the Relying party at the OpenID identity provider.\n   * A regular expression can be specified so AppSync can validate against multiple client identifiers at a time. Example\n   */\n  readonly clientId?: string;\n\n  /**\n   * The duration an OIDC token is valid after being authenticated by OIDC provider.\n   * auth_time claim in OIDC token is required for this validation to work.\n   */\n  readonly tokenExpiryFromAuth: Duration;\n\n  /**\n   * The duration an OIDC token is valid after being issued to a user.\n   * This validation uses iat claim of OIDC token.\n   */\n  readonly tokenExpiryFromIssue: Duration;\n}\n\n/**\n * Configuration for Api Keys on the Graphql Api.\n */\nexport interface ApiKeyAuthorizationConfig {\n  /**\n   * Optional description for the Api Key to attach to the Api.\n   */\n  readonly description?: string;\n\n  /**\n   * A duration representing the time from Cloudformation deploy until expiry.\n   */\n  readonly expires: Duration;\n}\n\n/**\n * Configuration for Custom Lambda authorization on the Graphql Api.\n */\nexport interface LambdaAuthorizationConfig {\n  /**\n   * The authorizer lambda function.\n   */\n  readonly function: IFunction;\n\n  /**\n   * How long the results are cached.\n   */\n  readonly ttl: Duration;\n}\n\n/**\n * Authorization Modes to apply to the Api.\n * At least one modes must be provided, and if more than one are provided a defaultAuthorizationMode must be specified.\n * For more information on Amplify Api auth, refer to https://docs.amplify.aws/cli/graphql/authorization-rules/#authorization-strategies\n */\nexport interface AuthorizationModes {\n  /**\n   * Default auth mode to provide to the Api, required if more than one config type is specified.\n   */\n  readonly defaultAuthorizationMode?: 'AWS_IAM' | 'AMAZON_COGNITO_USER_POOLS' | 'OPENID_CONNECT' | 'API_KEY' | 'AWS_LAMBDA';\n\n  /**\n   * IAM Auth config, required if an 'iam' auth provider is specified in the Api.\n   * Applies to 'public' and 'private' auth strategies.\n   */\n  readonly iamConfig?: IAMAuthorizationConfig;\n\n  /**\n   * Cognito UserPool config, required if a 'userPools' auth provider is specified in the Api.\n   * Applies to 'owner', 'private', and 'group' auth strategies.\n   */\n  readonly userPoolConfig?: UserPoolAuthorizationConfig;\n\n  /**\n   * Cognito OIDC config, required if a 'oidc' auth provider is specified in the Api.\n   * Applies to 'owner', 'private', and 'group' auth strategies.\n   */\n  readonly oidcConfig?: OIDCAuthorizationConfig;\n\n  /**\n   * AppSync Api Key config, required if a 'apiKey' auth provider is specified in the Api.\n   * Applies to 'public' auth strategy.\n   */\n  readonly apiKeyConfig?: ApiKeyAuthorizationConfig;\n\n  /**\n   * Lambda config, required if a 'function' auth provider is specified in the Api.\n   * Applies to 'custom' auth strategy.\n   */\n  readonly lambdaConfig?: LambdaAuthorizationConfig;\n\n  /**\n   * A list of roles granted full R/W access to the Api.\n   * @deprecated, use iamConfig.allowListedRoles instead.\n   */\n  readonly adminRoles?: IRole[];\n}\n\n/**\n * Whether or not to use a version field to track conflict detection.\n */\nexport type ConflictDetectionType = 'VERSION' | 'NONE';\n\n/**\n * Common parameters for conflict resolution.\n */\nexport interface ConflictResolutionStrategyBase {\n  /**\n   * The conflict detection type used for resolution.\n   */\n  readonly detectionType: ConflictDetectionType;\n}\n\n/**\n * Enable optimistic concurrency on the project.\n */\nexport interface AutomergeConflictResolutionStrategy extends ConflictResolutionStrategyBase {\n  /**\n   * This conflict resolution strategy executes an auto-merge.\n   * For more information, refer to https://docs.aws.amazon.com/appsync/latest/devguide/conflict-detection-and-sync.html#conflict-detection-and-resolution\n   */\n  readonly handlerType: 'AUTOMERGE';\n}\n\n/**\n * Enable automerge on the project.\n */\nexport interface OptimisticConflictResolutionStrategy extends ConflictResolutionStrategyBase {\n  /**\n   * This conflict resolution strategy the _version to perform optimistic concurrency.\n   * For more information, refer to https://docs.aws.amazon.com/appsync/latest/devguide/conflict-detection-and-sync.html#conflict-detection-and-resolution\n   */\n  readonly handlerType: 'OPTIMISTIC_CONCURRENCY';\n}\n\n/**\n * Enable custom sync on the project, powered by a lambda.\n */\nexport interface CustomConflictResolutionStrategy extends ConflictResolutionStrategyBase {\n  /**\n   * This conflict resolution strategy uses a lambda handler type.\n   * For more information, refer to https://docs.aws.amazon.com/appsync/latest/devguide/conflict-detection-and-sync.html#conflict-detection-and-resolution\n\n   */\n  readonly handlerType: 'LAMBDA';\n\n  /**\n   * The function which will be invoked for conflict resolution.\n   */\n  readonly conflictHandler: IFunction;\n}\n\n/**\n * Conflict Resolution Strategy to apply to the project or a particular model.\n */\nexport type ConflictResolutionStrategy =\n  | AutomergeConflictResolutionStrategy\n  | OptimisticConflictResolutionStrategy\n  | CustomConflictResolutionStrategy;\n\n/**\n * Project level configuration for conflict resolution.\n */\nexport interface ConflictResolution {\n  /**\n   * Project-wide config for conflict resolution. Applies to all non-overridden models.\n   */\n  readonly project?: ConflictResolutionStrategy;\n\n  /**\n   * Model-specific conflict resolution overrides.\n   */\n  readonly models?: Record<string, ConflictResolutionStrategy>;\n}\n\n/**\n * Params exposed to support configuring and overriding pipelined slots. This allows configuration of the underlying function,\n * including the request and response mapping templates.\n */\nexport interface FunctionSlotOverride {\n  /**\n   * Override request mapping template for the function slot. Executed before the datasource is invoked.\n   */\n  readonly requestMappingTemplate?: MappingTemplate;\n\n  /**\n   * Override response mapping template for the function slot. Executed after the datasource is invoked.\n   */\n  readonly responseMappingTemplate?: MappingTemplate;\n}\n\n/**\n * Common slot parameters.\n */\nexport interface FunctionSlotBase {\n  /**\n   * The field to attach this function to on the Api definition.\n   */\n  readonly fieldName: string;\n\n  /**\n   * The slot index to use to inject this into the execution pipeline.\n   * For more information on slotting, refer to https://docs.amplify.aws/cli/graphql/custom-business-logic/#extend-amplify-generated-resolvers\n   */\n  readonly slotIndex: number;\n\n  /**\n   * The overridden behavior for this slot.\n   */\n  readonly function: FunctionSlotOverride;\n}\n\n/**\n * Slot types for Mutation Resolvers.\n */\nexport interface MutationFunctionSlot extends FunctionSlotBase {\n  /**\n   * This slot type applies to the Mutation type on the Api definition.\n   */\n  readonly typeName: 'Mutation';\n\n  /**\n   * The slot name to inject this behavior into.\n   * For more information on slotting, refer to https://docs.amplify.aws/cli/graphql/custom-business-logic/#extend-amplify-generated-resolvers\n   */\n  readonly slotName: 'init' | 'preAuth' | 'auth' | 'postAuth' | 'preUpdate' | 'postUpdate' | 'finish';\n}\n\n/**\n * Slot types for Query Resolvers.\n */\nexport interface QueryFunctionSlot extends FunctionSlotBase {\n  /**\n   * This slot type applies to the Query type on the Api definition.\n   */\n  readonly typeName: 'Query';\n\n  /**\n   * The slot name to inject this behavior into.\n   * For more information on slotting, refer to https://docs.amplify.aws/cli/graphql/custom-business-logic/#extend-amplify-generated-resolvers\n   */\n  readonly slotName: 'init' | 'preAuth' | 'auth' | 'postAuth' | 'preDataLoad' | 'postDataLoad' | 'finish';\n}\n\n/**\n * Slot types for Subscription Resolvers.\n */\nexport interface SubscriptionFunctionSlot extends FunctionSlotBase {\n  /**\n   * This slot type applies to the Subscription type on the Api definition.\n   */\n  readonly typeName: 'Subscription';\n\n  /**\n   * The slot name to inject this behavior into.\n   * For more information on slotting, refer to https://docs.amplify.aws/cli/graphql/custom-business-logic/#extend-amplify-generated-resolvers\n   */\n  readonly slotName: 'init' | 'preAuth' | 'auth' | 'postAuth' | 'preSubscribe';\n}\n\n/**\n * Input params to uniquely identify the slot which is being overridden.\n */\nexport type FunctionSlot = MutationFunctionSlot | QueryFunctionSlot | SubscriptionFunctionSlot;\n\n/**\n * Strongly typed set of shared parameters for all transformers, and core layer.\n * This is intended to replace feature flags, to ensure param coercion happens in\n * a single location, and isn't spread around the transformers, where they can\n * have different default behaviors.\n */\nexport interface TranslationBehavior {\n  /**\n   * Restore parity w/ GQLv1 @model parameter behavior, where setting a single field doesn't implicitly set the other fields to null.\n   * @default true\n   */\n  readonly shouldDeepMergeDirectiveConfigDefaults: boolean;\n\n  /**\n   * Disable resolver deduping, this can sometimes cause problems because dedupe ordering isn't stable today, which can\n   * lead to circular dependencies across stacks if models are reordered.\n   * @default true\n   */\n  readonly disableResolverDeduping: boolean;\n\n  /**\n   * Enabling sandbox mode will enable api key auth on all models in the transformed schema.\n   * @default false\n   */\n  readonly sandboxModeEnabled: boolean;\n\n  /**\n   * Ensure that oidc and userPool auth use the `sub` field in the for the username field, which disallows new users with the same\n   * id to access data from a deleted user in the pool.\n   * @default true\n   */\n  readonly useSubUsernameForDefaultIdentityClaim: boolean;\n\n  /**\n   * Ensure that the owner field is still populated even if a static iam or group authorization applies.\n   * @default true\n   */\n  readonly populateOwnerFieldForStaticGroupAuth: boolean;\n\n  /**\n   * If enabled, disable api key resource generation even if specified as an auth rule on the construct.\n   * This is a legacy parameter from the Graphql Transformer existing in Amplify CLI, not recommended to change.\n   * @default false\n   */\n  readonly suppressApiKeyGeneration: boolean;\n\n  /**\n   * If disabled, generated @index as an LSI instead of a GSI.\n   * @default true\n   */\n  readonly secondaryKeyAsGSI: boolean;\n\n  /**\n   * Automate generation of query names, and as a result attaching all indexes as queries to the generated Api.\n   * If enabled, @index can be provided a null name field to disable the generation of the query on the Api.\n   * @default true\n   */\n  readonly enableAutoIndexQueryNames: boolean;\n\n  /**\n   * Enable custom primary key support, there's no good reason to disable this unless trying not to update a legacy app.\n   * @default true\n   */\n  readonly respectPrimaryKeyAttributesOnConnectionField: boolean;\n\n  readonly enableSearchNodeToNodeEncryption: boolean;\n\n  /**\n   * When enabled, internal cfn outputs which existed in Amplify-generated apps will continue to be emitted.\n   * @default false\n   */\n  readonly enableTransformerCfnOutputs: boolean;\n\n  /**\n   * The following schema updates require replacement of the underlying DynamoDB table:\n   *\n   *  - Removing or renaming a model\n   *  - Modifying the primary key of a model\n   *  - Modifying a Local Secondary Index of a model (only applies to projects with secondaryKeyAsGSI turned off)\n   *\n   * ALL DATA WILL BE LOST when the table replacement happens. When enabled, destructive updates are allowed.\n   * This will only affect DynamoDB tables with provision strategy \"AMPLIFY_TABLE\".\n   * @default false\n   * @experimental\n   */\n  readonly allowDestructiveGraphqlSchemaUpdates: boolean;\n\n  /**\n   * This behavior will only come into effect when both \"allowDestructiveGraphqlSchemaUpdates\" and this value are set to true\n   *\n   * When enabled, any GSI update operation will replace the table instead of iterative deployment, which will WIPE ALL EXISTING DATA but\n   * cost much less time for deployment This will only affect DynamoDB tables with provision strategy \"AMPLIFY_TABLE\".\n   * @default false\n   * @experimental\n   */\n  readonly replaceTableUponGsiUpdate: boolean;\n}\n\n/**\n * A utility interface equivalent to Partial<TranslationBehavior>.\n */\nexport interface PartialTranslationBehavior {\n  /**\n   * Restore parity w/ GQLv1 @model parameter behavior, where setting a single field doesn't implicitly set the other fields to null.\n   * @default true\n   */\n  readonly shouldDeepMergeDirectiveConfigDefaults?: boolean;\n\n  /**\n   * Disable resolver deduping, this can sometimes cause problems because dedupe ordering isn't stable today, which can\n   * lead to circular dependencies across stacks if models are reordered.\n   * @default true\n   */\n  readonly disableResolverDeduping?: boolean;\n\n  /**\n   * Enabling sandbox mode will enable api key auth on all models in the transformed schema.\n   * @default false\n   */\n  readonly sandboxModeEnabled?: boolean;\n\n  /**\n   * Ensure that oidc and userPool auth use the `sub` field in the for the username field, which disallows new users with the same\n   * id to access data from a deleted user in the pool.\n   * @default true\n   */\n  readonly useSubUsernameForDefaultIdentityClaim?: boolean;\n\n  /**\n   * Ensure that the owner field is still populated even if a static iam or group authorization applies.\n   * @default true\n   */\n  readonly populateOwnerFieldForStaticGroupAuth?: boolean;\n\n  /**\n   * If enabled, disable api key resource generation even if specified as an auth rule on the construct.\n   * This is a legacy parameter from the Graphql Transformer existing in Amplify CLI, not recommended to change.\n   * @default false\n   */\n  readonly suppressApiKeyGeneration?: boolean;\n\n  /**\n   * If disabled, generated @index as an LSI instead of a GSI.\n   * @default true\n   */\n  readonly secondaryKeyAsGSI?: boolean;\n\n  /**\n   * Automate generation of query names, and as a result attaching all indexes as queries to the generated Api.\n   * If enabled, @index can be provided a null name field to disable the generation of the query on the Api.\n   * @default true\n   */\n  readonly enableAutoIndexQueryNames?: boolean;\n\n  /**\n   * Enable custom primary key support, there's no good reason to disable this unless trying not to update a legacy app.\n   * @default true\n   */\n  readonly respectPrimaryKeyAttributesOnConnectionField?: boolean;\n\n  /**\n   * If enabled, set nodeToNodeEncryption on the searchable domain (if one exists). Not recommended for use, prefer\n   * to use `Object.values(resources.additionalResources['AWS::Elasticsearch::Domain']).forEach((domain: CfnDomain) => {\n   *   domain.NodeToNodeEncryptionOptions = { Enabled: True };\n   * });\n   * @default false\n   */\n  readonly enableSearchNodeToNodeEncryption?: boolean;\n\n  /**\n   * When enabled, internal cfn outputs which existed in Amplify-generated apps will continue to be emitted.\n   * @default false\n   */\n  readonly enableTransformerCfnOutputs?: boolean;\n\n  /**\n   * The following schema updates require replacement of the underlying DynamoDB table:\n   *\n   *  - Removing or renaming a model\n   *  - Modifying the primary key of a model\n   *  - Modifying a Local Secondary Index of a model (only applies to projects with secondaryKeyAsGSI turned off)\n   *\n   * ALL DATA WILL BE LOST when the table replacement happens. When enabled, destructive updates are allowed.\n   * This will only affect DynamoDB tables with provision strategy \"AMPLIFY_TABLE\".\n   * @default false\n   * @experimental\n   */\n  readonly allowDestructiveGraphqlSchemaUpdates?: boolean;\n\n  /**\n   * This behavior will only come into effect when both \"allowDestructiveGraphqlSchemaUpdates\" and this value are set to true\n   *\n   * When enabled, any global secondary index update operation will replace the table instead of iterative deployment, which will WIPE ALL\n   * EXISTING DATA but cost much less time for deployment This will only affect DynamoDB tables with provision strategy \"AMPLIFY_TABLE\".\n   * @default false\n   * @experimental\n   */\n  readonly replaceTableUponGsiUpdate?: boolean;\n}\n\n/**\n * Graphql Api definition, which can be implemented in multiple ways.\n */\nexport interface IAmplifyGraphqlDefinition {\n  /**\n   * Return the schema definition as a graphql string, with amplify directives allowed.\n   * @returns the rendered schema.\n   */\n  readonly schema: string;\n\n  /**\n   * Retrieve any function slots defined explicitly in the Api definition.\n   * @returns generated function slots\n   */\n  readonly functionSlots: FunctionSlot[];\n\n  /**\n   * Retrieve the references to any lambda functions used in the definition.\n   * Useful for wiring through aws_lambda.Function constructs into the definition directly,\n   * and generated references to invoke them.\n   * @returns any lambda functions, keyed by their referenced 'name' in the generated schema.\n   */\n  readonly referencedLambdaFunctions?: Record<string, IFunction>;\n\n  /**\n   * Retrieve the datasource strategy mapping. The default strategy is to use DynamoDB from CloudFormation.\n   *\n   * **NOTE** Explicitly specifying the 'dataSourceStrategies' configuration option is in preview and is not recommended to use with\n   * production systems. For production, use the static factory methods `fromString` or `fromFiles`.\n   * @experimental\n   * @returns datasource strategy mapping\n   */\n  readonly dataSourceStrategies: Record<string, ModelDataSourceStrategy>;\n\n  /**\n   * An array of custom Query or Mutation SQL commands to the data sources that resolves them.\n   *\n   * **NOTE** Explicitly specifying the 'customSqlDataSourceStrategies' configuration option is in preview and is not recommended to use\n   * with production systems. For production, use the static factory methods `fromString` or `fromFiles`.\n   * @experimental\n   * @returns a list of mappings from custom SQL commands to data sources\n   */\n  readonly customSqlDataSourceStrategies?: CustomSqlDataSourceStrategy[];\n}\n\n/**\n * Entry representing the required output from the backend for codegen generate commands to work.\n */\nexport interface IBackendOutputEntry {\n  /**\n   * The protocol version for this backend output.\n   */\n  readonly version: string;\n\n  /**\n   * The string-map payload of generated config values.\n   */\n  readonly payload: Record<string, string>;\n}\n\n/**\n * Backend output strategy used to write config required for codegen tasks.\n */\nexport interface IBackendOutputStorageStrategy {\n  /**\n   * Add an entry to backend output.\n   * @param keyName the key\n   * @param backendOutputEntry the record to store in the backend output\n   */\n  // eslint-disable-next-line @typescript-eslint/method-signature-style\n  addBackendOutputEntry(keyName: string, backendOutputEntry: IBackendOutputEntry): void;\n}\n\n/**\n * Input props for the AmplifyGraphqlApi construct. Specifies what the input to transform into an Api, and configurations for\n * the transformation process.\n */\nexport interface AmplifyGraphqlApiProps {\n  /**\n   * The definition to transform in a full Api.\n   * Can be constructed via the AmplifyGraphqlDefinition class.\n   */\n  readonly definition: IAmplifyGraphqlDefinition;\n\n  /**\n   * Name to be used for the AppSync Api.\n   * Default: construct id.\n   */\n  readonly apiName?: string;\n\n  /**\n   * Required auth modes for the Api. This object must be a superset of the configured auth providers in the Api definition.\n   * For more information, refer to https://docs.amplify.aws/cli/graphql/authorization-rules/\n   */\n  readonly authorizationModes: AuthorizationModes;\n\n  /**\n   * Lambda functions referenced in the definitions's @function directives. The keys of this object are expected to be the\n   * function name provided in the definition, and value is the function that name refers to. If a name is not found in this\n   * map, then it is interpreted as the `functionName`, and an arn will be constructed using the current aws account and region\n   * (or overridden values, if set in the directive).\n   */\n  readonly functionNameMap?: Record<string, IFunction>;\n\n  /**\n   * Configure conflict resolution on the Api, which is required to enable DataStore Api functionality.\n   * For more information, refer to https://docs.amplify.aws/lib/datastore/getting-started/q/platform/js/\n   */\n  readonly conflictResolution?: ConflictResolution;\n\n  /**\n   * StackMappings override the assigned nested stack on a per-resource basis. Only applies to resolvers, and takes the form\n   * { <logicalId>: <stackName> }\n   * It is not recommended to use this parameter unless you are encountering stack resource count limits, and worth noting that\n   * after initial deployment AppSync resolvers cannot be moved between nested stacks, they will need to be removed from the app,\n   * then re-added from a new stack.\n   */\n  readonly stackMappings?: Record<string, string>;\n\n  /**\n   * Overrides for a given slot in the generated resolver pipelines. For more information about what slots are available,\n   * refer to https://docs.amplify.aws/cli/graphql/custom-business-logic/#override-amplify-generated-resolvers.\n   */\n  readonly functionSlots?: FunctionSlot[];\n\n  /**\n   * Provide a list of additional custom transformers which are injected into the transform process.\n   * These custom transformers must be implemented with aws-cdk-lib >=2.80.0, and @aws-amplify/graphql-transformer-core >= 2.1.1\n   * @experimental\n   */\n  readonly transformerPlugins?: any[];\n\n  /**\n   * If using predictions, a bucket must be provided which will be used to search for assets.\n   */\n  readonly predictionsBucket?: IBucket;\n\n  /**\n   * This replaces feature flags from the Api construct, for general information on what these parameters do,\n   * refer to https://docs.amplify.aws/cli/reference/feature-flags/#graphQLTransformer\n   */\n  readonly translationBehavior?: PartialTranslationBehavior;\n\n  /**\n   * Strategy to store construct outputs. If no outputStorageStrategey is provided a default strategy will be used.\n   */\n  readonly outputStorageStrategy?: IBackendOutputStorageStrategy;\n}\n\n/**\n * L1 CDK resources from the Api which were generated as part of the transform.\n * These are potentially stored under nested stacks, but presented organized by type instead.\n */\nexport interface AmplifyGraphqlApiCfnResources {\n  /**\n   * The Generated AppSync Api L1 Resource\n   */\n  readonly cfnGraphqlApi: CfnGraphQLApi;\n\n  /**\n   * The Generated AppSync Schema L1 Resource\n   */\n  readonly cfnGraphqlSchema: CfnGraphQLSchema;\n\n  /**\n   * The Generated AppSync Api Key L1 Resource\n   */\n  readonly cfnApiKey?: CfnApiKey;\n\n  /**\n   * The Generated AppSync Resolver L1 Resources, keyed by logicalId.\n   */\n  readonly cfnResolvers: Record<string, CfnResolver>;\n\n  /**\n   * The Generated AppSync Function L1 Resources, keyed by logicalId.\n   */\n  readonly cfnFunctionConfigurations: Record<string, CfnFunctionConfiguration>;\n\n  /**\n   * The Generated AppSync DataSource L1 Resources, keyed by logicalId.\n   */\n  readonly cfnDataSources: Record<string, CfnDataSource>;\n\n  /**\n   * The Generated DynamoDB Table L1 Resources, keyed by logicalId.\n   */\n  readonly cfnTables: Record<string, CfnTable>;\n\n  /**\n   * The Generated IAM Role L1 Resources, keyed by logicalId.\n   */\n  readonly cfnRoles: Record<string, CfnRole>;\n\n  /**\n   * The Generated Lambda Function L1 Resources, keyed by function name.\n   */\n  readonly cfnFunctions: Record<string, CfnFunction>;\n\n  /**\n   * Remaining L1 resources generated, keyed by logicalId.\n   */\n  readonly additionalCfnResources: Record<string, CfnResource>;\n}\n\n/**\n * Accessible resources from the Api which were generated as part of the transform.\n * These are potentially stored under nested stacks, but presented organized by type instead.\n */\nexport interface AmplifyGraphqlApiResources {\n  /**\n   * The Generated AppSync Api L2 Resource, includes the Schema.\n   */\n  readonly graphqlApi: IGraphqlApi;\n\n  /**\n   * The Generated DynamoDB Table L2 Resources, keyed by logicalId.\n   */\n  readonly tables: Record<string, ITable>;\n\n  /**\n   * The Generated Amplify DynamoDb Table wrapped if produced, keyed by name.\n   */\n  readonly amplifyDynamoDbTables: Record<string, AmplifyDynamoDbTableWrapper>;\n\n  /**\n   * The Generated IAM Role L2 Resources, keyed by logicalId.\n   */\n  readonly roles: Record<string, IRole>;\n\n  /**\n   * The Generated Lambda Function L1 Resources, keyed by function name.\n   */\n  readonly functions: Record<string, IFunction>;\n\n  /**\n   * L1 Cfn Resources, for when dipping down a level of abstraction is desirable.\n   */\n  readonly cfnResources: AmplifyGraphqlApiCfnResources;\n\n  /**\n   * Nested Stacks generated by the Api Construct.\n   */\n  readonly nestedStacks: Record<string, NestedStack>;\n}\n\n/**\n * Input type properties when adding a new appsync.AppsyncFunction to the generated API.\n * This is equivalent to the Omit<appsync.AppsyncFunctionProps, 'api'>.\n */\nexport interface AddFunctionProps {\n  /**\n   * the data source linked to this AppSync Function\n   */\n  readonly dataSource: BaseDataSource;\n\n  /**\n   * the name of the AppSync Function\n   */\n  readonly name: string;\n\n  /**\n   * the description for this AppSync Function\n   *\n   * @default - no description\n   */\n  readonly description?: string;\n\n  /**\n   * the request mapping template for the AppSync Function\n   *\n   * @default - no request mapping template\n   */\n  readonly requestMappingTemplate?: MappingTemplate;\n\n  /**\n   * the response mapping template for the AppSync Function\n   *\n   * @default - no response mapping template\n   */\n  readonly responseMappingTemplate?: MappingTemplate;\n\n  /**\n   * The functions runtime\n   *\n   * @default - no function runtime, VTL mapping templates used\n   */\n  readonly runtime?: FunctionRuntime;\n\n  /**\n   * The function code\n   *\n   * @default - no code is used\n   */\n  readonly code?: Code;\n}\n"]}