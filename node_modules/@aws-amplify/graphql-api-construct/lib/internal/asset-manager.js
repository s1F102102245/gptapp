"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AssetManager = void 0;
const fs = require("fs");
const path = require("path");
const cdk = require("aws-cdk-lib");
const TEMP_PREFIX = 'transformer-assets';
const FUNCTION_PREFIX = 'functions';
const RESOLVER_PREFIX = 'resolvers';
/**
 * The asset manager bridges the gap between creation of file assets in the transformer (which provide a name+contents tuple)
 * with the path method which is used in CDK.
 */
class AssetManager {
    constructor() {
        this.tempAssetDir = cdk.FileSystem.mkdtemp(TEMP_PREFIX);
        this.resolverAssets = {};
    }
    addAsset(fileName, contents) {
        this.trackResolverAsset(fileName, contents);
        const writableContents = this.isContentsAReference(fileName) ? this.dereferenceContents(contents) : contents;
        const filePath = path.join(this.tempAssetDir, fileName);
        const fileDirName = path.dirname(filePath);
        if (!fs.existsSync(fileDirName)) {
            fs.mkdirSync(fileDirName, { recursive: true });
        }
        fs.writeFileSync(filePath, writableContents);
        return filePath;
    }
    isContentsAReference(fileName) {
        return fileName.startsWith(FUNCTION_PREFIX);
    }
    dereferenceContents(contents) {
        return fs.readFileSync(contents);
    }
    trackResolverAsset(fileName, contents) {
        if (fileName.startsWith(RESOLVER_PREFIX)) {
            const resolverFileName = fileName.split('/')[1];
            this.resolverAssets[resolverFileName] = contents;
        }
    }
}
exports.AssetManager = AssetManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXQtbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9hc3NldC1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHlCQUF5QjtBQUN6Qiw2QkFBNkI7QUFDN0IsbUNBQW1DO0FBRW5DLE1BQU0sV0FBVyxHQUFHLG9CQUFvQixDQUFDO0FBQ3pDLE1BQU0sZUFBZSxHQUFHLFdBQVcsQ0FBQztBQUNwQyxNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUM7QUFFcEM7OztHQUdHO0FBQ0gsTUFBYSxZQUFZO0lBQXpCO1FBQ21CLGlCQUFZLEdBQVcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDNUQsbUJBQWMsR0FBMkIsRUFBRSxDQUFDO0lBNEI5RCxDQUFDO0lBMUJRLFFBQVEsQ0FBQyxRQUFnQixFQUFFLFFBQWdCO1FBQ2hELElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDNUMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO1FBQzdHLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN4RCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQy9CLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDaEQ7UUFDRCxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzdDLE9BQU8sUUFBUSxDQUFDO0lBQ2xCLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxRQUFnQjtRQUMzQyxPQUFPLFFBQVEsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVPLG1CQUFtQixDQUFDLFFBQWdCO1FBQzFDLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRU8sa0JBQWtCLENBQUMsUUFBZ0IsRUFBRSxRQUFnQjtRQUMzRCxJQUFJLFFBQVEsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLEVBQUU7WUFDeEMsTUFBTSxnQkFBZ0IsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hELElBQUksQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxRQUFRLENBQUM7U0FDbEQ7SUFDSCxDQUFDO0NBQ0Y7QUE5QkQsb0NBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5cbmNvbnN0IFRFTVBfUFJFRklYID0gJ3RyYW5zZm9ybWVyLWFzc2V0cyc7XG5jb25zdCBGVU5DVElPTl9QUkVGSVggPSAnZnVuY3Rpb25zJztcbmNvbnN0IFJFU09MVkVSX1BSRUZJWCA9ICdyZXNvbHZlcnMnO1xuXG4vKipcbiAqIFRoZSBhc3NldCBtYW5hZ2VyIGJyaWRnZXMgdGhlIGdhcCBiZXR3ZWVuIGNyZWF0aW9uIG9mIGZpbGUgYXNzZXRzIGluIHRoZSB0cmFuc2Zvcm1lciAod2hpY2ggcHJvdmlkZSBhIG5hbWUrY29udGVudHMgdHVwbGUpXG4gKiB3aXRoIHRoZSBwYXRoIG1ldGhvZCB3aGljaCBpcyB1c2VkIGluIENESy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFzc2V0TWFuYWdlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgdGVtcEFzc2V0RGlyOiBzdHJpbmcgPSBjZGsuRmlsZVN5c3RlbS5ta2R0ZW1wKFRFTVBfUFJFRklYKTtcbiAgcHVibGljIHJlYWRvbmx5IHJlc29sdmVyQXNzZXRzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG5cbiAgcHVibGljIGFkZEFzc2V0KGZpbGVOYW1lOiBzdHJpbmcsIGNvbnRlbnRzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHRoaXMudHJhY2tSZXNvbHZlckFzc2V0KGZpbGVOYW1lLCBjb250ZW50cyk7XG4gICAgY29uc3Qgd3JpdGFibGVDb250ZW50cyA9IHRoaXMuaXNDb250ZW50c0FSZWZlcmVuY2UoZmlsZU5hbWUpID8gdGhpcy5kZXJlZmVyZW5jZUNvbnRlbnRzKGNvbnRlbnRzKSA6IGNvbnRlbnRzO1xuICAgIGNvbnN0IGZpbGVQYXRoID0gcGF0aC5qb2luKHRoaXMudGVtcEFzc2V0RGlyLCBmaWxlTmFtZSk7XG4gICAgY29uc3QgZmlsZURpck5hbWUgPSBwYXRoLmRpcm5hbWUoZmlsZVBhdGgpO1xuICAgIGlmICghZnMuZXhpc3RzU3luYyhmaWxlRGlyTmFtZSkpIHtcbiAgICAgIGZzLm1rZGlyU3luYyhmaWxlRGlyTmFtZSwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gICAgfVxuICAgIGZzLndyaXRlRmlsZVN5bmMoZmlsZVBhdGgsIHdyaXRhYmxlQ29udGVudHMpO1xuICAgIHJldHVybiBmaWxlUGF0aDtcbiAgfVxuXG4gIHByaXZhdGUgaXNDb250ZW50c0FSZWZlcmVuY2UoZmlsZU5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmaWxlTmFtZS5zdGFydHNXaXRoKEZVTkNUSU9OX1BSRUZJWCk7XG4gIH1cblxuICBwcml2YXRlIGRlcmVmZXJlbmNlQ29udGVudHMoY29udGVudHM6IHN0cmluZyk6IEJ1ZmZlciB7XG4gICAgcmV0dXJuIGZzLnJlYWRGaWxlU3luYyhjb250ZW50cyk7XG4gIH1cblxuICBwcml2YXRlIHRyYWNrUmVzb2x2ZXJBc3NldChmaWxlTmFtZTogc3RyaW5nLCBjb250ZW50czogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKGZpbGVOYW1lLnN0YXJ0c1dpdGgoUkVTT0xWRVJfUFJFRklYKSkge1xuICAgICAgY29uc3QgcmVzb2x2ZXJGaWxlTmFtZSA9IGZpbGVOYW1lLnNwbGl0KCcvJylbMV07XG4gICAgICB0aGlzLnJlc29sdmVyQXNzZXRzW3Jlc29sdmVyRmlsZU5hbWVdID0gY29udGVudHM7XG4gICAgfVxuICB9XG59XG4iXX0=