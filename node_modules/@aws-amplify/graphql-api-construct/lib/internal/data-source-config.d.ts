import { CustomSqlDataSourceStrategy as ImplementationCustomSqlDataSourceStrategy, DataSourceType } from '@aws-amplify/graphql-transformer-interfaces';
import { CustomSqlDataSourceStrategy as InterfaceCustomSqlDataSourceStrategy, ModelDataSourceStrategy } from '../model-datasource-strategy';
type DataSourceConfig = {
    modelToDatasourceMap: Map<string, DataSourceType>;
};
/**
 * An internal helper to convert from a map of model-to-ModelDataSourceStrategies to the map of model-to-DataSourceTypes that internal
 * transform processing requires. TODO: We can remove this once we refactor the internals to use ModelDataSourceStrategies natively.
 */
export declare const parseDataSourceConfig: (dataSourceDefinitionMap: Record<string, ModelDataSourceStrategy>) => DataSourceConfig;
/**
 * Creates an interface flavor of customSqlDataSourceStrategies from a factory method's schema and data source. Internally, this function
 * scans the fields of `Query` and `Mutation` looking for fields annotated with the `@sql` directive and designates the specified
 * dataSourceStrategy to fulfill those custom queries.
 *
 * Note that we do not scan for `Subscription` fields: `@sql` directives are not allowed on those, and it wouldn't make sense to do so
 * anyway, since subscriptions are processed from an incoming Mutation, not as the result of a direct datasource access.
 *
 * TODO: Reword this when we refactor to use Strategies throughout the implementation rather than DataSources.
 */
export declare const constructCustomSqlDataSourceStrategies: (schema: string, dataSourceStrategy: ModelDataSourceStrategy) => InterfaceCustomSqlDataSourceStrategy[];
/**
 * We currently use a different type structure to model strategies in the interface than we do in the implementation. This maps the
 * interface CustomSqlDataSourceStrategy (which uses SQLLambdaModelDataSourceStrategy) to the implementation flavor (which uses
 * DataSourceType).
 *
 * TODO: Remove this once we refactor the internals to use strategies rather than DataSourceTypes
 */
export declare const mapInterfaceCustomSqlStrategiesToImplementationStrategies: (strategies?: InterfaceCustomSqlDataSourceStrategy[]) => ImplementationCustomSqlDataSourceStrategy[];
export {};
