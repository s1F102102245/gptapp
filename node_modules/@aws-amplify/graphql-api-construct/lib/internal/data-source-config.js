"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapInterfaceCustomSqlStrategiesToImplementationStrategies = exports.constructCustomSqlDataSourceStrategies = exports.parseDataSourceConfig = void 0;
const graphql_1 = require("graphql");
const graphql_transformer_core_1 = require("@aws-amplify/graphql-transformer-core");
const utils_1 = require("@aws-amplify/graphql-transformer-core/lib/utils");
/**
 * An internal helper to convert from a map of model-to-ModelDataSourceStrategies to the map of model-to-DataSourceTypes that internal
 * transform processing requires. TODO: We can remove this once we refactor the internals to use ModelDataSourceStrategies natively.
 */
const parseDataSourceConfig = (dataSourceDefinitionMap) => {
    const modelToDatasourceMap = new Map();
    for (const [key, value] of Object.entries(dataSourceDefinitionMap)) {
        const dataSourceType = (0, graphql_transformer_core_1.dataSourceStrategyToDataSourceType)(value);
        modelToDatasourceMap.set(key, dataSourceType);
    }
    return {
        modelToDatasourceMap,
    };
};
exports.parseDataSourceConfig = parseDataSourceConfig;
/**
 * Creates an interface flavor of customSqlDataSourceStrategies from a factory method's schema and data source. Internally, this function
 * scans the fields of `Query` and `Mutation` looking for fields annotated with the `@sql` directive and designates the specified
 * dataSourceStrategy to fulfill those custom queries.
 *
 * Note that we do not scan for `Subscription` fields: `@sql` directives are not allowed on those, and it wouldn't make sense to do so
 * anyway, since subscriptions are processed from an incoming Mutation, not as the result of a direct datasource access.
 *
 * TODO: Reword this when we refactor to use Strategies throughout the implementation rather than DataSources.
 */
const constructCustomSqlDataSourceStrategies = (schema, dataSourceStrategy) => {
    if (!(0, graphql_transformer_core_1.isSqlStrategy)(dataSourceStrategy)) {
        return [];
    }
    const parsedSchema = (0, graphql_1.parse)(schema);
    const queryNode = parsedSchema.definitions.find(graphql_transformer_core_1.isQueryNode);
    const mutationNode = parsedSchema.definitions.find(graphql_transformer_core_1.isMutationNode);
    if (!queryNode && !mutationNode) {
        return [];
    }
    const customSqlDataSourceStrategies = [];
    if (queryNode) {
        const fields = (0, graphql_transformer_core_1.fieldsWithSqlDirective)(queryNode);
        for (const field of fields) {
            customSqlDataSourceStrategies.push({
                typeName: 'Query',
                fieldName: field.name.value,
                strategy: dataSourceStrategy,
            });
        }
    }
    if (mutationNode) {
        const fields = (0, graphql_transformer_core_1.fieldsWithSqlDirective)(mutationNode);
        for (const field of fields) {
            customSqlDataSourceStrategies.push({
                typeName: 'Mutation',
                fieldName: field.name.value,
                strategy: dataSourceStrategy,
            });
        }
    }
    return customSqlDataSourceStrategies;
};
exports.constructCustomSqlDataSourceStrategies = constructCustomSqlDataSourceStrategies;
/**
 * We currently use a different type structure to model strategies in the interface than we do in the implementation. This maps the
 * interface CustomSqlDataSourceStrategy (which uses SQLLambdaModelDataSourceStrategy) to the implementation flavor (which uses
 * DataSourceType).
 *
 * TODO: Remove this once we refactor the internals to use strategies rather than DataSourceTypes
 */
const mapInterfaceCustomSqlStrategiesToImplementationStrategies = (strategies) => {
    if (!strategies) {
        return [];
    }
    return strategies.map((interfaceStrategy) => ({
        fieldName: interfaceStrategy.fieldName,
        typeName: interfaceStrategy.typeName,
        dataSourceType: {
            dbType: (0, utils_1.normalizeDbType)(interfaceStrategy.strategy.dbType),
            provisionDB: false,
            provisionStrategy: "DEFAULT" /* SQLLambdaModelProvisionStrategy.DEFAULT */,
        },
    }));
};
exports.mapInterfaceCustomSqlStrategiesToImplementationStrategies = mapInterfaceCustomSqlStrategiesToImplementationStrategies;
//# sourceMappingURL=data:application/json;base64,