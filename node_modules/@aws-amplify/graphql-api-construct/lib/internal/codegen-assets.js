"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CodegenAssets = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const aws_s3_deployment_1 = require("aws-cdk-lib/aws-s3-deployment");
const constructs_1 = require("constructs");
const MODEL_SCHEMA_KEY = 'model-schema.graphql';
/**
 * Construct an S3 URI string for a given bucket and key.
 * @param bucket the bucket to embed in the uri string
 * @param key the key to embed in the uri string
 * @returns the uri string representation.
 */
const getS3UriForBucketAndKey = (bucket, key) => `s3://${bucket.bucketName}/${key}`;
/**
 * Construct which creates a bucket, and uploads file assets required for codegen to run.
 * Pointers to these resources are persisted in the stack outputs.
 */
class CodegenAssets extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const bucket = new aws_s3_1.Bucket(this, `${id}Bucket`, {
            removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            autoDeleteObjects: true,
        });
        new aws_s3_deployment_1.BucketDeployment(this, `${id}Deployment`, {
            destinationBucket: bucket,
            sources: [aws_s3_deployment_1.Source.data(MODEL_SCHEMA_KEY, props.modelSchema)],
            // Bucket deployment uses a Lambda that runs AWS S3 CLI to transfer assets to destination bucket.
            // That Lambda requires higher memory setting to run fast even when processing small assets (less than 1kB).
            // This setting has been established experimentally. Benchmark can be found in pull request description that established it.
            // The value has been chosen to prefer the lowest cost (run time * memory demand) while providing reasonable performance.
            memoryLimit: 1536,
        });
        this.modelSchemaS3Uri = getS3UriForBucketAndKey(bucket, MODEL_SCHEMA_KEY);
    }
}
exports.CodegenAssets = CodegenAssets;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZWdlbi1hc3NldHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW50ZXJuYWwvY29kZWdlbi1hc3NldHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQTRDO0FBQzVDLCtDQUE0QztBQUM1QyxxRUFBeUU7QUFDekUsMkNBQXVDO0FBTXZDLE1BQU0sZ0JBQWdCLEdBQUcsc0JBQXNCLENBQUM7QUFFaEQ7Ozs7O0dBS0c7QUFDSCxNQUFNLHVCQUF1QixHQUFHLENBQUMsTUFBYyxFQUFFLEdBQVcsRUFBVSxFQUFFLENBQUMsUUFBUSxNQUFNLENBQUMsVUFBVSxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBRTVHOzs7R0FHRztBQUNILE1BQWEsYUFBYyxTQUFRLHNCQUFTO0lBRzFDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBeUI7UUFDakUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVqQixNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRTtZQUM3QyxhQUFhLEVBQUUsMkJBQWEsQ0FBQyxPQUFPO1lBQ3BDLGlCQUFpQixFQUFFLElBQUk7U0FDeEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxvQ0FBZ0IsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFlBQVksRUFBRTtZQUM1QyxpQkFBaUIsRUFBRSxNQUFNO1lBQ3pCLE9BQU8sRUFBRSxDQUFDLDBCQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUMzRCxpR0FBaUc7WUFDakcsNEdBQTRHO1lBQzVHLDRIQUE0SDtZQUM1SCx5SEFBeUg7WUFDekgsV0FBVyxFQUFFLElBQUk7U0FDbEIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLGdCQUFnQixHQUFHLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzVFLENBQUM7Q0FDRjtBQXZCRCxzQ0F1QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZW1vdmFsUG9saWN5IH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQnVja2V0IH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLXMzJztcbmltcG9ydCB7IEJ1Y2tldERlcGxveW1lbnQsIFNvdXJjZSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMy1kZXBsb3ltZW50JztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuXG5leHBvcnQgdHlwZSBDb2RlZ2VuQXNzZXRzUHJvcHMgPSB7XG4gIG1vZGVsU2NoZW1hOiBzdHJpbmc7XG59O1xuXG5jb25zdCBNT0RFTF9TQ0hFTUFfS0VZID0gJ21vZGVsLXNjaGVtYS5ncmFwaHFsJztcblxuLyoqXG4gKiBDb25zdHJ1Y3QgYW4gUzMgVVJJIHN0cmluZyBmb3IgYSBnaXZlbiBidWNrZXQgYW5kIGtleS5cbiAqIEBwYXJhbSBidWNrZXQgdGhlIGJ1Y2tldCB0byBlbWJlZCBpbiB0aGUgdXJpIHN0cmluZ1xuICogQHBhcmFtIGtleSB0aGUga2V5IHRvIGVtYmVkIGluIHRoZSB1cmkgc3RyaW5nXG4gKiBAcmV0dXJucyB0aGUgdXJpIHN0cmluZyByZXByZXNlbnRhdGlvbi5cbiAqL1xuY29uc3QgZ2V0UzNVcmlGb3JCdWNrZXRBbmRLZXkgPSAoYnVja2V0OiBCdWNrZXQsIGtleTogc3RyaW5nKTogc3RyaW5nID0+IGBzMzovLyR7YnVja2V0LmJ1Y2tldE5hbWV9LyR7a2V5fWA7XG5cbi8qKlxuICogQ29uc3RydWN0IHdoaWNoIGNyZWF0ZXMgYSBidWNrZXQsIGFuZCB1cGxvYWRzIGZpbGUgYXNzZXRzIHJlcXVpcmVkIGZvciBjb2RlZ2VuIHRvIHJ1bi5cbiAqIFBvaW50ZXJzIHRvIHRoZXNlIHJlc291cmNlcyBhcmUgcGVyc2lzdGVkIGluIHRoZSBzdGFjayBvdXRwdXRzLlxuICovXG5leHBvcnQgY2xhc3MgQ29kZWdlbkFzc2V0cyBleHRlbmRzIENvbnN0cnVjdCB7XG4gIHB1YmxpYyBtb2RlbFNjaGVtYVMzVXJpOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IENvZGVnZW5Bc3NldHNQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBjb25zdCBidWNrZXQgPSBuZXcgQnVja2V0KHRoaXMsIGAke2lkfUJ1Y2tldGAsIHtcbiAgICAgIHJlbW92YWxQb2xpY3k6IFJlbW92YWxQb2xpY3kuREVTVFJPWSxcbiAgICAgIGF1dG9EZWxldGVPYmplY3RzOiB0cnVlLFxuICAgIH0pO1xuXG4gICAgbmV3IEJ1Y2tldERlcGxveW1lbnQodGhpcywgYCR7aWR9RGVwbG95bWVudGAsIHtcbiAgICAgIGRlc3RpbmF0aW9uQnVja2V0OiBidWNrZXQsXG4gICAgICBzb3VyY2VzOiBbU291cmNlLmRhdGEoTU9ERUxfU0NIRU1BX0tFWSwgcHJvcHMubW9kZWxTY2hlbWEpXSxcbiAgICAgIC8vIEJ1Y2tldCBkZXBsb3ltZW50IHVzZXMgYSBMYW1iZGEgdGhhdCBydW5zIEFXUyBTMyBDTEkgdG8gdHJhbnNmZXIgYXNzZXRzIHRvIGRlc3RpbmF0aW9uIGJ1Y2tldC5cbiAgICAgIC8vIFRoYXQgTGFtYmRhIHJlcXVpcmVzIGhpZ2hlciBtZW1vcnkgc2V0dGluZyB0byBydW4gZmFzdCBldmVuIHdoZW4gcHJvY2Vzc2luZyBzbWFsbCBhc3NldHMgKGxlc3MgdGhhbiAxa0IpLlxuICAgICAgLy8gVGhpcyBzZXR0aW5nIGhhcyBiZWVuIGVzdGFibGlzaGVkIGV4cGVyaW1lbnRhbGx5LiBCZW5jaG1hcmsgY2FuIGJlIGZvdW5kIGluIHB1bGwgcmVxdWVzdCBkZXNjcmlwdGlvbiB0aGF0IGVzdGFibGlzaGVkIGl0LlxuICAgICAgLy8gVGhlIHZhbHVlIGhhcyBiZWVuIGNob3NlbiB0byBwcmVmZXIgdGhlIGxvd2VzdCBjb3N0IChydW4gdGltZSAqIG1lbW9yeSBkZW1hbmQpIHdoaWxlIHByb3ZpZGluZyByZWFzb25hYmxlIHBlcmZvcm1hbmNlLlxuICAgICAgbWVtb3J5TGltaXQ6IDE1MzYsXG4gICAgfSk7XG5cbiAgICB0aGlzLm1vZGVsU2NoZW1hUzNVcmkgPSBnZXRTM1VyaUZvckJ1Y2tldEFuZEtleShidWNrZXQsIE1PREVMX1NDSEVNQV9LRVkpO1xuICB9XG59XG4iXX0=