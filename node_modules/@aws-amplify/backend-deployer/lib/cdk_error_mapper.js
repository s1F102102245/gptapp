/**
 * Transforms CDK error messages to human readable ones
 */
export class CdkErrorMapper {
    knownErrors = [
        {
            errorRegex: /ExpiredToken/,
            humanReadableError: '[ExpiredToken]: The security token included in the request is invalid.',
        },
        {
            errorRegex: /Access Denied/,
            humanReadableError: '[AccessDenied]: The deployment role does not have sufficient permissions to perform this deployment.',
        },
        {
            errorRegex: /Has the environment been bootstrapped/,
            humanReadableError: '[BootstrapFailure]: This AWS account and region has not been bootstrapped. Run `cdk bootstrap aws://{YOUR_ACCOUNT_ID}/{YOUR_REGION}` locally to resolve this.',
        },
        {
            // the backend entry point file is referenced in the stack indicating a problem in customer code
            errorRegex: /amplify\/backend/,
            humanReadableError: '[SynthError]: Unable to build Amplify backend. Check your backend definition in the `amplify` folder.',
        },
        {
            errorRegex: /SyntaxError:(.*)\n/,
            humanReadableError: '[SyntaxError]: Unable to build Amplify backend. Check your backend definition in the `amplify` folder.',
        },
        {
            errorRegex: /Updates are not allowed for property/,
            humanReadableError: '[UpdateNotSupported]: The changes that you are trying to apply are not supported.',
        },
        {
            // This error originates from Cognito service when user tries to change UserPool attributes which is not allowed
            // https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html
            // Remapping to `UpdateNotSupported` will allow sandbox to prompt users for resetting their environment
            errorRegex: /Invalid AttributeDataType input, consider using the provided AttributeDataType enum/,
            humanReadableError: '[UpdateNotSupported]: User pool attributes cannot be changed after a user pool has been created.',
        },
        {
            // Note that the order matters, this should be the last as it captures generic CFN error
            errorRegex: /❌ Deployment failed: (.*)\n/,
            humanReadableError: '[CloudFormationFailure]: The CloudFormation deployment has failed. Find more information in the CloudFormation AWS Console for this stack.',
        },
    ];
    getHumanReadableError = (error) => {
        const matchingError = this.knownErrors.find((knownError) => knownError.errorRegex.test(error.message));
        if (matchingError) {
            const underlyingMessage = error.message.match(matchingError.errorRegex);
            error.message =
                underlyingMessage && underlyingMessage.length == 2
                    ? underlyingMessage[1]
                    : error.message;
            return new Error(matchingError.humanReadableError, { cause: error });
        }
        return error;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2RrX2Vycm9yX21hcHBlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jZGtfZXJyb3JfbWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGNBQWM7SUFDakIsV0FBVyxHQUdkO1FBQ0g7WUFDRSxVQUFVLEVBQUUsY0FBYztZQUMxQixrQkFBa0IsRUFDaEIsd0VBQXdFO1NBQzNFO1FBQ0Q7WUFDRSxVQUFVLEVBQUUsZUFBZTtZQUMzQixrQkFBa0IsRUFDaEIsc0dBQXNHO1NBQ3pHO1FBQ0Q7WUFDRSxVQUFVLEVBQUUsdUNBQXVDO1lBQ25ELGtCQUFrQixFQUNoQiwrSkFBK0o7U0FDbEs7UUFDRDtZQUNFLGdHQUFnRztZQUNoRyxVQUFVLEVBQUUsa0JBQWtCO1lBQzlCLGtCQUFrQixFQUNoQix1R0FBdUc7U0FDMUc7UUFDRDtZQUNFLFVBQVUsRUFBRSxvQkFBb0I7WUFDaEMsa0JBQWtCLEVBQ2hCLHdHQUF3RztTQUMzRztRQUNEO1lBQ0UsVUFBVSxFQUFFLHNDQUFzQztZQUNsRCxrQkFBa0IsRUFDaEIsbUZBQW1GO1NBQ3RGO1FBQ0Q7WUFDRSxnSEFBZ0g7WUFDaEgsK0ZBQStGO1lBQy9GLHVHQUF1RztZQUN2RyxVQUFVLEVBQ1IscUZBQXFGO1lBQ3ZGLGtCQUFrQixFQUNoQixrR0FBa0c7U0FDckc7UUFDRDtZQUNFLHdGQUF3RjtZQUN4RixVQUFVLEVBQUUsNkJBQTZCO1lBQ3pDLGtCQUFrQixFQUNoQiw0SUFBNEk7U0FDL0k7S0FDRixDQUFDO0lBRUYscUJBQXFCLEdBQUcsQ0FBQyxLQUFZLEVBQVMsRUFBRTtRQUM5QyxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQ3pELFVBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FDMUMsQ0FBQztRQUVGLElBQUksYUFBYSxFQUFFO1lBQ2pCLE1BQU0saUJBQWlCLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3hFLEtBQUssQ0FBQyxPQUFPO2dCQUNYLGlCQUFpQixJQUFJLGlCQUFpQixDQUFDLE1BQU0sSUFBSSxDQUFDO29CQUNoRCxDQUFDLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDO29CQUN0QixDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUNwQixPQUFPLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ3RFO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVHJhbnNmb3JtcyBDREsgZXJyb3IgbWVzc2FnZXMgdG8gaHVtYW4gcmVhZGFibGUgb25lc1xuICovXG5leHBvcnQgY2xhc3MgQ2RrRXJyb3JNYXBwZXIge1xuICBwcml2YXRlIGtub3duRXJyb3JzOiBBcnJheTx7XG4gICAgZXJyb3JSZWdleDogUmVnRXhwO1xuICAgIGh1bWFuUmVhZGFibGVFcnJvcjogc3RyaW5nO1xuICB9PiA9IFtcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiAvRXhwaXJlZFRva2VuLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvcjpcbiAgICAgICAgJ1tFeHBpcmVkVG9rZW5dOiBUaGUgc2VjdXJpdHkgdG9rZW4gaW5jbHVkZWQgaW4gdGhlIHJlcXVlc3QgaXMgaW52YWxpZC4nLFxuICAgIH0sXG4gICAge1xuICAgICAgZXJyb3JSZWdleDogL0FjY2VzcyBEZW5pZWQvLFxuICAgICAgaHVtYW5SZWFkYWJsZUVycm9yOlxuICAgICAgICAnW0FjY2Vzc0RlbmllZF06IFRoZSBkZXBsb3ltZW50IHJvbGUgZG9lcyBub3QgaGF2ZSBzdWZmaWNpZW50IHBlcm1pc3Npb25zIHRvIHBlcmZvcm0gdGhpcyBkZXBsb3ltZW50LicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiAvSGFzIHRoZSBlbnZpcm9ubWVudCBiZWVuIGJvb3RzdHJhcHBlZC8sXG4gICAgICBodW1hblJlYWRhYmxlRXJyb3I6XG4gICAgICAgICdbQm9vdHN0cmFwRmFpbHVyZV06IFRoaXMgQVdTIGFjY291bnQgYW5kIHJlZ2lvbiBoYXMgbm90IGJlZW4gYm9vdHN0cmFwcGVkLiBSdW4gYGNkayBib290c3RyYXAgYXdzOi8ve1lPVVJfQUNDT1VOVF9JRH0ve1lPVVJfUkVHSU9OfWAgbG9jYWxseSB0byByZXNvbHZlIHRoaXMuJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIHRoZSBiYWNrZW5kIGVudHJ5IHBvaW50IGZpbGUgaXMgcmVmZXJlbmNlZCBpbiB0aGUgc3RhY2sgaW5kaWNhdGluZyBhIHByb2JsZW0gaW4gY3VzdG9tZXIgY29kZVxuICAgICAgZXJyb3JSZWdleDogL2FtcGxpZnlcXC9iYWNrZW5kLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvcjpcbiAgICAgICAgJ1tTeW50aEVycm9yXTogVW5hYmxlIHRvIGJ1aWxkIEFtcGxpZnkgYmFja2VuZC4gQ2hlY2sgeW91ciBiYWNrZW5kIGRlZmluaXRpb24gaW4gdGhlIGBhbXBsaWZ5YCBmb2xkZXIuJyxcbiAgICB9LFxuICAgIHtcbiAgICAgIGVycm9yUmVnZXg6IC9TeW50YXhFcnJvcjooLiopXFxuLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvcjpcbiAgICAgICAgJ1tTeW50YXhFcnJvcl06IFVuYWJsZSB0byBidWlsZCBBbXBsaWZ5IGJhY2tlbmQuIENoZWNrIHlvdXIgYmFja2VuZCBkZWZpbml0aW9uIGluIHRoZSBgYW1wbGlmeWAgZm9sZGVyLicsXG4gICAgfSxcbiAgICB7XG4gICAgICBlcnJvclJlZ2V4OiAvVXBkYXRlcyBhcmUgbm90IGFsbG93ZWQgZm9yIHByb3BlcnR5LyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvcjpcbiAgICAgICAgJ1tVcGRhdGVOb3RTdXBwb3J0ZWRdOiBUaGUgY2hhbmdlcyB0aGF0IHlvdSBhcmUgdHJ5aW5nIHRvIGFwcGx5IGFyZSBub3Qgc3VwcG9ydGVkLicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBUaGlzIGVycm9yIG9yaWdpbmF0ZXMgZnJvbSBDb2duaXRvIHNlcnZpY2Ugd2hlbiB1c2VyIHRyaWVzIHRvIGNoYW5nZSBVc2VyUG9vbCBhdHRyaWJ1dGVzIHdoaWNoIGlzIG5vdCBhbGxvd2VkXG4gICAgICAvLyBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vY29nbml0by9sYXRlc3QvZGV2ZWxvcGVyZ3VpZGUvdXNlci1wb29sLXNldHRpbmdzLWF0dHJpYnV0ZXMuaHRtbFxuICAgICAgLy8gUmVtYXBwaW5nIHRvIGBVcGRhdGVOb3RTdXBwb3J0ZWRgIHdpbGwgYWxsb3cgc2FuZGJveCB0byBwcm9tcHQgdXNlcnMgZm9yIHJlc2V0dGluZyB0aGVpciBlbnZpcm9ubWVudFxuICAgICAgZXJyb3JSZWdleDpcbiAgICAgICAgL0ludmFsaWQgQXR0cmlidXRlRGF0YVR5cGUgaW5wdXQsIGNvbnNpZGVyIHVzaW5nIHRoZSBwcm92aWRlZCBBdHRyaWJ1dGVEYXRhVHlwZSBlbnVtLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvcjpcbiAgICAgICAgJ1tVcGRhdGVOb3RTdXBwb3J0ZWRdOiBVc2VyIHBvb2wgYXR0cmlidXRlcyBjYW5ub3QgYmUgY2hhbmdlZCBhZnRlciBhIHVzZXIgcG9vbCBoYXMgYmVlbiBjcmVhdGVkLicsXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBOb3RlIHRoYXQgdGhlIG9yZGVyIG1hdHRlcnMsIHRoaXMgc2hvdWxkIGJlIHRoZSBsYXN0IGFzIGl0IGNhcHR1cmVzIGdlbmVyaWMgQ0ZOIGVycm9yXG4gICAgICBlcnJvclJlZ2V4OiAv4p2MIERlcGxveW1lbnQgZmFpbGVkOiAoLiopXFxuLyxcbiAgICAgIGh1bWFuUmVhZGFibGVFcnJvcjpcbiAgICAgICAgJ1tDbG91ZEZvcm1hdGlvbkZhaWx1cmVdOiBUaGUgQ2xvdWRGb3JtYXRpb24gZGVwbG95bWVudCBoYXMgZmFpbGVkLiBGaW5kIG1vcmUgaW5mb3JtYXRpb24gaW4gdGhlIENsb3VkRm9ybWF0aW9uIEFXUyBDb25zb2xlIGZvciB0aGlzIHN0YWNrLicsXG4gICAgfSxcbiAgXTtcblxuICBnZXRIdW1hblJlYWRhYmxlRXJyb3IgPSAoZXJyb3I6IEVycm9yKTogRXJyb3IgPT4ge1xuICAgIGNvbnN0IG1hdGNoaW5nRXJyb3IgPSB0aGlzLmtub3duRXJyb3JzLmZpbmQoKGtub3duRXJyb3IpID0+XG4gICAgICBrbm93bkVycm9yLmVycm9yUmVnZXgudGVzdChlcnJvci5tZXNzYWdlKVxuICAgICk7XG5cbiAgICBpZiAobWF0Y2hpbmdFcnJvcikge1xuICAgICAgY29uc3QgdW5kZXJseWluZ01lc3NhZ2UgPSBlcnJvci5tZXNzYWdlLm1hdGNoKG1hdGNoaW5nRXJyb3IuZXJyb3JSZWdleCk7XG4gICAgICBlcnJvci5tZXNzYWdlID1cbiAgICAgICAgdW5kZXJseWluZ01lc3NhZ2UgJiYgdW5kZXJseWluZ01lc3NhZ2UubGVuZ3RoID09IDJcbiAgICAgICAgICA/IHVuZGVybHlpbmdNZXNzYWdlWzFdXG4gICAgICAgICAgOiBlcnJvci5tZXNzYWdlO1xuICAgICAgcmV0dXJuIG5ldyBFcnJvcihtYXRjaGluZ0Vycm9yLmh1bWFuUmVhZGFibGVFcnJvciwgeyBjYXVzZTogZXJyb3IgfSk7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbiAgfTtcbn1cbiJdfQ==