import { AppSyncAuthConfiguration, TransformerPluginProvider, TransformHostProvider, TransformerLog, NestedStackProvider, RDSLayerMapping, SynthParameters } from '@aws-amplify/graphql-transformer-interfaces';
import type { AssetProvider, StackManagerProvider, TransformParameterProvider, TransformParameters, VpcConfig, ProvisionedConcurrencyConfig } from '@aws-amplify/graphql-transformer-interfaces';
import { DocumentNode } from 'graphql/language';
import { Construct } from 'constructs';
import { ResolverConfig } from '../config/transformer-config';
import { GraphQLApi } from '../graphql-api';
import { TransformerOutput } from '../transformer-context/output';
import { UserDefinedSlot, DatasourceTransformationConfig } from './types';
export interface GraphQLTransformOptions {
    readonly transformers: TransformerPluginProvider[];
    readonly stackMapping?: StackMapping;
    readonly authConfig?: AppSyncAuthConfiguration;
    readonly transformParameters?: Partial<TransformParameters>;
    readonly host?: TransformHostProvider;
    readonly userDefinedSlots?: Record<string, UserDefinedSlot[]>;
    readonly resolverConfig?: ResolverConfig;
    readonly sqlLambdaVpcConfig?: VpcConfig;
    readonly rdsLayerMapping?: RDSLayerMapping;
    readonly sqlLambdaProvisionedConcurrencyConfig?: ProvisionedConcurrencyConfig;
}
export type TransformOption = {
    scope: Construct;
    nestedStackProvider: NestedStackProvider;
    parameterProvider?: TransformParameterProvider;
    assetProvider: AssetProvider;
    synthParameters: SynthParameters;
    schema: string;
    datasourceConfig?: DatasourceTransformationConfig;
};
export type StackMapping = {
    [resourceId: string]: string;
};
export declare class GraphQLTransform {
    private readonly options;
    private transformers;
    private stackMappingOverrides;
    private readonly authConfig;
    private readonly resolverConfig?;
    private readonly userDefinedSlots;
    private readonly sqlLambdaVpcConfig?;
    private readonly transformParameters;
    private readonly sqlLambdaProvisionedConcurrencyConfig?;
    private seenTransformations;
    private logs;
    constructor(options: GraphQLTransformOptions);
    preProcessSchema(schema: DocumentNode): DocumentNode;
    transform({ scope, nestedStackProvider, parameterProvider, assetProvider, synthParameters, schema, datasourceConfig, }: TransformOption): void;
    protected generateGraphQlApi(stackManager: StackManagerProvider, synthParameters: SynthParameters, output: TransformerOutput, transformParameters: TransformParameters): GraphQLApi;
    private collectResolvers;
    private transformObject;
    private transformField;
    private transformArgument;
    private transformInterface;
    private transformScalar;
    private transformUnion;
    private transformEnum;
    private transformEnumValue;
    private transformInputObject;
    private transformInputField;
    getLogs(): TransformerLog[];
}
//# sourceMappingURL=transform.d.ts.map