import { AppSyncClient } from '@aws-sdk/client-appsync';
import { BackendOutputClientFactory, } from '@aws-amplify/deployed-backend-client';
import { graphqlOutputKey } from '@aws-amplify/backend-output-schemas';
import { AppsyncGraphqlGenerationResult } from './appsync_graphql_generation_result.js';
import { AppSyncIntrospectionSchemaFetcher } from './appsync_schema_fetcher.js';
import { AppSyncGraphqlDocumentGenerator } from './graphql_document_generator.js';
/**
 * Factory function to compose a model generator
 */
export const createGraphqlDocumentGenerator = ({ backendIdentifier, credentialProvider, }) => {
    if (!backendIdentifier) {
        throw new Error('`backendIdentifier` must be defined');
    }
    if (!credentialProvider) {
        throw new Error('`credentialProvider` must be defined');
    }
    const fetchSchema = async () => {
        const backendOutputClient = BackendOutputClientFactory.getInstance({
            credentials: credentialProvider,
        });
        const output = await backendOutputClient.getOutput(backendIdentifier);
        const apiId = output[graphqlOutputKey]?.payload.awsAppsyncApiId;
        if (!apiId) {
            throw new Error(`Unable to determine AppSync API ID.`);
        }
        return new AppSyncIntrospectionSchemaFetcher(new AppSyncClient()).fetch(apiId);
    };
    return new AppSyncGraphqlDocumentGenerator(fetchSchema, (fileMap) => new AppsyncGraphqlGenerationResult(fileMap));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX2dyYXBocWxfZG9jdW1lbnRfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZV9ncmFwaHFsX2RvY3VtZW50X2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDeEQsT0FBTyxFQUNMLDBCQUEwQixHQUUzQixNQUFNLHNDQUFzQyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRXZFLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBUWxGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcsQ0FBQyxFQUM3QyxpQkFBaUIsRUFDakIsa0JBQWtCLEdBQ29CLEVBQTRCLEVBQUU7SUFDcEUsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1FBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMscUNBQXFDLENBQUMsQ0FBQztLQUN4RDtJQUNELElBQUksQ0FBQyxrQkFBa0IsRUFBRTtRQUN2QixNQUFNLElBQUksS0FBSyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7S0FDekQ7SUFFRCxNQUFNLFdBQVcsR0FBRyxLQUFLLElBQUksRUFBRTtRQUM3QixNQUFNLG1CQUFtQixHQUFHLDBCQUEwQixDQUFDLFdBQVcsQ0FBQztZQUNqRSxXQUFXLEVBQUUsa0JBQWtCO1NBQ2hDLENBQUMsQ0FBQztRQUNILE1BQU0sTUFBTSxHQUFHLE1BQU0sbUJBQW1CLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDdEUsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBQztRQUNoRSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO1NBQ3hEO1FBRUQsT0FBTyxJQUFJLGlDQUFpQyxDQUFDLElBQUksYUFBYSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQ3JFLEtBQUssQ0FDTixDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBQ0YsT0FBTyxJQUFJLCtCQUErQixDQUN4QyxXQUFXLEVBQ1gsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksOEJBQThCLENBQUMsT0FBTyxDQUFDLENBQ3pELENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBTeW5jQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LWFwcHN5bmMnO1xuaW1wb3J0IHtcbiAgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnksXG4gIERlcGxveWVkQmFja2VuZElkZW50aWZpZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9kZXBsb3llZC1iYWNrZW5kLWNsaWVudCc7XG5pbXBvcnQgeyBncmFwaHFsT3V0cHV0S2V5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtb3V0cHV0LXNjaGVtYXMnO1xuaW1wb3J0IHsgQXdzQ3JlZGVudGlhbElkZW50aXR5UHJvdmlkZXIgfSBmcm9tICdAYXdzLXNkay90eXBlcyc7XG5pbXBvcnQgeyBBcHBzeW5jR3JhcGhxbEdlbmVyYXRpb25SZXN1bHQgfSBmcm9tICcuL2FwcHN5bmNfZ3JhcGhxbF9nZW5lcmF0aW9uX3Jlc3VsdC5qcyc7XG5pbXBvcnQgeyBBcHBTeW5jSW50cm9zcGVjdGlvblNjaGVtYUZldGNoZXIgfSBmcm9tICcuL2FwcHN5bmNfc2NoZW1hX2ZldGNoZXIuanMnO1xuaW1wb3J0IHsgQXBwU3luY0dyYXBocWxEb2N1bWVudEdlbmVyYXRvciB9IGZyb20gJy4vZ3JhcGhxbF9kb2N1bWVudF9nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgR3JhcGhxbERvY3VtZW50R2VuZXJhdG9yIH0gZnJvbSAnLi9tb2RlbF9nZW5lcmF0b3IuanMnO1xuXG5leHBvcnQgdHlwZSBHcmFwaHFsRG9jdW1lbnRHZW5lcmF0b3JGYWN0b3J5UGFyYW1zID0ge1xuICBiYWNrZW5kSWRlbnRpZmllcjogRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllcjtcbiAgY3JlZGVudGlhbFByb3ZpZGVyOiBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlcjtcbn07XG5cbi8qKlxuICogRmFjdG9yeSBmdW5jdGlvbiB0byBjb21wb3NlIGEgbW9kZWwgZ2VuZXJhdG9yXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVHcmFwaHFsRG9jdW1lbnRHZW5lcmF0b3IgPSAoe1xuICBiYWNrZW5kSWRlbnRpZmllcixcbiAgY3JlZGVudGlhbFByb3ZpZGVyLFxufTogR3JhcGhxbERvY3VtZW50R2VuZXJhdG9yRmFjdG9yeVBhcmFtcyk6IEdyYXBocWxEb2N1bWVudEdlbmVyYXRvciA9PiB7XG4gIGlmICghYmFja2VuZElkZW50aWZpZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BiYWNrZW5kSWRlbnRpZmllcmAgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIH1cbiAgaWYgKCFjcmVkZW50aWFsUHJvdmlkZXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2BjcmVkZW50aWFsUHJvdmlkZXJgIG11c3QgYmUgZGVmaW5lZCcpO1xuICB9XG5cbiAgY29uc3QgZmV0Y2hTY2hlbWEgPSBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYmFja2VuZE91dHB1dENsaWVudCA9IEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5LmdldEluc3RhbmNlKHtcbiAgICAgIGNyZWRlbnRpYWxzOiBjcmVkZW50aWFsUHJvdmlkZXIsXG4gICAgfSk7XG4gICAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgYmFja2VuZE91dHB1dENsaWVudC5nZXRPdXRwdXQoYmFja2VuZElkZW50aWZpZXIpO1xuICAgIGNvbnN0IGFwaUlkID0gb3V0cHV0W2dyYXBocWxPdXRwdXRLZXldPy5wYXlsb2FkLmF3c0FwcHN5bmNBcGlJZDtcbiAgICBpZiAoIWFwaUlkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBkZXRlcm1pbmUgQXBwU3luYyBBUEkgSUQuYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBBcHBTeW5jSW50cm9zcGVjdGlvblNjaGVtYUZldGNoZXIobmV3IEFwcFN5bmNDbGllbnQoKSkuZmV0Y2goXG4gICAgICBhcGlJZFxuICAgICk7XG4gIH07XG4gIHJldHVybiBuZXcgQXBwU3luY0dyYXBocWxEb2N1bWVudEdlbmVyYXRvcihcbiAgICBmZXRjaFNjaGVtYSxcbiAgICAoZmlsZU1hcCkgPT4gbmV3IEFwcHN5bmNHcmFwaHFsR2VuZXJhdGlvblJlc3VsdChmaWxlTWFwKVxuICApO1xufTtcbiJdfQ==