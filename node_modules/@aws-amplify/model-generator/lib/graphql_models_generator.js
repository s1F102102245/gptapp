import { generateModels } from '@aws-amplify/graphql-generator';
import { defaultDirectiveDefinitions } from './default_directive_definitions.js';
/**
 * Generates GraphQL types for a given AppSync API
 */
export class StackMetadataGraphqlModelsGenerator {
    fetchSchema;
    resultBuilder;
    /**
     * Configures the AppSyncGraphqlTypesGenerator
     */
    constructor(fetchSchema, resultBuilder) {
        this.fetchSchema = fetchSchema;
        this.resultBuilder = resultBuilder;
    }
    generateModels = async ({ target, generateIndexRules, emitAuthProvider, useExperimentalPipelinedTransformer, transformerVersion, respectPrimaryKeyAttributesOnConnectionField, generateModelsForLazyLoadAndCustomSelectionSet, addTimestampFields, handleListNullabilityTransparently, }) => {
        const schema = await this.fetchSchema();
        if (!schema) {
            throw new Error('Invalid schema');
        }
        const generatedModels = await generateModels({
            schema,
            target,
            directives: defaultDirectiveDefinitions,
            generateIndexRules,
            emitAuthProvider,
            useExperimentalPipelinedTransformer,
            transformerVersion,
            respectPrimaryKeyAttributesOnConnectionField,
            generateModelsForLazyLoadAndCustomSelectionSet,
            addTimestampFields,
            handleListNullabilityTransparently,
        });
        return this.resultBuilder(generatedModels);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF9tb2RlbHNfZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dyYXBocWxfbW9kZWxzX2dlbmVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFNaEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFFakY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW1DO0lBT3BDO0lBQ0E7SUFMVjs7T0FFRztJQUNILFlBQ1UsV0FBa0MsRUFDbEMsYUFBb0U7UUFEcEUsZ0JBQVcsR0FBWCxXQUFXLENBQXVCO1FBQ2xDLGtCQUFhLEdBQWIsYUFBYSxDQUF1RDtJQUMzRSxDQUFDO0lBRUosY0FBYyxHQUFHLEtBQUssRUFBRSxFQUN0QixNQUFNLEVBQ04sa0JBQWtCLEVBQ2xCLGdCQUFnQixFQUNoQixtQ0FBbUMsRUFDbkMsa0JBQWtCLEVBQ2xCLDRDQUE0QyxFQUM1Qyw4Q0FBOEMsRUFDOUMsa0JBQWtCLEVBQ2xCLGtDQUFrQyxHQUNQLEVBQUUsRUFBRTtRQUMvQixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUV4QyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ25DO1FBRUQsTUFBTSxlQUFlLEdBQUcsTUFBTSxjQUFjLENBQUM7WUFDM0MsTUFBTTtZQUNOLE1BQU07WUFDTixVQUFVLEVBQUUsMkJBQTJCO1lBQ3ZDLGtCQUFrQjtZQUNsQixnQkFBZ0I7WUFDaEIsbUNBQW1DO1lBQ25DLGtCQUFrQjtZQUNsQiw0Q0FBNEM7WUFDNUMsOENBQThDO1lBQzlDLGtCQUFrQjtZQUNsQixrQ0FBa0M7U0FDbkMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzdDLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2VuZXJhdGVNb2RlbHMgfSBmcm9tICdAYXdzLWFtcGxpZnkvZ3JhcGhxbC1nZW5lcmF0b3InO1xuaW1wb3J0IHtcbiAgR2VuZXJhdGlvblJlc3VsdCxcbiAgR3JhcGhxbE1vZGVsc0dlbmVyYXRvcixcbiAgTW9kZWxzR2VuZXJhdGlvblBhcmFtZXRlcnMsXG59IGZyb20gJy4vbW9kZWxfZ2VuZXJhdG9yLmpzJztcbmltcG9ydCB7IGRlZmF1bHREaXJlY3RpdmVEZWZpbml0aW9ucyB9IGZyb20gJy4vZGVmYXVsdF9kaXJlY3RpdmVfZGVmaW5pdGlvbnMuanMnO1xuXG4vKipcbiAqIEdlbmVyYXRlcyBHcmFwaFFMIHR5cGVzIGZvciBhIGdpdmVuIEFwcFN5bmMgQVBJXG4gKi9cbmV4cG9ydCBjbGFzcyBTdGFja01ldGFkYXRhR3JhcGhxbE1vZGVsc0dlbmVyYXRvclxuICBpbXBsZW1lbnRzIEdyYXBocWxNb2RlbHNHZW5lcmF0b3JcbntcbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgdGhlIEFwcFN5bmNHcmFwaHFsVHlwZXNHZW5lcmF0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZmV0Y2hTY2hlbWE6ICgpID0+IFByb21pc2U8c3RyaW5nPixcbiAgICBwcml2YXRlIHJlc3VsdEJ1aWxkZXI6IChmaWxlTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSA9PiBHZW5lcmF0aW9uUmVzdWx0XG4gICkge31cblxuICBnZW5lcmF0ZU1vZGVscyA9IGFzeW5jICh7XG4gICAgdGFyZ2V0LFxuICAgIGdlbmVyYXRlSW5kZXhSdWxlcyxcbiAgICBlbWl0QXV0aFByb3ZpZGVyLFxuICAgIHVzZUV4cGVyaW1lbnRhbFBpcGVsaW5lZFRyYW5zZm9ybWVyLFxuICAgIHRyYW5zZm9ybWVyVmVyc2lvbixcbiAgICByZXNwZWN0UHJpbWFyeUtleUF0dHJpYnV0ZXNPbkNvbm5lY3Rpb25GaWVsZCxcbiAgICBnZW5lcmF0ZU1vZGVsc0ZvckxhenlMb2FkQW5kQ3VzdG9tU2VsZWN0aW9uU2V0LFxuICAgIGFkZFRpbWVzdGFtcEZpZWxkcyxcbiAgICBoYW5kbGVMaXN0TnVsbGFiaWxpdHlUcmFuc3BhcmVudGx5LFxuICB9OiBNb2RlbHNHZW5lcmF0aW9uUGFyYW1ldGVycykgPT4ge1xuICAgIGNvbnN0IHNjaGVtYSA9IGF3YWl0IHRoaXMuZmV0Y2hTY2hlbWEoKTtcblxuICAgIGlmICghc2NoZW1hKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2NoZW1hJyk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2VuZXJhdGVkTW9kZWxzID0gYXdhaXQgZ2VuZXJhdGVNb2RlbHMoe1xuICAgICAgc2NoZW1hLFxuICAgICAgdGFyZ2V0LFxuICAgICAgZGlyZWN0aXZlczogZGVmYXVsdERpcmVjdGl2ZURlZmluaXRpb25zLFxuICAgICAgZ2VuZXJhdGVJbmRleFJ1bGVzLFxuICAgICAgZW1pdEF1dGhQcm92aWRlcixcbiAgICAgIHVzZUV4cGVyaW1lbnRhbFBpcGVsaW5lZFRyYW5zZm9ybWVyLFxuICAgICAgdHJhbnNmb3JtZXJWZXJzaW9uLFxuICAgICAgcmVzcGVjdFByaW1hcnlLZXlBdHRyaWJ1dGVzT25Db25uZWN0aW9uRmllbGQsXG4gICAgICBnZW5lcmF0ZU1vZGVsc0ZvckxhenlMb2FkQW5kQ3VzdG9tU2VsZWN0aW9uU2V0LFxuICAgICAgYWRkVGltZXN0YW1wRmllbGRzLFxuICAgICAgaGFuZGxlTGlzdE51bGxhYmlsaXR5VHJhbnNwYXJlbnRseSxcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzLnJlc3VsdEJ1aWxkZXIoZ2VuZXJhdGVkTW9kZWxzKTtcbiAgfTtcbn1cbiJdfQ==