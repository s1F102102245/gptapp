import { S3Client } from '@aws-sdk/client-s3';
import { BackendOutputClientFactory, } from '@aws-amplify/deployed-backend-client';
import { graphqlOutputKey } from '@aws-amplify/backend-output-schemas';
import { AppsyncGraphqlGenerationResult } from './appsync_graphql_generation_result.js';
import { StackMetadataGraphqlModelsGenerator } from './graphql_models_generator.js';
import { S3StringObjectFetcher } from './s3_string_object_fetcher.js';
/**
 * Factory function to compose a model generator from a backend identifier.
 */
export const createGraphqlModelsGenerator = ({ backendIdentifier, credentialProvider, }) => {
    if (!backendIdentifier) {
        throw new Error('`backendIdentifier` must be defined');
    }
    if (!credentialProvider) {
        throw new Error('`credentialProvider` must be defined');
    }
    return new StackMetadataGraphqlModelsGenerator(() => getModelSchema(backendIdentifier, credentialProvider), (fileMap) => new AppsyncGraphqlGenerationResult(fileMap));
};
/**
 * Factory function to compose a model generator from an s3 uri.
 */
export const createGraphqlModelsFromS3UriGenerator = ({ modelSchemaS3Uri, credentialProvider, }) => {
    if (!modelSchemaS3Uri) {
        throw new Error('`modelSchemaS3Uri` must be defined');
    }
    if (!credentialProvider) {
        throw new Error('`credentialProvider` must be defined');
    }
    return new StackMetadataGraphqlModelsGenerator(() => getModelSchemaFromS3Uri(modelSchemaS3Uri, credentialProvider), (fileMap) => new AppsyncGraphqlGenerationResult(fileMap));
};
const getModelSchema = async (backendIdentifier, credentialProvider) => {
    const backendOutputClient = BackendOutputClientFactory.getInstance({
        credentials: credentialProvider,
    });
    const output = await backendOutputClient.getOutput(backendIdentifier);
    const modelSchemaS3Uri = output[graphqlOutputKey]?.payload.amplifyApiModelSchemaS3Uri;
    if (!modelSchemaS3Uri) {
        throw new Error(`Cannot find model schema at amplifyApiModelSchemaS3Uri`);
    }
    return await getModelSchemaFromS3Uri(modelSchemaS3Uri, credentialProvider);
};
const getModelSchemaFromS3Uri = async (modelSchemaS3Uri, credentialProvider) => {
    const s3Client = new S3Client({
        credentials: credentialProvider,
    });
    const schemaFetcher = new S3StringObjectFetcher(s3Client);
    return await schemaFetcher.fetch(modelSchemaS3Uri);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlX2dyYXBocWxfbW9kZWxzX2dlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jcmVhdGVfZ3JhcGhxbF9tb2RlbHNfZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQ0wsMEJBQTBCLEdBRTNCLE1BQU0sc0NBQXNDLENBQUM7QUFDOUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDdkUsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDeEYsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFcEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFPdEU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxDQUFDLEVBQzNDLGlCQUFpQixFQUNqQixrQkFBa0IsR0FDa0IsRUFBMEIsRUFBRTtJQUNoRSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7UUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0tBQ3hEO0lBQ0QsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUN6RDtJQUVELE9BQU8sSUFBSSxtQ0FBbUMsQ0FDNUMsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLGlCQUFpQixFQUFFLGtCQUFrQixDQUFDLEVBQzNELENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxJQUFJLDhCQUE4QixDQUFDLE9BQU8sQ0FBQyxDQUN6RCxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBT0Y7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxxQ0FBcUMsR0FBRyxDQUFDLEVBQ3BELGdCQUFnQixFQUNoQixrQkFBa0IsR0FDMkIsRUFBMEIsRUFBRTtJQUN6RSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7UUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO0tBQ3ZEO0lBQ0QsSUFBSSxDQUFDLGtCQUFrQixFQUFFO1FBQ3ZCLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztLQUN6RDtJQUVELE9BQU8sSUFBSSxtQ0FBbUMsQ0FDNUMsR0FBRyxFQUFFLENBQUMsdUJBQXVCLENBQUMsZ0JBQWdCLEVBQUUsa0JBQWtCLENBQUMsRUFDbkUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLElBQUksOEJBQThCLENBQUMsT0FBTyxDQUFDLENBQ3pELENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQzFCLGlCQUE0QyxFQUM1QyxrQkFBaUQsRUFDaEMsRUFBRTtJQUNuQixNQUFNLG1CQUFtQixHQUFHLDBCQUEwQixDQUFDLFdBQVcsQ0FBQztRQUNqRSxXQUFXLEVBQUUsa0JBQWtCO0tBQ2hDLENBQUMsQ0FBQztJQUNILE1BQU0sTUFBTSxHQUFHLE1BQU0sbUJBQW1CLENBQUMsU0FBUyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDdEUsTUFBTSxnQkFBZ0IsR0FDcEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsT0FBTyxDQUFDLDBCQUEwQixDQUFDO0lBQy9ELElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixNQUFNLElBQUksS0FBSyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7S0FDM0U7SUFFRCxPQUFPLE1BQU0sdUJBQXVCLENBQUMsZ0JBQWdCLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztBQUM3RSxDQUFDLENBQUM7QUFFRixNQUFNLHVCQUF1QixHQUFHLEtBQUssRUFDbkMsZ0JBQXdCLEVBQ3hCLGtCQUFpRCxFQUNoQyxFQUFFO0lBQ25CLE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDO1FBQzVCLFdBQVcsRUFBRSxrQkFBa0I7S0FDaEMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxhQUFhLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMxRCxPQUFPLE1BQU0sYUFBYSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3JELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyIH0gZnJvbSAnQGF3cy1zZGsvdHlwZXMnO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHtcbiAgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnksXG4gIERlcGxveWVkQmFja2VuZElkZW50aWZpZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9kZXBsb3llZC1iYWNrZW5kLWNsaWVudCc7XG5pbXBvcnQgeyBncmFwaHFsT3V0cHV0S2V5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtb3V0cHV0LXNjaGVtYXMnO1xuaW1wb3J0IHsgQXBwc3luY0dyYXBocWxHZW5lcmF0aW9uUmVzdWx0IH0gZnJvbSAnLi9hcHBzeW5jX2dyYXBocWxfZ2VuZXJhdGlvbl9yZXN1bHQuanMnO1xuaW1wb3J0IHsgU3RhY2tNZXRhZGF0YUdyYXBocWxNb2RlbHNHZW5lcmF0b3IgfSBmcm9tICcuL2dyYXBocWxfbW9kZWxzX2dlbmVyYXRvci5qcyc7XG5pbXBvcnQgeyBHcmFwaHFsTW9kZWxzR2VuZXJhdG9yIH0gZnJvbSAnLi9tb2RlbF9nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgUzNTdHJpbmdPYmplY3RGZXRjaGVyIH0gZnJvbSAnLi9zM19zdHJpbmdfb2JqZWN0X2ZldGNoZXIuanMnO1xuXG5leHBvcnQgdHlwZSBHcmFwaHFsTW9kZWxzR2VuZXJhdG9yRmFjdG9yeVBhcmFtcyA9IHtcbiAgYmFja2VuZElkZW50aWZpZXI6IERlcGxveWVkQmFja2VuZElkZW50aWZpZXI7XG4gIGNyZWRlbnRpYWxQcm92aWRlcjogQXdzQ3JlZGVudGlhbElkZW50aXR5UHJvdmlkZXI7XG59O1xuXG4vKipcbiAqIEZhY3RvcnkgZnVuY3Rpb24gdG8gY29tcG9zZSBhIG1vZGVsIGdlbmVyYXRvciBmcm9tIGEgYmFja2VuZCBpZGVudGlmaWVyLlxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlR3JhcGhxbE1vZGVsc0dlbmVyYXRvciA9ICh7XG4gIGJhY2tlbmRJZGVudGlmaWVyLFxuICBjcmVkZW50aWFsUHJvdmlkZXIsXG59OiBHcmFwaHFsTW9kZWxzR2VuZXJhdG9yRmFjdG9yeVBhcmFtcyk6IEdyYXBocWxNb2RlbHNHZW5lcmF0b3IgPT4ge1xuICBpZiAoIWJhY2tlbmRJZGVudGlmaWVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgYmFja2VuZElkZW50aWZpZXJgIG11c3QgYmUgZGVmaW5lZCcpO1xuICB9XG4gIGlmICghY3JlZGVudGlhbFByb3ZpZGVyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdgY3JlZGVudGlhbFByb3ZpZGVyYCBtdXN0IGJlIGRlZmluZWQnKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU3RhY2tNZXRhZGF0YUdyYXBocWxNb2RlbHNHZW5lcmF0b3IoXG4gICAgKCkgPT4gZ2V0TW9kZWxTY2hlbWEoYmFja2VuZElkZW50aWZpZXIsIGNyZWRlbnRpYWxQcm92aWRlciksXG4gICAgKGZpbGVNYXApID0+IG5ldyBBcHBzeW5jR3JhcGhxbEdlbmVyYXRpb25SZXN1bHQoZmlsZU1hcClcbiAgKTtcbn07XG5cbmV4cG9ydCB0eXBlIEdyYXBocWxNb2RlbHNGcm9tUzNVcmlHZW5lcmF0b3JGYWN0b3J5UGFyYW1zID0ge1xuICBtb2RlbFNjaGVtYVMzVXJpOiBzdHJpbmc7XG4gIGNyZWRlbnRpYWxQcm92aWRlcjogQXdzQ3JlZGVudGlhbElkZW50aXR5UHJvdmlkZXI7XG59O1xuXG4vKipcbiAqIEZhY3RvcnkgZnVuY3Rpb24gdG8gY29tcG9zZSBhIG1vZGVsIGdlbmVyYXRvciBmcm9tIGFuIHMzIHVyaS5cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUdyYXBocWxNb2RlbHNGcm9tUzNVcmlHZW5lcmF0b3IgPSAoe1xuICBtb2RlbFNjaGVtYVMzVXJpLFxuICBjcmVkZW50aWFsUHJvdmlkZXIsXG59OiBHcmFwaHFsTW9kZWxzRnJvbVMzVXJpR2VuZXJhdG9yRmFjdG9yeVBhcmFtcyk6IEdyYXBocWxNb2RlbHNHZW5lcmF0b3IgPT4ge1xuICBpZiAoIW1vZGVsU2NoZW1hUzNVcmkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Btb2RlbFNjaGVtYVMzVXJpYCBtdXN0IGJlIGRlZmluZWQnKTtcbiAgfVxuICBpZiAoIWNyZWRlbnRpYWxQcm92aWRlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignYGNyZWRlbnRpYWxQcm92aWRlcmAgbXVzdCBiZSBkZWZpbmVkJyk7XG4gIH1cblxuICByZXR1cm4gbmV3IFN0YWNrTWV0YWRhdGFHcmFwaHFsTW9kZWxzR2VuZXJhdG9yKFxuICAgICgpID0+IGdldE1vZGVsU2NoZW1hRnJvbVMzVXJpKG1vZGVsU2NoZW1hUzNVcmksIGNyZWRlbnRpYWxQcm92aWRlciksXG4gICAgKGZpbGVNYXApID0+IG5ldyBBcHBzeW5jR3JhcGhxbEdlbmVyYXRpb25SZXN1bHQoZmlsZU1hcClcbiAgKTtcbn07XG5cbmNvbnN0IGdldE1vZGVsU2NoZW1hID0gYXN5bmMgKFxuICBiYWNrZW5kSWRlbnRpZmllcjogRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllcixcbiAgY3JlZGVudGlhbFByb3ZpZGVyOiBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlclxuKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgY29uc3QgYmFja2VuZE91dHB1dENsaWVudCA9IEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5LmdldEluc3RhbmNlKHtcbiAgICBjcmVkZW50aWFsczogY3JlZGVudGlhbFByb3ZpZGVyLFxuICB9KTtcbiAgY29uc3Qgb3V0cHV0ID0gYXdhaXQgYmFja2VuZE91dHB1dENsaWVudC5nZXRPdXRwdXQoYmFja2VuZElkZW50aWZpZXIpO1xuICBjb25zdCBtb2RlbFNjaGVtYVMzVXJpID1cbiAgICBvdXRwdXRbZ3JhcGhxbE91dHB1dEtleV0/LnBheWxvYWQuYW1wbGlmeUFwaU1vZGVsU2NoZW1hUzNVcmk7XG4gIGlmICghbW9kZWxTY2hlbWFTM1VyaSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGZpbmQgbW9kZWwgc2NoZW1hIGF0IGFtcGxpZnlBcGlNb2RlbFNjaGVtYVMzVXJpYCk7XG4gIH1cblxuICByZXR1cm4gYXdhaXQgZ2V0TW9kZWxTY2hlbWFGcm9tUzNVcmkobW9kZWxTY2hlbWFTM1VyaSwgY3JlZGVudGlhbFByb3ZpZGVyKTtcbn07XG5cbmNvbnN0IGdldE1vZGVsU2NoZW1hRnJvbVMzVXJpID0gYXN5bmMgKFxuICBtb2RlbFNjaGVtYVMzVXJpOiBzdHJpbmcsXG4gIGNyZWRlbnRpYWxQcm92aWRlcjogQXdzQ3JlZGVudGlhbElkZW50aXR5UHJvdmlkZXJcbik6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gIGNvbnN0IHMzQ2xpZW50ID0gbmV3IFMzQ2xpZW50KHtcbiAgICBjcmVkZW50aWFsczogY3JlZGVudGlhbFByb3ZpZGVyLFxuICB9KTtcbiAgY29uc3Qgc2NoZW1hRmV0Y2hlciA9IG5ldyBTM1N0cmluZ09iamVjdEZldGNoZXIoczNDbGllbnQpO1xuICByZXR1cm4gYXdhaXQgc2NoZW1hRmV0Y2hlci5mZXRjaChtb2RlbFNjaGVtYVMzVXJpKTtcbn07XG4iXX0=