import { createGraphqlModelsFromS3UriGenerator } from './create_graphql_models_generator.js';
/**
 * Try and convert the modelSchemaS3Uri into an introspection schema object.
 */
export const getModelIntrospectionSchemaFromS3Uri = async ({ modelSchemaS3Uri, credentialProvider, }) => {
    if (!modelSchemaS3Uri) {
        return;
    }
    const modelGenerator = await createGraphqlModelsFromS3UriGenerator({
        modelSchemaS3Uri,
        credentialProvider,
    }).generateModels({ target: 'introspection' });
    const generatedModels = await modelGenerator.getResults();
    const generatedModelFiles = Object.values(generatedModels);
    if (generatedModelFiles.length !== 1) {
        throw new Error(`A single model introspection schema is expected, received ${generatedModelFiles.length} values.`);
    }
    try {
        return JSON.parse(generatedModelFiles[0]);
    }
    catch (_) {
        throw new Error('Caught exception while converting introspection schema to JSON representation');
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfbW9kZWxfaW50cm9zcGVjdGlvbl9mcm9tX3NjaGVtYV91cmkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2VuZXJhdGVfbW9kZWxfaW50cm9zcGVjdGlvbl9mcm9tX3NjaGVtYV91cmkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFPN0Y7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxvQ0FBb0MsR0FBRyxLQUFLLEVBQUUsRUFDekQsZ0JBQWdCLEVBQ2hCLGtCQUFrQixHQUNnQixFQUFnQyxFQUFFO0lBQ3BFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtRQUNyQixPQUFPO0tBQ1I7SUFFRCxNQUFNLGNBQWMsR0FBRyxNQUFNLHFDQUFxQyxDQUFDO1FBQ2pFLGdCQUFnQjtRQUNoQixrQkFBa0I7S0FDbkIsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxlQUFlLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLE1BQU0sZUFBZSxHQUFHLE1BQU0sY0FBYyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBRTFELE1BQU0sbUJBQW1CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUMzRCxJQUFJLG1CQUFtQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7UUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FDYiw2REFBNkQsbUJBQW1CLENBQUMsTUFBTSxVQUFVLENBQ2xHLENBQUM7S0FDSDtJQUVELElBQUk7UUFDRixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMzQztJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsTUFBTSxJQUFJLEtBQUssQ0FDYiwrRUFBK0UsQ0FDaEYsQ0FBQztLQUNIO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXdzQ3JlZGVudGlhbElkZW50aXR5UHJvdmlkZXIgfSBmcm9tICdAYXdzLXNkay90eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVHcmFwaHFsTW9kZWxzRnJvbVMzVXJpR2VuZXJhdG9yIH0gZnJvbSAnLi9jcmVhdGVfZ3JhcGhxbF9tb2RlbHNfZ2VuZXJhdG9yLmpzJztcblxuZXhwb3J0IHR5cGUgR2V0TW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hUGFyYW1zID0ge1xuICBtb2RlbFNjaGVtYVMzVXJpPzogc3RyaW5nO1xuICBjcmVkZW50aWFsUHJvdmlkZXI6IEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyO1xufTtcblxuLyoqXG4gKiBUcnkgYW5kIGNvbnZlcnQgdGhlIG1vZGVsU2NoZW1hUzNVcmkgaW50byBhbiBpbnRyb3NwZWN0aW9uIHNjaGVtYSBvYmplY3QuXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFGcm9tUzNVcmkgPSBhc3luYyAoe1xuICBtb2RlbFNjaGVtYVMzVXJpLFxuICBjcmVkZW50aWFsUHJvdmlkZXIsXG59OiBHZXRNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFQYXJhbXMpOiBQcm9taXNlPHVua25vd24gfCB1bmRlZmluZWQ+ID0+IHtcbiAgaWYgKCFtb2RlbFNjaGVtYVMzVXJpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbW9kZWxHZW5lcmF0b3IgPSBhd2FpdCBjcmVhdGVHcmFwaHFsTW9kZWxzRnJvbVMzVXJpR2VuZXJhdG9yKHtcbiAgICBtb2RlbFNjaGVtYVMzVXJpLFxuICAgIGNyZWRlbnRpYWxQcm92aWRlcixcbiAgfSkuZ2VuZXJhdGVNb2RlbHMoeyB0YXJnZXQ6ICdpbnRyb3NwZWN0aW9uJyB9KTtcbiAgY29uc3QgZ2VuZXJhdGVkTW9kZWxzID0gYXdhaXQgbW9kZWxHZW5lcmF0b3IuZ2V0UmVzdWx0cygpO1xuXG4gIGNvbnN0IGdlbmVyYXRlZE1vZGVsRmlsZXMgPSBPYmplY3QudmFsdWVzKGdlbmVyYXRlZE1vZGVscyk7XG4gIGlmIChnZW5lcmF0ZWRNb2RlbEZpbGVzLmxlbmd0aCAhPT0gMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBBIHNpbmdsZSBtb2RlbCBpbnRyb3NwZWN0aW9uIHNjaGVtYSBpcyBleHBlY3RlZCwgcmVjZWl2ZWQgJHtnZW5lcmF0ZWRNb2RlbEZpbGVzLmxlbmd0aH0gdmFsdWVzLmBcbiAgICApO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gSlNPTi5wYXJzZShnZW5lcmF0ZWRNb2RlbEZpbGVzWzBdKTtcbiAgfSBjYXRjaCAoXykge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdDYXVnaHQgZXhjZXB0aW9uIHdoaWxlIGNvbnZlcnRpbmcgaW50cm9zcGVjdGlvbiBzY2hlbWEgdG8gSlNPTiByZXByZXNlbnRhdGlvbidcbiAgICApO1xuICB9XG59O1xuIl19