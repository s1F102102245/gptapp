import fs from 'fs/promises';
import path from 'path';
/**
 * Defines a result for Graphql document generation
 */
export class AppsyncGraphqlGenerationResult {
    operations;
    /**
     * Instantiates an AppsyncGraphqlGenerationResult
     * @param operations A record of FileName to FileContent
     * in the format of Record<string,string>
     */
    constructor(operations) {
        this.operations = operations;
    }
    writeSchemaToFile = async (basePath, filePath, contents) => {
        const absFilePath = path.resolve(path.join(basePath, filePath));
        await fs.mkdir(path.dirname(absFilePath), { recursive: true });
        await fs.writeFile(absFilePath, contents);
    };
    writeToDirectory = async (directoryPath) => {
        await Promise.all(Object.entries(this.operations).map(async ([fileName, content]) => {
            await this.writeSchemaToFile(directoryPath, fileName, content);
        }));
    };
    getResults = async () => {
        return this.operations;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwc3luY19ncmFwaHFsX2dlbmVyYXRpb25fcmVzdWx0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwcHN5bmNfZ3JhcGhxbF9nZW5lcmF0aW9uX3Jlc3VsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBSXhCOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDhCQUE4QjtJQU1yQjtJQUxwQjs7OztPQUlHO0lBQ0gsWUFBb0IsVUFBNEI7UUFBNUIsZUFBVSxHQUFWLFVBQVUsQ0FBa0I7SUFBRyxDQUFDO0lBRTVDLGlCQUFpQixHQUFHLEtBQUssRUFDL0IsUUFBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsUUFBZ0IsRUFDaEIsRUFBRTtRQUNGLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNoRSxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDO0lBRUYsZ0JBQWdCLEdBQUcsS0FBSyxFQUFFLGFBQXFCLEVBQUUsRUFBRTtRQUNqRCxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQ2YsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxFQUFFO1lBQ2hFLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakUsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGLFVBQVUsR0FBRyxLQUFLLElBQXFDLEVBQUU7UUFDdkQsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzL3Byb21pc2VzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgR2VuZXJhdGlvblJlc3VsdCB9IGZyb20gJy4vbW9kZWxfZ2VuZXJhdG9yLmpzJztcblxudHlwZSBDbGllbnRPcGVyYXRpb25zID0gUmVjb3JkPHN0cmluZywgc3RyaW5nPjtcbi8qKlxuICogRGVmaW5lcyBhIHJlc3VsdCBmb3IgR3JhcGhxbCBkb2N1bWVudCBnZW5lcmF0aW9uXG4gKi9cbmV4cG9ydCBjbGFzcyBBcHBzeW5jR3JhcGhxbEdlbmVyYXRpb25SZXN1bHQgaW1wbGVtZW50cyBHZW5lcmF0aW9uUmVzdWx0IHtcbiAgLyoqXG4gICAqIEluc3RhbnRpYXRlcyBhbiBBcHBzeW5jR3JhcGhxbEdlbmVyYXRpb25SZXN1bHRcbiAgICogQHBhcmFtIG9wZXJhdGlvbnMgQSByZWNvcmQgb2YgRmlsZU5hbWUgdG8gRmlsZUNvbnRlbnRcbiAgICogaW4gdGhlIGZvcm1hdCBvZiBSZWNvcmQ8c3RyaW5nLHN0cmluZz5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3BlcmF0aW9uczogQ2xpZW50T3BlcmF0aW9ucykge31cblxuICBwcml2YXRlIHdyaXRlU2NoZW1hVG9GaWxlID0gYXN5bmMgKFxuICAgIGJhc2VQYXRoOiBzdHJpbmcsXG4gICAgZmlsZVBhdGg6IHN0cmluZyxcbiAgICBjb250ZW50czogc3RyaW5nXG4gICkgPT4ge1xuICAgIGNvbnN0IGFic0ZpbGVQYXRoID0gcGF0aC5yZXNvbHZlKHBhdGguam9pbihiYXNlUGF0aCwgZmlsZVBhdGgpKTtcbiAgICBhd2FpdCBmcy5ta2RpcihwYXRoLmRpcm5hbWUoYWJzRmlsZVBhdGgpLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9KTtcbiAgICBhd2FpdCBmcy53cml0ZUZpbGUoYWJzRmlsZVBhdGgsIGNvbnRlbnRzKTtcbiAgfTtcblxuICB3cml0ZVRvRGlyZWN0b3J5ID0gYXN5bmMgKGRpcmVjdG9yeVBhdGg6IHN0cmluZykgPT4ge1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgT2JqZWN0LmVudHJpZXModGhpcy5vcGVyYXRpb25zKS5tYXAoYXN5bmMgKFtmaWxlTmFtZSwgY29udGVudF0pID0+IHtcbiAgICAgICAgYXdhaXQgdGhpcy53cml0ZVNjaGVtYVRvRmlsZShkaXJlY3RvcnlQYXRoLCBmaWxlTmFtZSwgY29udGVudCk7XG4gICAgICB9KVxuICAgICk7XG4gIH07XG5cbiAgZ2V0UmVzdWx0cyA9IGFzeW5jICgpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIHN0cmluZz4+ID0+IHtcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25zO1xuICB9O1xufVxuIl19