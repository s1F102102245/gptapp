import { CfnTokenBackendSecret } from './engine/backend-secret/backend_secret.js';
import { BackendSecretFetcherProviderFactory } from './engine/backend-secret/backend_secret_fetcher_provider_factory.js';
import { BackendSecretFetcherFactory } from './engine/backend-secret/backend_secret_fetcher_factory.js';
/**
 * Use a secret from AWS Systems Manager (SSM) Parameter Store
 * @todo add docs link for using secrets https://github.com/aws-amplify/amplify-backend/issues/503
 * @todo add docs link for creating secrets in the console https://github.com/aws-amplify/amplify-backend/issues/503
 * @see {@link https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-parameter-store.html AWS documentation for SSM Parameter Store}
 * @example <caption>Creating a sandbox secret with the CLI</caption>
 * > amplify sandbox secret set MY_SECRET
 * @example <caption>Using a secret</caption>
 * secret('MY_SECRET')
 * @example <caption>Using with `defineAuth`</caption>
 *          ```
 *          defineAuth({
 *            loginWith: {
 *              email: {},
 *              externalProviders: {
 *                loginWithAmazon: {
 *                  clientId: secret('LOGIN_WITH_AMAZON_CLIENT_ID'),
 *                  clientSecret: secret('LOGIN_WITH_AMAZON_CLIENT_SECRET'),
 *                },
 *               },
 *             },
 *           })
 *          ```
 */
export const secret = (name) => {
    const secretProviderFactory = new BackendSecretFetcherProviderFactory();
    const secretResourceFactory = new BackendSecretFetcherFactory(secretProviderFactory);
    return new CfnTokenBackendSecret(name, secretResourceFactory);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VjcmV0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3NlY3JldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQztBQUNsRixPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSxvRUFBb0UsQ0FBQztBQUN6SCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwyREFBMkQsQ0FBQztBQUV4Rzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0F1Qkc7QUFDSCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFZLEVBQWlCLEVBQUU7SUFDcEQsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLG1DQUFtQyxFQUFFLENBQUM7SUFDeEUsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLDJCQUEyQixDQUMzRCxxQkFBcUIsQ0FDdEIsQ0FBQztJQUNGLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLEVBQUUscUJBQXFCLENBQUMsQ0FBQztBQUNoRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYWNrZW5kU2VjcmV0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBDZm5Ub2tlbkJhY2tlbmRTZWNyZXQgfSBmcm9tICcuL2VuZ2luZS9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldC5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kU2VjcmV0RmV0Y2hlclByb3ZpZGVyRmFjdG9yeSB9IGZyb20gJy4vZW5naW5lL2JhY2tlbmQtc2VjcmV0L2JhY2tlbmRfc2VjcmV0X2ZldGNoZXJfcHJvdmlkZXJfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kU2VjcmV0RmV0Y2hlckZhY3RvcnkgfSBmcm9tICcuL2VuZ2luZS9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX2ZhY3RvcnkuanMnO1xuXG4vKipcbiAqIFVzZSBhIHNlY3JldCBmcm9tIEFXUyBTeXN0ZW1zIE1hbmFnZXIgKFNTTSkgUGFyYW1ldGVyIFN0b3JlXG4gKiBAdG9kbyBhZGQgZG9jcyBsaW5rIGZvciB1c2luZyBzZWNyZXRzIGh0dHBzOi8vZ2l0aHViLmNvbS9hd3MtYW1wbGlmeS9hbXBsaWZ5LWJhY2tlbmQvaXNzdWVzLzUwM1xuICogQHRvZG8gYWRkIGRvY3MgbGluayBmb3IgY3JlYXRpbmcgc2VjcmV0cyBpbiB0aGUgY29uc29sZSBodHRwczovL2dpdGh1Yi5jb20vYXdzLWFtcGxpZnkvYW1wbGlmeS1iYWNrZW5kL2lzc3Vlcy81MDNcbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vZG9jcy5hd3MuYW1hem9uLmNvbS9zeXN0ZW1zLW1hbmFnZXIvbGF0ZXN0L3VzZXJndWlkZS9zeXN0ZW1zLW1hbmFnZXItcGFyYW1ldGVyLXN0b3JlLmh0bWwgQVdTIGRvY3VtZW50YXRpb24gZm9yIFNTTSBQYXJhbWV0ZXIgU3RvcmV9XG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5DcmVhdGluZyBhIHNhbmRib3ggc2VjcmV0IHdpdGggdGhlIENMSTwvY2FwdGlvbj5cbiAqID4gYW1wbGlmeSBzYW5kYm94IHNlY3JldCBzZXQgTVlfU0VDUkVUXG4gKiBAZXhhbXBsZSA8Y2FwdGlvbj5Vc2luZyBhIHNlY3JldDwvY2FwdGlvbj5cbiAqIHNlY3JldCgnTVlfU0VDUkVUJylcbiAqIEBleGFtcGxlIDxjYXB0aW9uPlVzaW5nIHdpdGggYGRlZmluZUF1dGhgPC9jYXB0aW9uPlxuICogICAgICAgICAgYGBgXG4gKiAgICAgICAgICBkZWZpbmVBdXRoKHtcbiAqICAgICAgICAgICAgbG9naW5XaXRoOiB7XG4gKiAgICAgICAgICAgICAgZW1haWw6IHt9LFxuICogICAgICAgICAgICAgIGV4dGVybmFsUHJvdmlkZXJzOiB7XG4gKiAgICAgICAgICAgICAgICBsb2dpbldpdGhBbWF6b246IHtcbiAqICAgICAgICAgICAgICAgICAgY2xpZW50SWQ6IHNlY3JldCgnTE9HSU5fV0lUSF9BTUFaT05fQ0xJRU5UX0lEJyksXG4gKiAgICAgICAgICAgICAgICAgIGNsaWVudFNlY3JldDogc2VjcmV0KCdMT0dJTl9XSVRIX0FNQVpPTl9DTElFTlRfU0VDUkVUJyksXG4gKiAgICAgICAgICAgICAgICB9LFxuICogICAgICAgICAgICAgICB9LFxuICogICAgICAgICAgICAgfSxcbiAqICAgICAgICAgICB9KVxuICogICAgICAgICAgYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBzZWNyZXQgPSAobmFtZTogc3RyaW5nKTogQmFja2VuZFNlY3JldCA9PiB7XG4gIGNvbnN0IHNlY3JldFByb3ZpZGVyRmFjdG9yeSA9IG5ldyBCYWNrZW5kU2VjcmV0RmV0Y2hlclByb3ZpZGVyRmFjdG9yeSgpO1xuICBjb25zdCBzZWNyZXRSZXNvdXJjZUZhY3RvcnkgPSBuZXcgQmFja2VuZFNlY3JldEZldGNoZXJGYWN0b3J5KFxuICAgIHNlY3JldFByb3ZpZGVyRmFjdG9yeVxuICApO1xuICByZXR1cm4gbmV3IENmblRva2VuQmFja2VuZFNlY3JldChuYW1lLCBzZWNyZXRSZXNvdXJjZUZhY3RvcnkpO1xufTtcbiJdfQ==