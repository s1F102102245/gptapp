import { NestedStack } from 'aws-cdk-lib';
import { fileURLToPath } from 'url';
/**
 * Vends and caches nested stacks under a provided root stack
 */
export class NestedStackResolver {
    rootStack;
    attributionMetadataStorage;
    stacks = {};
    /**
     * Initialize with a root stack
     */
    constructor(rootStack, attributionMetadataStorage) {
        this.rootStack = rootStack;
        this.attributionMetadataStorage = attributionMetadataStorage;
    }
    /**
     * Proxy to getStackFor that appends attribution metadata for custom stacks
     */
    createCustomStack = (name) => {
        if (this.stacks[name]) {
            throw new Error(`Custom stack named ${name} has already been created`);
        }
        const stack = this.getStackFor(name);
        // this is safe even if stack is cached from an earlier invocation because storeAttributionMetadata is a noop if the stack description already exists
        this.attributionMetadataStorage.storeAttributionMetadata(stack, `custom`, fileURLToPath(new URL('../../package.json', import.meta.url)));
        return stack;
    };
    /**
     * Returns a cached NestedStack if resourceGroupName has been seen before
     * Otherwise, creates a new NestedStack, caches it and returns it
     */
    getStackFor = (resourceGroupName) => {
        if (!this.stacks[resourceGroupName]) {
            this.stacks[resourceGroupName] = new NestedStack(this.rootStack, resourceGroupName);
        }
        return this.stacks[resourceGroupName];
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmVzdGVkX3N0YWNrX3Jlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2VuZ2luZS9uZXN0ZWRfc3RhY2tfcmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBUyxNQUFNLGFBQWEsQ0FBQztBQUVqRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBVXBDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG1CQUFtQjtJQU9YO0lBQ0E7SUFQRixNQUFNLEdBQTBCLEVBQUUsQ0FBQztJQUVwRDs7T0FFRztJQUNILFlBQ21CLFNBQWdCLEVBQ2hCLDBCQUFzRDtRQUR0RCxjQUFTLEdBQVQsU0FBUyxDQUFPO1FBQ2hCLCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBNEI7SUFDdEUsQ0FBQztJQUVKOztPQUVHO0lBQ0gsaUJBQWlCLEdBQUcsQ0FBQyxJQUFZLEVBQVMsRUFBRTtRQUMxQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsSUFBSSwyQkFBMkIsQ0FBQyxDQUFDO1NBQ3hFO1FBQ0QsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNyQyxxSkFBcUo7UUFDckosSUFBSSxDQUFDLDBCQUEwQixDQUFDLHdCQUF3QixDQUN0RCxLQUFLLEVBQ0wsUUFBUSxFQUNSLGFBQWEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQzlELENBQUM7UUFDRixPQUFPLEtBQUssQ0FBQztJQUNmLENBQUMsQ0FBQztJQUVGOzs7T0FHRztJQUNILFdBQVcsR0FBRyxDQUFDLGlCQUF5QixFQUFTLEVBQUU7UUFDakQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUNuQyxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxXQUFXLENBQzlDLElBQUksQ0FBQyxTQUFTLEVBQ2QsaUJBQWlCLENBQ2xCLENBQUM7U0FDSDtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3hDLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmVzdGVkU3RhY2ssIFN0YWNrIH0gZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IHsgQXR0cmlidXRpb25NZXRhZGF0YVN0b3JhZ2UgfSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc3RvcmFnZSc7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcblxuLyoqXG4gKiBWZW5kcyBzdGFja3MgZm9yIGEgcmVzb3VyY2UgZ3JvdXBpbmdcbiAqL1xuZXhwb3J0IHR5cGUgU3RhY2tSZXNvbHZlciA9IHtcbiAgZ2V0U3RhY2tGb3I6IChyZXNvdXJjZUdyb3VwTmFtZTogc3RyaW5nKSA9PiBTdGFjaztcbiAgY3JlYXRlQ3VzdG9tU3RhY2s6IChuYW1lOiBzdHJpbmcpID0+IFN0YWNrO1xufTtcblxuLyoqXG4gKiBWZW5kcyBhbmQgY2FjaGVzIG5lc3RlZCBzdGFja3MgdW5kZXIgYSBwcm92aWRlZCByb290IHN0YWNrXG4gKi9cbmV4cG9ydCBjbGFzcyBOZXN0ZWRTdGFja1Jlc29sdmVyIGltcGxlbWVudHMgU3RhY2tSZXNvbHZlciB7XG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhY2tzOiBSZWNvcmQ8c3RyaW5nLCBTdGFjaz4gPSB7fTtcblxuICAvKipcbiAgICogSW5pdGlhbGl6ZSB3aXRoIGEgcm9vdCBzdGFja1xuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSByb290U3RhY2s6IFN0YWNrLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXR0cmlidXRpb25NZXRhZGF0YVN0b3JhZ2U6IEF0dHJpYnV0aW9uTWV0YWRhdGFTdG9yYWdlXG4gICkge31cblxuICAvKipcbiAgICogUHJveHkgdG8gZ2V0U3RhY2tGb3IgdGhhdCBhcHBlbmRzIGF0dHJpYnV0aW9uIG1ldGFkYXRhIGZvciBjdXN0b20gc3RhY2tzXG4gICAqL1xuICBjcmVhdGVDdXN0b21TdGFjayA9IChuYW1lOiBzdHJpbmcpOiBTdGFjayA9PiB7XG4gICAgaWYgKHRoaXMuc3RhY2tzW25hbWVdKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEN1c3RvbSBzdGFjayBuYW1lZCAke25hbWV9IGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZGApO1xuICAgIH1cbiAgICBjb25zdCBzdGFjayA9IHRoaXMuZ2V0U3RhY2tGb3IobmFtZSk7XG4gICAgLy8gdGhpcyBpcyBzYWZlIGV2ZW4gaWYgc3RhY2sgaXMgY2FjaGVkIGZyb20gYW4gZWFybGllciBpbnZvY2F0aW9uIGJlY2F1c2Ugc3RvcmVBdHRyaWJ1dGlvbk1ldGFkYXRhIGlzIGEgbm9vcCBpZiB0aGUgc3RhY2sgZGVzY3JpcHRpb24gYWxyZWFkeSBleGlzdHNcbiAgICB0aGlzLmF0dHJpYnV0aW9uTWV0YWRhdGFTdG9yYWdlLnN0b3JlQXR0cmlidXRpb25NZXRhZGF0YShcbiAgICAgIHN0YWNrLFxuICAgICAgYGN1c3RvbWAsXG4gICAgICBmaWxlVVJMVG9QYXRoKG5ldyBVUkwoJy4uLy4uL3BhY2thZ2UuanNvbicsIGltcG9ydC5tZXRhLnVybCkpXG4gICAgKTtcbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBjYWNoZWQgTmVzdGVkU3RhY2sgaWYgcmVzb3VyY2VHcm91cE5hbWUgaGFzIGJlZW4gc2VlbiBiZWZvcmVcbiAgICogT3RoZXJ3aXNlLCBjcmVhdGVzIGEgbmV3IE5lc3RlZFN0YWNrLCBjYWNoZXMgaXQgYW5kIHJldHVybnMgaXRcbiAgICovXG4gIGdldFN0YWNrRm9yID0gKHJlc291cmNlR3JvdXBOYW1lOiBzdHJpbmcpOiBTdGFjayA9PiB7XG4gICAgaWYgKCF0aGlzLnN0YWNrc1tyZXNvdXJjZUdyb3VwTmFtZV0pIHtcbiAgICAgIHRoaXMuc3RhY2tzW3Jlc291cmNlR3JvdXBOYW1lXSA9IG5ldyBOZXN0ZWRTdGFjayhcbiAgICAgICAgdGhpcy5yb290U3RhY2ssXG4gICAgICAgIHJlc291cmNlR3JvdXBOYW1lXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zdGFja3NbcmVzb3VyY2VHcm91cE5hbWVdO1xuICB9O1xufVxuIl19