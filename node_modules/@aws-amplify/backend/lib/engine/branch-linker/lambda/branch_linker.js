import { randomUUID } from 'node:crypto';
import { AmplifyClient, GetBranchCommand, NotFoundException, UpdateBranchCommand, } from '@aws-sdk/client-amplify';
/**
 * Handles custom resource events.
 */
export class AmplifyBranchLinkerCustomResourceEventHandler {
    amplifyClient;
    /**
     * Creates the custom resource events handler.
     */
    constructor(amplifyClient) {
        this.amplifyClient = amplifyClient;
    }
    handleCustomResourceEvent = async (event) => {
        console.info(`Received '${event.RequestType}' event`);
        const physicalId = event.RequestType === 'Create' ? randomUUID() : event.PhysicalResourceId;
        const props = event.ResourceProperties;
        switch (event.RequestType) {
            case 'Create':
            case 'Update':
                console.info(`Setting stack reference for appId=${props.appId},branchName=${props.branchName} to ${event.StackId}`);
                await this.updateOrUnsetStackReference(props.appId, props.branchName, event.StackId);
                break;
            case 'Delete':
                console.info(`Un-setting stack reference for appId=${props.appId},branchName=${props.branchName}`);
                try {
                    await this.updateOrUnsetStackReference(props.appId, props.branchName, undefined);
                }
                catch (e) {
                    if (e instanceof NotFoundException) {
                        console.info(`Branch branchName=${props.branchName} of appId=${props.appId} was not found while handling delete event`);
                    }
                    else {
                        throw e;
                    }
                }
                break;
        }
        return {
            RequestId: event.RequestId,
            LogicalResourceId: event.LogicalResourceId,
            PhysicalResourceId: physicalId,
            StackId: event.StackId,
            Status: 'SUCCESS',
        };
    };
    updateOrUnsetStackReference = async (appId, branchName, stackId) => {
        // Stack id is in ARN format.
        if (stackId && !stackId?.startsWith('arn:')) {
            throw new Error(`Provided stackId ${stackId} is not in ARN format`);
        }
        const branch = await this.getBranch(appId, branchName);
        console.info(`Received branch details ${JSON.stringify(branch)}`);
        // Populate update command input with existing values, so we don't lose them.
        const updateBranchCommandInput = {
            appId,
            ...branch,
        };
        // This is a known bug in the service. I.e. branch can be created without stage
        // but service returns 'NONE' instead of undefined which is not part of
        // Stage enum...
        if (updateBranchCommandInput.stage === 'NONE') {
            updateBranchCommandInput.stage = undefined;
        }
        // Set or unset stackId
        if (stackId) {
            if (!updateBranchCommandInput.backend) {
                updateBranchCommandInput.backend = {};
            }
            updateBranchCommandInput.backend.stackArn = stackId;
        }
        else {
            if (updateBranchCommandInput.backend?.stackArn) {
                delete updateBranchCommandInput.backend.stackArn;
            }
        }
        console.info(`Sending branch update ${JSON.stringify(updateBranchCommandInput)}`);
        await this.amplifyClient.send(new UpdateBranchCommand(updateBranchCommandInput));
    };
    getBranch = async (appId, branchName) => {
        const branch = (await this.amplifyClient.send(new GetBranchCommand({ appId, branchName }))).branch;
        if (!branch) {
            throw new Error(`Unable to get branch ${branchName} for app ${appId}`);
        }
        return branch;
    };
}
const customResourceEventHandler = new AmplifyBranchLinkerCustomResourceEventHandler(new AmplifyClient());
/**
 * Entry point for the lambda-backend custom resource to link deployment to branch.
 */
export const handler = (event) => {
    return customResourceEventHandler.handleCustomResourceEvent(event);
};
//# sourceMappingURL=data:application/json;base64,