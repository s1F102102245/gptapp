import { getSecretClient, } from '@aws-amplify/backend-secret';
import { randomUUID } from 'node:crypto';
const secretClient = getSecretClient();
/**
 * Entry point for the lambda-backend custom resource to retrieve a backend secret.
 */
export const handler = async (event) => {
    console.info(`Received '${event.RequestType}' event`);
    const physicalId = event.RequestType === 'Create' ? randomUUID() : event.PhysicalResourceId;
    let data = undefined;
    if (event.RequestType === 'Update' || event.RequestType === 'Create') {
        const val = await handleCreateUpdateEvent(secretClient, event);
        data = {
            secretValue: val,
        };
    }
    return {
        RequestId: event.RequestId,
        LogicalResourceId: event.LogicalResourceId,
        PhysicalResourceId: physicalId,
        Data: data,
        StackId: event.StackId,
        NoEcho: true,
        Status: 'SUCCESS',
    };
};
/**
 * Handles create/update event for the secret custom resource.
 */
export const handleCreateUpdateEvent = async (secretClient, event) => {
    const props = event.ResourceProperties;
    let secret;
    try {
        const resp = await secretClient.getSecret({
            namespace: props.namespace,
            name: props.name,
            type: 'branch',
        }, {
            name: props.secretName,
        });
        secret = resp?.value;
    }
    catch (err) {
        const secretErr = err;
        if (secretErr.httpStatusCode && secretErr.httpStatusCode >= 500) {
            throw new Error(`Failed to retrieve backend secret '${props.secretName}' for '${props.namespace}/${props.name}'. Reason: ${JSON.stringify(err)}`);
        }
    }
    // if the secret is not available in branch path, retrieve it at app-level.
    if (!secret) {
        try {
            const resp = await secretClient.getSecret(props.namespace, {
                name: props.secretName,
            });
            secret = resp?.value;
        }
        catch (err) {
            throw new Error(`Failed to retrieve backend secret '${props.secretName}' for '${props.namespace}'. Reason: ${JSON.stringify(err)}`);
        }
    }
    if (!secret) {
        throw new Error(`Unable to find backend secret for backend '${props.namespace}', branch '${props.name}', name '${props.secretName}'`);
    }
    return secret;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9lbmdpbmUvYmFja2VuZC1zZWNyZXQvbGFtYmRhL2JhY2tlbmRfc2VjcmV0X2ZldGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUdMLGVBQWUsR0FDaEIsTUFBTSw2QkFBNkIsQ0FBQztBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3pDLE1BQU0sWUFBWSxHQUFHLGVBQWUsRUFBRSxDQUFDO0FBRXZDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLEtBQUssRUFDMUIsS0FBd0MsRUFDYyxFQUFFO0lBQ3hELE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLENBQUMsV0FBVyxTQUFTLENBQUMsQ0FBQztJQUV0RCxNQUFNLFVBQVUsR0FDZCxLQUFLLENBQUMsV0FBVyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQztJQUMzRSxJQUFJLElBQUksR0FBd0MsU0FBUyxDQUFDO0lBQzFELElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxRQUFRLElBQUksS0FBSyxDQUFDLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDcEUsTUFBTSxHQUFHLEdBQUcsTUFBTSx1QkFBdUIsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDL0QsSUFBSSxHQUFHO1lBQ0wsV0FBVyxFQUFFLEdBQUc7U0FDakIsQ0FBQztLQUNIO0lBRUQsT0FBTztRQUNMLFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUztRQUMxQixpQkFBaUIsRUFBRSxLQUFLLENBQUMsaUJBQWlCO1FBQzFDLGtCQUFrQixFQUFFLFVBQVU7UUFDOUIsSUFBSSxFQUFFLElBQUk7UUFDVixPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDdEIsTUFBTSxFQUFFLElBQUk7UUFDWixNQUFNLEVBQUUsU0FBUztLQUM2QixDQUFDO0FBQ25ELENBQUMsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsS0FBSyxFQUMxQyxZQUEwQixFQUMxQixLQUF3QyxFQUN2QixFQUFFO0lBQ25CLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxrQkFBb0QsQ0FBQztJQUN6RSxJQUFJLE1BQTBCLENBQUM7SUFFL0IsSUFBSTtRQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sWUFBWSxDQUFDLFNBQVMsQ0FDdkM7WUFDRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVM7WUFDMUIsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO1lBQ2hCLElBQUksRUFBRSxRQUFRO1NBQ2YsRUFDRDtZQUNFLElBQUksRUFBRSxLQUFLLENBQUMsVUFBVTtTQUN2QixDQUNGLENBQUM7UUFDRixNQUFNLEdBQUcsSUFBSSxFQUFFLEtBQUssQ0FBQztLQUN0QjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osTUFBTSxTQUFTLEdBQUcsR0FBa0IsQ0FBQztRQUNyQyxJQUFJLFNBQVMsQ0FBQyxjQUFjLElBQUksU0FBUyxDQUFDLGNBQWMsSUFBSSxHQUFHLEVBQUU7WUFDL0QsTUFBTSxJQUFJLEtBQUssQ0FDYixzQ0FBc0MsS0FBSyxDQUFDLFVBQVUsVUFDcEQsS0FBSyxDQUFDLFNBQ1IsSUFBSSxLQUFLLENBQUMsSUFBSSxjQUFjLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDbEQsQ0FBQztTQUNIO0tBQ0Y7SUFFRCwyRUFBMkU7SUFDM0UsSUFBSSxDQUFDLE1BQU0sRUFBRTtRQUNYLElBQUk7WUFDRixNQUFNLElBQUksR0FBRyxNQUFNLFlBQVksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFBRTtnQkFDekQsSUFBSSxFQUFFLEtBQUssQ0FBQyxVQUFVO2FBQ3ZCLENBQUMsQ0FBQztZQUNILE1BQU0sR0FBRyxJQUFJLEVBQUUsS0FBSyxDQUFDO1NBQ3RCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLElBQUksS0FBSyxDQUNiLHNDQUFzQyxLQUFLLENBQUMsVUFBVSxVQUNwRCxLQUFLLENBQUMsU0FDUixjQUFjLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDcEMsQ0FBQztTQUNIO0tBQ0Y7SUFFRCxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1gsTUFBTSxJQUFJLEtBQUssQ0FDYiw4Q0FBOEMsS0FBSyxDQUFDLFNBQVMsY0FBYyxLQUFLLENBQUMsSUFBSSxZQUFZLEtBQUssQ0FBQyxVQUFVLEdBQUcsQ0FDckgsQ0FBQztLQUNIO0lBRUQsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50LFxuICBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlU3VjY2Vzc1Jlc3BvbnNlLFxufSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCB7XG4gIFNlY3JldENsaWVudCxcbiAgU2VjcmV0RXJyb3IsXG4gIGdldFNlY3JldENsaWVudCxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IHJhbmRvbVVVSUQgfSBmcm9tICdub2RlOmNyeXB0byc7XG5pbXBvcnQgeyBTZWNyZXRSZXNvdXJjZVByb3BzIH0gZnJvbSAnLi9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX3R5cGVzLmpzJztcblxuY29uc3Qgc2VjcmV0Q2xpZW50ID0gZ2V0U2VjcmV0Q2xpZW50KCk7XG5cbi8qKlxuICogRW50cnkgcG9pbnQgZm9yIHRoZSBsYW1iZGEtYmFja2VuZCBjdXN0b20gcmVzb3VyY2UgdG8gcmV0cmlldmUgYSBiYWNrZW5kIHNlY3JldC5cbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZXIgPSBhc3luYyAoXG4gIGV2ZW50OiBDbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnRcbik6IFByb21pc2U8Q2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZVN1Y2Nlc3NSZXNwb25zZT4gPT4ge1xuICBjb25zb2xlLmluZm8oYFJlY2VpdmVkICcke2V2ZW50LlJlcXVlc3RUeXBlfScgZXZlbnRgKTtcblxuICBjb25zdCBwaHlzaWNhbElkID1cbiAgICBldmVudC5SZXF1ZXN0VHlwZSA9PT0gJ0NyZWF0ZScgPyByYW5kb21VVUlEKCkgOiBldmVudC5QaHlzaWNhbFJlc291cmNlSWQ7XG4gIGxldCBkYXRhOiB7IHNlY3JldFZhbHVlOiBzdHJpbmcgfSB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgaWYgKGV2ZW50LlJlcXVlc3RUeXBlID09PSAnVXBkYXRlJyB8fCBldmVudC5SZXF1ZXN0VHlwZSA9PT0gJ0NyZWF0ZScpIHtcbiAgICBjb25zdCB2YWwgPSBhd2FpdCBoYW5kbGVDcmVhdGVVcGRhdGVFdmVudChzZWNyZXRDbGllbnQsIGV2ZW50KTtcbiAgICBkYXRhID0ge1xuICAgICAgc2VjcmV0VmFsdWU6IHZhbCxcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBSZXF1ZXN0SWQ6IGV2ZW50LlJlcXVlc3RJZCxcbiAgICBMb2dpY2FsUmVzb3VyY2VJZDogZXZlbnQuTG9naWNhbFJlc291cmNlSWQsXG4gICAgUGh5c2ljYWxSZXNvdXJjZUlkOiBwaHlzaWNhbElkLFxuICAgIERhdGE6IGRhdGEsXG4gICAgU3RhY2tJZDogZXZlbnQuU3RhY2tJZCxcbiAgICBOb0VjaG86IHRydWUsXG4gICAgU3RhdHVzOiAnU1VDQ0VTUycsXG4gIH0gYXMgQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZVN1Y2Nlc3NSZXNwb25zZTtcbn07XG5cbi8qKlxuICogSGFuZGxlcyBjcmVhdGUvdXBkYXRlIGV2ZW50IGZvciB0aGUgc2VjcmV0IGN1c3RvbSByZXNvdXJjZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZUNyZWF0ZVVwZGF0ZUV2ZW50ID0gYXN5bmMgKFxuICBzZWNyZXRDbGllbnQ6IFNlY3JldENsaWVudCxcbiAgZXZlbnQ6IENsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudFxuKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgY29uc3QgcHJvcHMgPSBldmVudC5SZXNvdXJjZVByb3BlcnRpZXMgYXMgdW5rbm93biBhcyBTZWNyZXRSZXNvdXJjZVByb3BzO1xuICBsZXQgc2VjcmV0OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwID0gYXdhaXQgc2VjcmV0Q2xpZW50LmdldFNlY3JldChcbiAgICAgIHtcbiAgICAgICAgbmFtZXNwYWNlOiBwcm9wcy5uYW1lc3BhY2UsXG4gICAgICAgIG5hbWU6IHByb3BzLm5hbWUsXG4gICAgICAgIHR5cGU6ICdicmFuY2gnLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgbmFtZTogcHJvcHMuc2VjcmV0TmFtZSxcbiAgICAgIH1cbiAgICApO1xuICAgIHNlY3JldCA9IHJlc3A/LnZhbHVlO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBjb25zdCBzZWNyZXRFcnIgPSBlcnIgYXMgU2VjcmV0RXJyb3I7XG4gICAgaWYgKHNlY3JldEVyci5odHRwU3RhdHVzQ29kZSAmJiBzZWNyZXRFcnIuaHR0cFN0YXR1c0NvZGUgPj0gNTAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gcmV0cmlldmUgYmFja2VuZCBzZWNyZXQgJyR7cHJvcHMuc2VjcmV0TmFtZX0nIGZvciAnJHtcbiAgICAgICAgICBwcm9wcy5uYW1lc3BhY2VcbiAgICAgICAgfS8ke3Byb3BzLm5hbWV9Jy4gUmVhc29uOiAke0pTT04uc3RyaW5naWZ5KGVycil9YFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgc2VjcmV0IGlzIG5vdCBhdmFpbGFibGUgaW4gYnJhbmNoIHBhdGgsIHJldHJpZXZlIGl0IGF0IGFwcC1sZXZlbC5cbiAgaWYgKCFzZWNyZXQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcCA9IGF3YWl0IHNlY3JldENsaWVudC5nZXRTZWNyZXQocHJvcHMubmFtZXNwYWNlLCB7XG4gICAgICAgIG5hbWU6IHByb3BzLnNlY3JldE5hbWUsXG4gICAgICB9KTtcbiAgICAgIHNlY3JldCA9IHJlc3A/LnZhbHVlO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIHJldHJpZXZlIGJhY2tlbmQgc2VjcmV0ICcke3Byb3BzLnNlY3JldE5hbWV9JyBmb3IgJyR7XG4gICAgICAgICAgcHJvcHMubmFtZXNwYWNlXG4gICAgICAgIH0nLiBSZWFzb246ICR7SlNPTi5zdHJpbmdpZnkoZXJyKX1gXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmICghc2VjcmV0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFVuYWJsZSB0byBmaW5kIGJhY2tlbmQgc2VjcmV0IGZvciBiYWNrZW5kICcke3Byb3BzLm5hbWVzcGFjZX0nLCBicmFuY2ggJyR7cHJvcHMubmFtZX0nLCBuYW1lICcke3Byb3BzLnNlY3JldE5hbWV9J2BcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHNlY3JldDtcbn07XG4iXX0=