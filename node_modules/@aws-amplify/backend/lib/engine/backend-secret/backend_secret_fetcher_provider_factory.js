import { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';
import { Duration } from 'aws-cdk-lib';
import * as iam from 'aws-cdk-lib/aws-iam';
import * as path from 'path';
import { Runtime as LambdaRuntime } from 'aws-cdk-lib/aws-lambda';
import { Provider } from 'aws-cdk-lib/custom-resources';
import { fileURLToPath } from 'url';
const filename = fileURLToPath(import.meta.url);
const dirname = path.dirname(filename);
const resourcesRoot = path.normalize(path.join(dirname, 'lambda'));
const backendSecretLambdaFilePath = path.join(resourcesRoot, 'backend_secret_fetcher.js');
/**
 * The factory to create secret-fetcher provider.
 */
export class BackendSecretFetcherProviderFactory {
    /**
     * Returns a resource provider if it exists in the input scope. Otherwise,
     * creates a new provider.
     */
    getOrCreateInstance = (scope, providerId, backendIdentifier) => {
        const provider = scope.node.tryFindChild(providerId);
        if (provider) {
            return provider;
        }
        const secretLambda = new NodejsFunction(scope, `${providerId}Lambda`, {
            runtime: LambdaRuntime.NODEJS_18_X,
            timeout: Duration.seconds(10),
            entry: backendSecretLambdaFilePath,
            handler: 'handler',
        });
        secretLambda.grantPrincipal.addToPrincipalPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ['ssm:GetParameter'],
            resources: [
                `arn:aws:ssm:*:*:parameter/amplify/${backendIdentifier.namespace}/${backendIdentifier.name}/*`,
                `arn:aws:ssm:*:*:parameter/amplify/shared/${backendIdentifier.namespace}/*`,
            ],
        }));
        return new Provider(scope, providerId, {
            onEventHandler: secretLambda,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2VuZF9zZWNyZXRfZmV0Y2hlcl9wcm92aWRlcl9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2VuZ2luZS9iYWNrZW5kLXNlY3JldC9iYWNrZW5kX3NlY3JldF9mZXRjaGVyX3Byb3ZpZGVyX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDdkMsT0FBTyxLQUFLLEdBQUcsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUUsT0FBTyxJQUFJLGFBQWEsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBR3BDLE1BQU0sUUFBUSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ2hELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0FBQ25FLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FDM0MsYUFBYSxFQUNiLDJCQUEyQixDQUM1QixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sbUNBQW1DO0lBQzlDOzs7T0FHRztJQUNILG1CQUFtQixHQUFHLENBQ3BCLEtBQWdCLEVBQ2hCLFVBQWtCLEVBQ2xCLGlCQUFvQyxFQUNwQyxFQUFFO1FBQ0YsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFhLENBQUM7UUFDakUsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLFFBQVEsQ0FBQztTQUNqQjtRQUVELE1BQU0sWUFBWSxHQUFHLElBQUksY0FBYyxDQUFDLEtBQUssRUFBRSxHQUFHLFVBQVUsUUFBUSxFQUFFO1lBQ3BFLE9BQU8sRUFBRSxhQUFhLENBQUMsV0FBVztZQUNsQyxPQUFPLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDN0IsS0FBSyxFQUFFLDJCQUEyQjtZQUNsQyxPQUFPLEVBQUUsU0FBUztTQUNuQixDQUFDLENBQUM7UUFFSCxZQUFZLENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUM5QyxJQUFJLEdBQUcsQ0FBQyxlQUFlLENBQUM7WUFDdEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSztZQUN4QixPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztZQUM3QixTQUFTLEVBQUU7Z0JBQ1QscUNBQXFDLGlCQUFpQixDQUFDLFNBQVMsSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLElBQUk7Z0JBQzlGLDRDQUE0QyxpQkFBaUIsQ0FBQyxTQUFTLElBQUk7YUFDNUU7U0FDRixDQUFDLENBQ0gsQ0FBQztRQUVGLE9BQU8sSUFBSSxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtZQUNyQyxjQUFjLEVBQUUsWUFBWTtTQUM3QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgTm9kZWpzRnVuY3Rpb24gfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhLW5vZGVqcyc7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCAqIGFzIGlhbSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtaWFtJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBSdW50aW1lIGFzIExhbWJkYVJ1bnRpbWUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcbmltcG9ydCB7IFByb3ZpZGVyIH0gZnJvbSAnYXdzLWNkay1saWIvY3VzdG9tLXJlc291cmNlcyc7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5cbmNvbnN0IGZpbGVuYW1lID0gZmlsZVVSTFRvUGF0aChpbXBvcnQubWV0YS51cmwpO1xuY29uc3QgZGlybmFtZSA9IHBhdGguZGlybmFtZShmaWxlbmFtZSk7XG5jb25zdCByZXNvdXJjZXNSb290ID0gcGF0aC5ub3JtYWxpemUocGF0aC5qb2luKGRpcm5hbWUsICdsYW1iZGEnKSk7XG5jb25zdCBiYWNrZW5kU2VjcmV0TGFtYmRhRmlsZVBhdGggPSBwYXRoLmpvaW4oXG4gIHJlc291cmNlc1Jvb3QsXG4gICdiYWNrZW5kX3NlY3JldF9mZXRjaGVyLmpzJ1xuKTtcblxuLyoqXG4gKiBUaGUgZmFjdG9yeSB0byBjcmVhdGUgc2VjcmV0LWZldGNoZXIgcHJvdmlkZXIuXG4gKi9cbmV4cG9ydCBjbGFzcyBCYWNrZW5kU2VjcmV0RmV0Y2hlclByb3ZpZGVyRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVzb3VyY2UgcHJvdmlkZXIgaWYgaXQgZXhpc3RzIGluIHRoZSBpbnB1dCBzY29wZS4gT3RoZXJ3aXNlLFxuICAgKiBjcmVhdGVzIGEgbmV3IHByb3ZpZGVyLlxuICAgKi9cbiAgZ2V0T3JDcmVhdGVJbnN0YW5jZSA9IChcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIHByb3ZpZGVySWQ6IHN0cmluZyxcbiAgICBiYWNrZW5kSWRlbnRpZmllcjogQmFja2VuZElkZW50aWZpZXJcbiAgKSA9PiB7XG4gICAgY29uc3QgcHJvdmlkZXIgPSBzY29wZS5ub2RlLnRyeUZpbmRDaGlsZChwcm92aWRlcklkKSBhcyBQcm92aWRlcjtcbiAgICBpZiAocHJvdmlkZXIpIHtcbiAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICB9XG5cbiAgICBjb25zdCBzZWNyZXRMYW1iZGEgPSBuZXcgTm9kZWpzRnVuY3Rpb24oc2NvcGUsIGAke3Byb3ZpZGVySWR9TGFtYmRhYCwge1xuICAgICAgcnVudGltZTogTGFtYmRhUnVudGltZS5OT0RFSlNfMThfWCxcbiAgICAgIHRpbWVvdXQ6IER1cmF0aW9uLnNlY29uZHMoMTApLFxuICAgICAgZW50cnk6IGJhY2tlbmRTZWNyZXRMYW1iZGFGaWxlUGF0aCxcbiAgICAgIGhhbmRsZXI6ICdoYW5kbGVyJyxcbiAgICB9KTtcblxuICAgIHNlY3JldExhbWJkYS5ncmFudFByaW5jaXBhbC5hZGRUb1ByaW5jaXBhbFBvbGljeShcbiAgICAgIG5ldyBpYW0uUG9saWN5U3RhdGVtZW50KHtcbiAgICAgICAgZWZmZWN0OiBpYW0uRWZmZWN0LkFMTE9XLFxuICAgICAgICBhY3Rpb25zOiBbJ3NzbTpHZXRQYXJhbWV0ZXInXSxcbiAgICAgICAgcmVzb3VyY2VzOiBbXG4gICAgICAgICAgYGFybjphd3M6c3NtOio6KjpwYXJhbWV0ZXIvYW1wbGlmeS8ke2JhY2tlbmRJZGVudGlmaWVyLm5hbWVzcGFjZX0vJHtiYWNrZW5kSWRlbnRpZmllci5uYW1lfS8qYCxcbiAgICAgICAgICBgYXJuOmF3czpzc206KjoqOnBhcmFtZXRlci9hbXBsaWZ5L3NoYXJlZC8ke2JhY2tlbmRJZGVudGlmaWVyLm5hbWVzcGFjZX0vKmAsXG4gICAgICAgIF0sXG4gICAgICB9KVxuICAgICk7XG5cbiAgICByZXR1cm4gbmV3IFByb3ZpZGVyKHNjb3BlLCBwcm92aWRlcklkLCB7XG4gICAgICBvbkV2ZW50SGFuZGxlcjogc2VjcmV0TGFtYmRhLFxuICAgIH0pO1xuICB9O1xufVxuIl19