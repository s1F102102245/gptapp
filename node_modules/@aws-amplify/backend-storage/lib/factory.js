import { AmplifyStorage, } from '@aws-amplify/storage-construct-alpha';
import * as path from 'path';
/**
 * Singleton factory for a Storage bucket that can be used in `resource.ts` files
 */
class AmplifyStorageFactory {
    props;
    importStack;
    generator;
    /**
     * Set the properties that will be used to initialize the bucket
     */
    constructor(props, importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
    }
    /**
     * Get a singleton instance of the Bucket
     */
    getInstance = ({ constructContainer, outputStorageStrategy, importPathVerifier, }) => {
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'storage', 'resource'), 'Amplify Storage must be defined in amplify/storage/resource.ts');
        if (!this.generator) {
            this.generator = new AmplifyStorageGenerator(this.props, outputStorageStrategy);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
class AmplifyStorageGenerator {
    props;
    outputStorageStrategy;
    resourceGroupName = 'storage';
    defaultName = 'amplifyStorage';
    constructor(props, outputStorageStrategy) {
        this.props = props;
        this.outputStorageStrategy = outputStorageStrategy;
    }
    generateContainerEntry = (scope) => {
        return new AmplifyStorage(scope, this.defaultName, {
            ...this.props,
            outputStorageStrategy: this.outputStorageStrategy,
        });
    };
}
/**
 * Creates a factory that implements ConstructFactory<AmplifyStorage>
 */
export const defineStorage = (props) => new AmplifyStorageFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE9BQU8sRUFDTCxjQUFjLEdBRWYsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQU83Qjs7R0FFRztBQUNILE1BQU0scUJBQXFCO0lBT047SUFDQTtJQVBYLFNBQVMsQ0FBbUM7SUFFcEQ7O09BRUc7SUFDSCxZQUNtQixLQUFpQyxFQUNqQyxjQUFjLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSztRQUQvQixVQUFLLEdBQUwsS0FBSyxDQUE0QjtRQUNqQyxnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7SUFDL0MsQ0FBQztJQUVKOztPQUVHO0lBQ0gsV0FBVyxHQUFHLENBQUMsRUFDYixrQkFBa0IsRUFDbEIscUJBQXFCLEVBQ3JCLGtCQUFrQixHQUNlLEVBQWtCLEVBQUU7UUFDckQsa0JBQWtCLEVBQUUsTUFBTSxDQUN4QixJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLEVBQzNDLGdFQUFnRSxDQUNqRSxDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHVCQUF1QixDQUMxQyxJQUFJLENBQUMsS0FBSyxFQUNWLHFCQUFxQixDQUN0QixDQUFDO1NBQ0g7UUFDRCxPQUFPLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFtQixDQUFDO0lBQzNFLENBQUMsQ0FBQztDQUNIO0FBRUQsTUFBTSx1QkFBdUI7SUFLUjtJQUNBO0lBTFYsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0lBQ3RCLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQztJQUVoRCxZQUNtQixLQUEwQixFQUMxQixxQkFBdUU7UUFEdkUsVUFBSyxHQUFMLEtBQUssQ0FBcUI7UUFDMUIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFrRDtJQUN2RixDQUFDO0lBRUosc0JBQXNCLEdBQUcsQ0FBQyxLQUFnQixFQUFFLEVBQUU7UUFDNUMsT0FBTyxJQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNqRCxHQUFHLElBQUksQ0FBQyxLQUFLO1lBQ2IscUJBQXFCLEVBQUUsSUFBSSxDQUFDLHFCQUFxQjtTQUNsRCxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSDtBQUVEOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQzNCLEtBQTBCLEVBQ1EsRUFBRSxDQUNwQyxJQUFJLHFCQUFxQixDQUFDLEtBQUssRUFBRSxJQUFJLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQge1xuICBCYWNrZW5kT3V0cHV0RW50cnksXG4gIEJhY2tlbmRPdXRwdXRTdG9yYWdlU3RyYXRlZ3ksXG4gIENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yLFxuICBDb25zdHJ1Y3RGYWN0b3J5LFxuICBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wcyxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQge1xuICBBbXBsaWZ5U3RvcmFnZSxcbiAgQW1wbGlmeVN0b3JhZ2VQcm9wcyxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L3N0b3JhZ2UtY29uc3RydWN0LWFscGhhJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCB0eXBlIEFtcGxpZnlTdG9yYWdlRmFjdG9yeVByb3BzID0gT21pdDxcbiAgQW1wbGlmeVN0b3JhZ2VQcm9wcyxcbiAgJ291dHB1dFN0b3JhZ2VTdHJhdGVneSdcbj47XG5cbi8qKlxuICogU2luZ2xldG9uIGZhY3RvcnkgZm9yIGEgU3RvcmFnZSBidWNrZXQgdGhhdCBjYW4gYmUgdXNlZCBpbiBgcmVzb3VyY2UudHNgIGZpbGVzXG4gKi9cbmNsYXNzIEFtcGxpZnlTdG9yYWdlRmFjdG9yeSBpbXBsZW1lbnRzIENvbnN0cnVjdEZhY3Rvcnk8QW1wbGlmeVN0b3JhZ2U+IHtcbiAgcHJpdmF0ZSBnZW5lcmF0b3I6IENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZSB0aGUgYnVja2V0XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb3BzOiBBbXBsaWZ5U3RvcmFnZUZhY3RvcnlQcm9wcyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGltcG9ydFN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2tcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBHZXQgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgdGhlIEJ1Y2tldFxuICAgKi9cbiAgZ2V0SW5zdGFuY2UgPSAoe1xuICAgIGNvbnN0cnVjdENvbnRhaW5lcixcbiAgICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3ksXG4gICAgaW1wb3J0UGF0aFZlcmlmaWVyLFxuICB9OiBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wcyk6IEFtcGxpZnlTdG9yYWdlID0+IHtcbiAgICBpbXBvcnRQYXRoVmVyaWZpZXI/LnZlcmlmeShcbiAgICAgIHRoaXMuaW1wb3J0U3RhY2ssXG4gICAgICBwYXRoLmpvaW4oJ2FtcGxpZnknLCAnc3RvcmFnZScsICdyZXNvdXJjZScpLFxuICAgICAgJ0FtcGxpZnkgU3RvcmFnZSBtdXN0IGJlIGRlZmluZWQgaW4gYW1wbGlmeS9zdG9yYWdlL3Jlc291cmNlLnRzJ1xuICAgICk7XG4gICAgaWYgKCF0aGlzLmdlbmVyYXRvcikge1xuICAgICAgdGhpcy5nZW5lcmF0b3IgPSBuZXcgQW1wbGlmeVN0b3JhZ2VHZW5lcmF0b3IoXG4gICAgICAgIHRoaXMucHJvcHMsXG4gICAgICAgIG91dHB1dFN0b3JhZ2VTdHJhdGVneVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0cnVjdENvbnRhaW5lci5nZXRPckNvbXB1dGUodGhpcy5nZW5lcmF0b3IpIGFzIEFtcGxpZnlTdG9yYWdlO1xuICB9O1xufVxuXG5jbGFzcyBBbXBsaWZ5U3RvcmFnZUdlbmVyYXRvciBpbXBsZW1lbnRzIENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yIHtcbiAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cE5hbWUgPSAnc3RvcmFnZSc7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdE5hbWUgPSAnYW1wbGlmeVN0b3JhZ2UnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEFtcGxpZnlTdG9yYWdlUHJvcHMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k6IEJhY2tlbmRPdXRwdXRTdG9yYWdlU3RyYXRlZ3k8QmFja2VuZE91dHB1dEVudHJ5PlxuICApIHt9XG5cbiAgZ2VuZXJhdGVDb250YWluZXJFbnRyeSA9IChzY29wZTogQ29uc3RydWN0KSA9PiB7XG4gICAgcmV0dXJuIG5ldyBBbXBsaWZ5U3RvcmFnZShzY29wZSwgdGhpcy5kZWZhdWx0TmFtZSwge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIG91dHB1dFN0b3JhZ2VTdHJhdGVneTogdGhpcy5vdXRwdXRTdG9yYWdlU3RyYXRlZ3ksXG4gICAgfSk7XG4gIH07XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZhY3RvcnkgdGhhdCBpbXBsZW1lbnRzIENvbnN0cnVjdEZhY3Rvcnk8QW1wbGlmeVN0b3JhZ2U+XG4gKi9cbmV4cG9ydCBjb25zdCBkZWZpbmVTdG9yYWdlID0gKFxuICBwcm9wczogQW1wbGlmeVN0b3JhZ2VQcm9wc1xuKTogQ29uc3RydWN0RmFjdG9yeTxBbXBsaWZ5U3RvcmFnZT4gPT5cbiAgbmV3IEFtcGxpZnlTdG9yYWdlRmFjdG9yeShwcm9wcywgbmV3IEVycm9yKCkuc3RhY2spO1xuIl19