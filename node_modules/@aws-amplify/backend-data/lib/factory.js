import { AmplifyData } from '@aws-amplify/data-construct';
import * as path from 'path';
import { convertSchemaToCDK } from './convert_schema.js';
import { buildConstructFactoryFunctionInstanceProvider, convertFunctionNameMapToCDK, } from './convert_functions.js';
import { buildConstructFactoryProvidedAuthConfig, convertAuthorizationModesToCDK, isUsingDefaultApiKeyAuth, } from './convert_authorization_modes.js';
import { validateAuthorizationModes } from './validate_authorization_modes.js';
/**
 * Singleton factory for AmplifyGraphqlApi constructs that can be used in Amplify project files
 */
class DataFactory {
    props;
    importStack;
    generator;
    /**
     * Create a new AmplifyConstruct
     */
    constructor(props, importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
    }
    /**
     * Gets an instance of the Data construct
     */
    getInstance = (props) => {
        const { constructContainer, outputStorageStrategy, importPathVerifier } = props;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'data', 'resource'), 'Amplify Data must be defined in amplify/data/resource.ts');
        if (!this.generator) {
            this.generator = new DataGenerator(this.props, buildConstructFactoryProvidedAuthConfig(props.constructContainer
                .getConstructFactory('AuthResources')
                ?.getInstance(props)), buildConstructFactoryFunctionInstanceProvider(props), outputStorageStrategy);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
class DataGenerator {
    props;
    providedAuthConfig;
    functionInstanceProvider;
    outputStorageStrategy;
    resourceGroupName = 'data';
    defaultName = 'amplifyData';
    constructor(props, providedAuthConfig, functionInstanceProvider, outputStorageStrategy) {
        this.props = props;
        this.providedAuthConfig = providedAuthConfig;
        this.functionInstanceProvider = functionInstanceProvider;
        this.outputStorageStrategy = outputStorageStrategy;
    }
    generateContainerEntry = (scope) => {
        const authorizationModes = convertAuthorizationModesToCDK(this.functionInstanceProvider, this.providedAuthConfig, this.props.authorizationModes);
        validateAuthorizationModes(this.props.authorizationModes, authorizationModes);
        const sandboxModeEnabled = isUsingDefaultApiKeyAuth(this.providedAuthConfig, this.props.authorizationModes);
        const functionNameMap = convertFunctionNameMapToCDK(this.functionInstanceProvider, this.props.functions ?? {});
        return new AmplifyData(scope, this.defaultName, {
            apiName: this.props.name,
            definition: convertSchemaToCDK(this.props.schema),
            authorizationModes,
            outputStorageStrategy: this.outputStorageStrategy,
            functionNameMap,
            translationBehavior: { sandboxModeEnabled },
        });
    };
}
/**
 * Creates a factory that implements ConstructFactory<AmplifyGraphqlApi>
 */
export const defineData = (props) => new DataFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUxRCxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUU3QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN6RCxPQUFPLEVBRUwsNkNBQTZDLEVBQzdDLDJCQUEyQixHQUM1QixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFFTCx1Q0FBdUMsRUFDdkMsOEJBQThCLEVBQzlCLHdCQUF3QixHQUN6QixNQUFNLGtDQUFrQyxDQUFDO0FBQzFDLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRS9FOztHQUVHO0FBQ0gsTUFBTSxXQUFXO0lBT0k7SUFDQTtJQVBYLFNBQVMsQ0FBbUM7SUFFcEQ7O09BRUc7SUFDSCxZQUNtQixLQUFnQixFQUNoQixjQUFjLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSztRQUQvQixVQUFLLEdBQUwsS0FBSyxDQUFXO1FBQ2hCLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtJQUMvQyxDQUFDO0lBRUo7O09BRUc7SUFDSCxXQUFXLEdBQUcsQ0FBQyxLQUF1QyxFQUFlLEVBQUU7UUFDckUsTUFBTSxFQUFFLGtCQUFrQixFQUFFLHFCQUFxQixFQUFFLGtCQUFrQixFQUFFLEdBQ3JFLEtBQUssQ0FBQztRQUNSLGtCQUFrQixFQUFFLE1BQU0sQ0FDeEIsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsQ0FBQyxFQUN4QywwREFBMEQsQ0FDM0QsQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxhQUFhLENBQ2hDLElBQUksQ0FBQyxLQUFLLEVBQ1YsdUNBQXVDLENBQ3JDLEtBQUssQ0FBQyxrQkFBa0I7aUJBQ3JCLG1CQUFtQixDQUNsQixlQUFlLENBQ2hCO2dCQUNELEVBQUUsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUN2QixFQUNELDZDQUE2QyxDQUFDLEtBQUssQ0FBQyxFQUNwRCxxQkFBcUIsQ0FDdEIsQ0FBQztTQUNIO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBZ0IsQ0FBQztJQUN4RSxDQUFDLENBQUM7Q0FDSDtBQUVELE1BQU0sYUFBYTtJQUtFO0lBQ0E7SUFDQTtJQUNBO0lBUFYsaUJBQWlCLEdBQUcsTUFBTSxDQUFDO0lBQ25CLFdBQVcsR0FBRyxhQUFhLENBQUM7SUFFN0MsWUFDbUIsS0FBZ0IsRUFDaEIsa0JBQWtELEVBQ2xELHdCQUFrRCxFQUNsRCxxQkFBa0U7UUFIbEUsVUFBSyxHQUFMLEtBQUssQ0FBVztRQUNoQix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQWdDO1FBQ2xELDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBMEI7UUFDbEQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUE2QztJQUNsRixDQUFDO0lBRUosc0JBQXNCLEdBQUcsQ0FBQyxLQUFnQixFQUFFLEVBQUU7UUFDNUMsTUFBTSxrQkFBa0IsR0FBRyw4QkFBOEIsQ0FDdkQsSUFBSSxDQUFDLHdCQUF3QixFQUM3QixJQUFJLENBQUMsa0JBQWtCLEVBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQzlCLENBQUM7UUFFRiwwQkFBMEIsQ0FDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFDN0Isa0JBQWtCLENBQ25CLENBQUM7UUFFRixNQUFNLGtCQUFrQixHQUFHLHdCQUF3QixDQUNqRCxJQUFJLENBQUMsa0JBQWtCLEVBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQzlCLENBQUM7UUFFRixNQUFNLGVBQWUsR0FBRywyQkFBMkIsQ0FDakQsSUFBSSxDQUFDLHdCQUF3QixFQUM3QixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQzNCLENBQUM7UUFFRixPQUFPLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQzlDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUk7WUFDeEIsVUFBVSxFQUFFLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQ2pELGtCQUFrQjtZQUNsQixxQkFBcUIsRUFBRSxJQUFJLENBQUMscUJBQXFCO1lBQ2pELGVBQWU7WUFDZixtQkFBbUIsRUFBRSxFQUFFLGtCQUFrQixFQUFFO1NBQzVDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUFnQixFQUFpQyxFQUFFLENBQzVFLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLEtBQUssRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5pbXBvcnQge1xuICBBdXRoUmVzb3VyY2VzLFxuICBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5LFxuICBDb25zdHJ1Y3RDb250YWluZXJFbnRyeUdlbmVyYXRvcixcbiAgQ29uc3RydWN0RmFjdG9yeSxcbiAgQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHMsXG4gIFJlc291cmNlUHJvdmlkZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQW1wbGlmeURhdGEgfSBmcm9tICdAYXdzLWFtcGxpZnkvZGF0YS1jb25zdHJ1Y3QnO1xuaW1wb3J0IHsgR3JhcGhxbE91dHB1dCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zY2hlbWFzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBEYXRhUHJvcHMgfSBmcm9tICcuL3R5cGVzLmpzJztcbmltcG9ydCB7IGNvbnZlcnRTY2hlbWFUb0NESyB9IGZyb20gJy4vY29udmVydF9zY2hlbWEuanMnO1xuaW1wb3J0IHtcbiAgRnVuY3Rpb25JbnN0YW5jZVByb3ZpZGVyLFxuICBidWlsZENvbnN0cnVjdEZhY3RvcnlGdW5jdGlvbkluc3RhbmNlUHJvdmlkZXIsXG4gIGNvbnZlcnRGdW5jdGlvbk5hbWVNYXBUb0NESyxcbn0gZnJvbSAnLi9jb252ZXJ0X2Z1bmN0aW9ucy5qcyc7XG5pbXBvcnQge1xuICBQcm92aWRlZEF1dGhDb25maWcsXG4gIGJ1aWxkQ29uc3RydWN0RmFjdG9yeVByb3ZpZGVkQXV0aENvbmZpZyxcbiAgY29udmVydEF1dGhvcml6YXRpb25Nb2Rlc1RvQ0RLLFxuICBpc1VzaW5nRGVmYXVsdEFwaUtleUF1dGgsXG59IGZyb20gJy4vY29udmVydF9hdXRob3JpemF0aW9uX21vZGVzLmpzJztcbmltcG9ydCB7IHZhbGlkYXRlQXV0aG9yaXphdGlvbk1vZGVzIH0gZnJvbSAnLi92YWxpZGF0ZV9hdXRob3JpemF0aW9uX21vZGVzLmpzJztcblxuLyoqXG4gKiBTaW5nbGV0b24gZmFjdG9yeSBmb3IgQW1wbGlmeUdyYXBocWxBcGkgY29uc3RydWN0cyB0aGF0IGNhbiBiZSB1c2VkIGluIEFtcGxpZnkgcHJvamVjdCBmaWxlc1xuICovXG5jbGFzcyBEYXRhRmFjdG9yeSBpbXBsZW1lbnRzIENvbnN0cnVjdEZhY3Rvcnk8QW1wbGlmeURhdGE+IHtcbiAgcHJpdmF0ZSBnZW5lcmF0b3I6IENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yO1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgQW1wbGlmeUNvbnN0cnVjdFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogRGF0YVByb3BzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW1wb3J0U3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFja1xuICApIHt9XG5cbiAgLyoqXG4gICAqIEdldHMgYW4gaW5zdGFuY2Ugb2YgdGhlIERhdGEgY29uc3RydWN0XG4gICAqL1xuICBnZXRJbnN0YW5jZSA9IChwcm9wczogQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHMpOiBBbXBsaWZ5RGF0YSA9PiB7XG4gICAgY29uc3QgeyBjb25zdHJ1Y3RDb250YWluZXIsIG91dHB1dFN0b3JhZ2VTdHJhdGVneSwgaW1wb3J0UGF0aFZlcmlmaWVyIH0gPVxuICAgICAgcHJvcHM7XG4gICAgaW1wb3J0UGF0aFZlcmlmaWVyPy52ZXJpZnkoXG4gICAgICB0aGlzLmltcG9ydFN0YWNrLFxuICAgICAgcGF0aC5qb2luKCdhbXBsaWZ5JywgJ2RhdGEnLCAncmVzb3VyY2UnKSxcbiAgICAgICdBbXBsaWZ5IERhdGEgbXVzdCBiZSBkZWZpbmVkIGluIGFtcGxpZnkvZGF0YS9yZXNvdXJjZS50cydcbiAgICApO1xuICAgIGlmICghdGhpcy5nZW5lcmF0b3IpIHtcbiAgICAgIHRoaXMuZ2VuZXJhdG9yID0gbmV3IERhdGFHZW5lcmF0b3IoXG4gICAgICAgIHRoaXMucHJvcHMsXG4gICAgICAgIGJ1aWxkQ29uc3RydWN0RmFjdG9yeVByb3ZpZGVkQXV0aENvbmZpZyhcbiAgICAgICAgICBwcm9wcy5jb25zdHJ1Y3RDb250YWluZXJcbiAgICAgICAgICAgIC5nZXRDb25zdHJ1Y3RGYWN0b3J5PFJlc291cmNlUHJvdmlkZXI8QXV0aFJlc291cmNlcz4+KFxuICAgICAgICAgICAgICAnQXV0aFJlc291cmNlcydcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgID8uZ2V0SW5zdGFuY2UocHJvcHMpXG4gICAgICAgICksXG4gICAgICAgIGJ1aWxkQ29uc3RydWN0RmFjdG9yeUZ1bmN0aW9uSW5zdGFuY2VQcm92aWRlcihwcm9wcyksXG4gICAgICAgIG91dHB1dFN0b3JhZ2VTdHJhdGVneVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0cnVjdENvbnRhaW5lci5nZXRPckNvbXB1dGUodGhpcy5nZW5lcmF0b3IpIGFzIEFtcGxpZnlEYXRhO1xuICB9O1xufVxuXG5jbGFzcyBEYXRhR2VuZXJhdG9yIGltcGxlbWVudHMgQ29uc3RydWN0Q29udGFpbmVyRW50cnlHZW5lcmF0b3Ige1xuICByZWFkb25seSByZXNvdXJjZUdyb3VwTmFtZSA9ICdkYXRhJztcbiAgcHJpdmF0ZSByZWFkb25seSBkZWZhdWx0TmFtZSA9ICdhbXBsaWZ5RGF0YSc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogRGF0YVByb3BzLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvdmlkZWRBdXRoQ29uZmlnOiBQcm92aWRlZEF1dGhDb25maWcgfCB1bmRlZmluZWQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBmdW5jdGlvbkluc3RhbmNlUHJvdmlkZXI6IEZ1bmN0aW9uSW5zdGFuY2VQcm92aWRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IG91dHB1dFN0b3JhZ2VTdHJhdGVneTogQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneTxHcmFwaHFsT3V0cHV0PlxuICApIHt9XG5cbiAgZ2VuZXJhdGVDb250YWluZXJFbnRyeSA9IChzY29wZTogQ29uc3RydWN0KSA9PiB7XG4gICAgY29uc3QgYXV0aG9yaXphdGlvbk1vZGVzID0gY29udmVydEF1dGhvcml6YXRpb25Nb2Rlc1RvQ0RLKFxuICAgICAgdGhpcy5mdW5jdGlvbkluc3RhbmNlUHJvdmlkZXIsXG4gICAgICB0aGlzLnByb3ZpZGVkQXV0aENvbmZpZyxcbiAgICAgIHRoaXMucHJvcHMuYXV0aG9yaXphdGlvbk1vZGVzXG4gICAgKTtcblxuICAgIHZhbGlkYXRlQXV0aG9yaXphdGlvbk1vZGVzKFxuICAgICAgdGhpcy5wcm9wcy5hdXRob3JpemF0aW9uTW9kZXMsXG4gICAgICBhdXRob3JpemF0aW9uTW9kZXNcbiAgICApO1xuXG4gICAgY29uc3Qgc2FuZGJveE1vZGVFbmFibGVkID0gaXNVc2luZ0RlZmF1bHRBcGlLZXlBdXRoKFxuICAgICAgdGhpcy5wcm92aWRlZEF1dGhDb25maWcsXG4gICAgICB0aGlzLnByb3BzLmF1dGhvcml6YXRpb25Nb2Rlc1xuICAgICk7XG5cbiAgICBjb25zdCBmdW5jdGlvbk5hbWVNYXAgPSBjb252ZXJ0RnVuY3Rpb25OYW1lTWFwVG9DREsoXG4gICAgICB0aGlzLmZ1bmN0aW9uSW5zdGFuY2VQcm92aWRlcixcbiAgICAgIHRoaXMucHJvcHMuZnVuY3Rpb25zID8/IHt9XG4gICAgKTtcblxuICAgIHJldHVybiBuZXcgQW1wbGlmeURhdGEoc2NvcGUsIHRoaXMuZGVmYXVsdE5hbWUsIHtcbiAgICAgIGFwaU5hbWU6IHRoaXMucHJvcHMubmFtZSxcbiAgICAgIGRlZmluaXRpb246IGNvbnZlcnRTY2hlbWFUb0NESyh0aGlzLnByb3BzLnNjaGVtYSksXG4gICAgICBhdXRob3JpemF0aW9uTW9kZXMsXG4gICAgICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k6IHRoaXMub3V0cHV0U3RvcmFnZVN0cmF0ZWd5LFxuICAgICAgZnVuY3Rpb25OYW1lTWFwLFxuICAgICAgdHJhbnNsYXRpb25CZWhhdmlvcjogeyBzYW5kYm94TW9kZUVuYWJsZWQgfSxcbiAgICB9KTtcbiAgfTtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgZmFjdG9yeSB0aGF0IGltcGxlbWVudHMgQ29uc3RydWN0RmFjdG9yeTxBbXBsaWZ5R3JhcGhxbEFwaT5cbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmluZURhdGEgPSAocHJvcHM6IERhdGFQcm9wcyk6IENvbnN0cnVjdEZhY3Rvcnk8QW1wbGlmeURhdGE+ID0+XG4gIG5ldyBEYXRhRmFjdG9yeShwcm9wcywgbmV3IEVycm9yKCkuc3RhY2spO1xuIl19