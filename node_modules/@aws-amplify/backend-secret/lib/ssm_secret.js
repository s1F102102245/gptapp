import { SecretError } from './secret_error.js';
const SHARED_SECRET = 'shared';
/**
 * This class implements Amplify Secret using SSM parameter store.
 */
export class SSMSecretClient {
    ssmClient;
    /**
     * Creates a new instance of SSMSecret.
     */
    constructor(ssmClient) {
        this.ssmClient = ssmClient;
    }
    /**
     * Get a branch-specific parameter prefix.
     */
    getBranchParameterPrefix = (parts) => {
        return `/amplify/${parts.namespace}/${parts.name}`;
    };
    /**
     * Get a branch-specific parameter full path.
     */
    getBranchParameterFullPath = (backendIdentifier, secretName) => {
        return `${this.getBranchParameterPrefix(backendIdentifier)}/${secretName}`;
    };
    /**
     * Get a shared parameter prefix.
     */
    getSharedParameterPrefix = (appId) => {
        return `/amplify/${SHARED_SECRET}/${appId}`;
    };
    /**
     * Get a shared parameter full path.
     */
    getSharedParameterFullPath = (appId, secretName) => {
        return `${this.getSharedParameterPrefix(appId)}/${secretName}`;
    };
    /**
     * Get a parameter full path.
     */
    getParameterFullPath = (backendIdentifier, secretName) => {
        if (typeof backendIdentifier === 'object') {
            return this.getBranchParameterFullPath(backendIdentifier, secretName);
        }
        return this.getSharedParameterFullPath(backendIdentifier, secretName);
    };
    /**
     * Get a parameter prefix.
     */
    getParameterPrefix = (backendIdentifier) => {
        if (typeof backendIdentifier === 'object') {
            return this.getBranchParameterPrefix(backendIdentifier);
        }
        return this.getSharedParameterPrefix(backendIdentifier);
    };
    /**
     * Get a secret from SSM parameter store.
     */
    getSecret = async (backendIdentifier, secretIdentifier) => {
        let secret;
        const name = this.getParameterFullPath(backendIdentifier, secretIdentifier.name);
        try {
            const resp = await this.ssmClient.getParameter({
                Name: secretIdentifier.version
                    ? `${name}:${secretIdentifier.version}`
                    : name,
                WithDecryption: true,
            });
            if (resp.Parameter?.Value) {
                secret = {
                    name: secretIdentifier.name,
                    version: resp.Parameter.Version,
                    value: resp.Parameter.Value,
                    lastUpdated: resp.Parameter.LastModifiedDate,
                };
            }
        }
        catch (err) {
            throw SecretError.createInstance(err);
        }
        if (!secret) {
            throw new SecretError(`The value of secret '${secretIdentifier.name}' is undefined`);
        }
        return secret;
    };
    /**
     * List secrets from SSM parameter store.
     */
    listSecrets = async (backendIdentifier) => {
        const path = this.getParameterPrefix(backendIdentifier);
        const result = [];
        try {
            const resp = await this.ssmClient.getParametersByPath({
                Path: path,
                WithDecryption: true,
            });
            resp.Parameters?.forEach((param) => {
                if (!param.Name || !param.Value) {
                    return;
                }
                const secretName = param.Name.split('/').pop();
                if (secretName) {
                    result.push({
                        name: secretName,
                        version: param.Version,
                        lastUpdated: param.LastModifiedDate,
                    });
                }
            });
            return result;
        }
        catch (err) {
            throw SecretError.createInstance(err);
        }
    };
    /**
     * Set a secret in SSM parameter store.
     */
    setSecret = async (backendIdentifier, secretName, secretValue) => {
        const name = this.getParameterFullPath(backendIdentifier, secretName);
        try {
            const resp = await this.ssmClient.putParameter({
                Name: name,
                Type: 'SecureString',
                Value: secretValue,
                Description: `Amplify Secret`,
                Overwrite: true,
            });
            return {
                name: secretName,
                version: resp.Version,
            };
        }
        catch (err) {
            throw SecretError.createInstance(err);
        }
    };
    /**
     * Remove a secret from SSM parameter store.
     */
    removeSecret = async (backendIdentifier, secretName) => {
        const name = this.getParameterFullPath(backendIdentifier, secretName);
        try {
            await this.ssmClient.deleteParameter({
                Name: name,
            });
        }
        catch (err) {
            throw SecretError.createInstance(err);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NtX3NlY3JldC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zc21fc2VjcmV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQVNoRCxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUM7QUFFL0I7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUlHO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsU0FBYztRQUFkLGNBQVMsR0FBVCxTQUFTLENBQUs7SUFBRyxDQUFDO0lBRS9DOztPQUVHO0lBQ0ssd0JBQXdCLEdBQUcsQ0FBQyxLQUF3QixFQUFVLEVBQUU7UUFDdEUsT0FBTyxZQUFZLEtBQUssQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3JELENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ssMEJBQTBCLEdBQUcsQ0FDbkMsaUJBQW9DLEVBQ3BDLFVBQWtCLEVBQ1YsRUFBRTtRQUNWLE9BQU8sR0FBRyxJQUFJLENBQUMsd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxVQUFVLEVBQUUsQ0FBQztJQUM3RSxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNLLHdCQUF3QixHQUFHLENBQUMsS0FBWSxFQUFVLEVBQUU7UUFDMUQsT0FBTyxZQUFZLGFBQWEsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUM5QyxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNLLDBCQUEwQixHQUFHLENBQ25DLEtBQVksRUFDWixVQUFrQixFQUNWLEVBQUU7UUFDVixPQUFPLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxJQUFJLFVBQVUsRUFBRSxDQUFDO0lBQ2pFLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ssb0JBQW9CLEdBQUcsQ0FDN0IsaUJBQTRDLEVBQzVDLFVBQWtCLEVBQ1YsRUFBRTtRQUNWLElBQUksT0FBTyxpQkFBaUIsS0FBSyxRQUFRLEVBQUU7WUFDekMsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUMsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDdkU7UUFDRCxPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxpQkFBaUIsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN4RSxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNLLGtCQUFrQixHQUFHLENBQzNCLGlCQUE0QyxFQUNwQyxFQUFFO1FBQ1YsSUFBSSxPQUFPLGlCQUFpQixLQUFLLFFBQVEsRUFBRTtZQUN6QyxPQUFPLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQ3pEO1FBQ0QsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUMxRCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNJLFNBQVMsR0FBRyxLQUFLLEVBQ3RCLGlCQUE0QyxFQUM1QyxnQkFBa0MsRUFDakIsRUFBRTtRQUNuQixJQUFJLE1BQTBCLENBQUM7UUFDL0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUNwQyxpQkFBaUIsRUFDakIsZ0JBQWdCLENBQUMsSUFBSSxDQUN0QixDQUFDO1FBQ0YsSUFBSTtZQUNGLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7Z0JBQzdDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxPQUFPO29CQUM1QixDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksZ0JBQWdCLENBQUMsT0FBTyxFQUFFO29CQUN2QyxDQUFDLENBQUMsSUFBSTtnQkFDUixjQUFjLEVBQUUsSUFBSTthQUNyQixDQUFDLENBQUM7WUFDSCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFO2dCQUN6QixNQUFNLEdBQUc7b0JBQ1AsSUFBSSxFQUFFLGdCQUFnQixDQUFDLElBQUk7b0JBQzNCLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU87b0JBQy9CLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUs7b0JBQzNCLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGdCQUFnQjtpQkFDN0MsQ0FBQzthQUNIO1NBQ0Y7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLE1BQU0sV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFZLENBQUMsQ0FBQztTQUNoRDtRQUVELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLElBQUksV0FBVyxDQUNuQix3QkFBd0IsZ0JBQWdCLENBQUMsSUFBSSxnQkFBZ0IsQ0FDOUQsQ0FBQztTQUNIO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSSxXQUFXLEdBQUcsS0FBSyxFQUN4QixpQkFBNEMsRUFDakIsRUFBRTtRQUM3QixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN4RCxNQUFNLE1BQU0sR0FBcUIsRUFBRSxDQUFDO1FBRXBDLElBQUk7WUFDRixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7Z0JBQ3BELElBQUksRUFBRSxJQUFJO2dCQUNWLGNBQWMsRUFBRSxJQUFJO2FBQ3JCLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtvQkFDL0IsT0FBTztpQkFDUjtnQkFDRCxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDL0MsSUFBSSxVQUFVLEVBQUU7b0JBQ2QsTUFBTSxDQUFDLElBQUksQ0FBQzt3QkFDVixJQUFJLEVBQUUsVUFBVTt3QkFDaEIsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPO3dCQUN0QixXQUFXLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtxQkFDcEMsQ0FBQyxDQUFDO2lCQUNKO1lBQ0gsQ0FBQyxDQUFDLENBQUM7WUFDSCxPQUFPLE1BQU0sQ0FBQztTQUNmO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixNQUFNLFdBQVcsQ0FBQyxjQUFjLENBQUMsR0FBWSxDQUFDLENBQUM7U0FDaEQ7SUFDSCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNJLFNBQVMsR0FBRyxLQUFLLEVBQ3RCLGlCQUE0QyxFQUM1QyxVQUFrQixFQUNsQixXQUFtQixFQUNRLEVBQUU7UUFDN0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3RFLElBQUk7WUFDRixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO2dCQUM3QyxJQUFJLEVBQUUsSUFBSTtnQkFDVixJQUFJLEVBQUUsY0FBYztnQkFDcEIsS0FBSyxFQUFFLFdBQVc7Z0JBQ2xCLFdBQVcsRUFBRSxnQkFBZ0I7Z0JBQzdCLFNBQVMsRUFBRSxJQUFJO2FBQ2hCLENBQUMsQ0FBQztZQUNILE9BQU87Z0JBQ0wsSUFBSSxFQUFFLFVBQVU7Z0JBQ2hCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTzthQUN0QixDQUFDO1NBQ0g7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLE1BQU0sV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFZLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0ksWUFBWSxHQUFHLEtBQUssRUFDekIsaUJBQTRDLEVBQzVDLFVBQWtCLEVBQ2xCLEVBQUU7UUFDRixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDdEUsSUFBSTtZQUNGLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7Z0JBQ25DLElBQUksRUFBRSxJQUFJO2FBQ1gsQ0FBQyxDQUFDO1NBQ0o7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLE1BQU0sV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFZLENBQUMsQ0FBQztTQUNoRDtJQUNILENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU1NNIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXNzbSc7XG5pbXBvcnQgeyBTZWNyZXRFcnJvciB9IGZyb20gJy4vc2VjcmV0X2Vycm9yLmpzJztcbmltcG9ydCB7XG4gIFNlY3JldCxcbiAgU2VjcmV0Q2xpZW50LFxuICBTZWNyZXRJZGVudGlmaWVyLFxuICBTZWNyZXRMaXN0SXRlbSxcbn0gZnJvbSAnLi9zZWNyZXQuanMnO1xuaW1wb3J0IHsgQXBwSWQsIEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5cbmNvbnN0IFNIQVJFRF9TRUNSRVQgPSAnc2hhcmVkJztcblxuLyoqXG4gKiBUaGlzIGNsYXNzIGltcGxlbWVudHMgQW1wbGlmeSBTZWNyZXQgdXNpbmcgU1NNIHBhcmFtZXRlciBzdG9yZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNTTVNlY3JldENsaWVudCBpbXBsZW1lbnRzIFNlY3JldENsaWVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IGluc3RhbmNlIG9mIFNTTVNlY3JldC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgc3NtQ2xpZW50OiBTU00pIHt9XG5cbiAgLyoqXG4gICAqIEdldCBhIGJyYW5jaC1zcGVjaWZpYyBwYXJhbWV0ZXIgcHJlZml4LlxuICAgKi9cbiAgcHJpdmF0ZSBnZXRCcmFuY2hQYXJhbWV0ZXJQcmVmaXggPSAocGFydHM6IEJhY2tlbmRJZGVudGlmaWVyKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gYC9hbXBsaWZ5LyR7cGFydHMubmFtZXNwYWNlfS8ke3BhcnRzLm5hbWV9YDtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IGEgYnJhbmNoLXNwZWNpZmljIHBhcmFtZXRlciBmdWxsIHBhdGguXG4gICAqL1xuICBwcml2YXRlIGdldEJyYW5jaFBhcmFtZXRlckZ1bGxQYXRoID0gKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBCYWNrZW5kSWRlbnRpZmllcixcbiAgICBzZWNyZXROYW1lOiBzdHJpbmdcbiAgKTogc3RyaW5nID0+IHtcbiAgICByZXR1cm4gYCR7dGhpcy5nZXRCcmFuY2hQYXJhbWV0ZXJQcmVmaXgoYmFja2VuZElkZW50aWZpZXIpfS8ke3NlY3JldE5hbWV9YDtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IGEgc2hhcmVkIHBhcmFtZXRlciBwcmVmaXguXG4gICAqL1xuICBwcml2YXRlIGdldFNoYXJlZFBhcmFtZXRlclByZWZpeCA9IChhcHBJZDogQXBwSWQpOiBzdHJpbmcgPT4ge1xuICAgIHJldHVybiBgL2FtcGxpZnkvJHtTSEFSRURfU0VDUkVUfS8ke2FwcElkfWA7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhIHNoYXJlZCBwYXJhbWV0ZXIgZnVsbCBwYXRoLlxuICAgKi9cbiAgcHJpdmF0ZSBnZXRTaGFyZWRQYXJhbWV0ZXJGdWxsUGF0aCA9IChcbiAgICBhcHBJZDogQXBwSWQsXG4gICAgc2VjcmV0TmFtZTogc3RyaW5nXG4gICk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIGAke3RoaXMuZ2V0U2hhcmVkUGFyYW1ldGVyUHJlZml4KGFwcElkKX0vJHtzZWNyZXROYW1lfWA7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhIHBhcmFtZXRlciBmdWxsIHBhdGguXG4gICAqL1xuICBwcml2YXRlIGdldFBhcmFtZXRlckZ1bGxQYXRoID0gKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBCYWNrZW5kSWRlbnRpZmllciB8IEFwcElkLFxuICAgIHNlY3JldE5hbWU6IHN0cmluZ1xuICApOiBzdHJpbmcgPT4ge1xuICAgIGlmICh0eXBlb2YgYmFja2VuZElkZW50aWZpZXIgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRCcmFuY2hQYXJhbWV0ZXJGdWxsUGF0aChiYWNrZW5kSWRlbnRpZmllciwgc2VjcmV0TmFtZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFNoYXJlZFBhcmFtZXRlckZ1bGxQYXRoKGJhY2tlbmRJZGVudGlmaWVyLCBzZWNyZXROYW1lKTtcbiAgfTtcblxuICAvKipcbiAgICogR2V0IGEgcGFyYW1ldGVyIHByZWZpeC5cbiAgICovXG4gIHByaXZhdGUgZ2V0UGFyYW1ldGVyUHJlZml4ID0gKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBCYWNrZW5kSWRlbnRpZmllciB8IEFwcElkXG4gICk6IHN0cmluZyA9PiB7XG4gICAgaWYgKHR5cGVvZiBiYWNrZW5kSWRlbnRpZmllciA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEJyYW5jaFBhcmFtZXRlclByZWZpeChiYWNrZW5kSWRlbnRpZmllcik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFNoYXJlZFBhcmFtZXRlclByZWZpeChiYWNrZW5kSWRlbnRpZmllcik7XG4gIH07XG5cbiAgLyoqXG4gICAqIEdldCBhIHNlY3JldCBmcm9tIFNTTSBwYXJhbWV0ZXIgc3RvcmUuXG4gICAqL1xuICBwdWJsaWMgZ2V0U2VjcmV0ID0gYXN5bmMgKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBCYWNrZW5kSWRlbnRpZmllciB8IEFwcElkLFxuICAgIHNlY3JldElkZW50aWZpZXI6IFNlY3JldElkZW50aWZpZXJcbiAgKTogUHJvbWlzZTxTZWNyZXQ+ID0+IHtcbiAgICBsZXQgc2VjcmV0OiBTZWNyZXQgfCB1bmRlZmluZWQ7XG4gICAgY29uc3QgbmFtZSA9IHRoaXMuZ2V0UGFyYW1ldGVyRnVsbFBhdGgoXG4gICAgICBiYWNrZW5kSWRlbnRpZmllcixcbiAgICAgIHNlY3JldElkZW50aWZpZXIubmFtZVxuICAgICk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLnNzbUNsaWVudC5nZXRQYXJhbWV0ZXIoe1xuICAgICAgICBOYW1lOiBzZWNyZXRJZGVudGlmaWVyLnZlcnNpb25cbiAgICAgICAgICA/IGAke25hbWV9OiR7c2VjcmV0SWRlbnRpZmllci52ZXJzaW9ufWBcbiAgICAgICAgICA6IG5hbWUsXG4gICAgICAgIFdpdGhEZWNyeXB0aW9uOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICBpZiAocmVzcC5QYXJhbWV0ZXI/LlZhbHVlKSB7XG4gICAgICAgIHNlY3JldCA9IHtcbiAgICAgICAgICBuYW1lOiBzZWNyZXRJZGVudGlmaWVyLm5hbWUsXG4gICAgICAgICAgdmVyc2lvbjogcmVzcC5QYXJhbWV0ZXIuVmVyc2lvbixcbiAgICAgICAgICB2YWx1ZTogcmVzcC5QYXJhbWV0ZXIuVmFsdWUsXG4gICAgICAgICAgbGFzdFVwZGF0ZWQ6IHJlc3AuUGFyYW1ldGVyLkxhc3RNb2RpZmllZERhdGUsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB0aHJvdyBTZWNyZXRFcnJvci5jcmVhdGVJbnN0YW5jZShlcnIgYXMgRXJyb3IpO1xuICAgIH1cblxuICAgIGlmICghc2VjcmV0KSB7XG4gICAgICB0aHJvdyBuZXcgU2VjcmV0RXJyb3IoXG4gICAgICAgIGBUaGUgdmFsdWUgb2Ygc2VjcmV0ICcke3NlY3JldElkZW50aWZpZXIubmFtZX0nIGlzIHVuZGVmaW5lZGBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlY3JldDtcbiAgfTtcblxuICAvKipcbiAgICogTGlzdCBzZWNyZXRzIGZyb20gU1NNIHBhcmFtZXRlciBzdG9yZS5cbiAgICovXG4gIHB1YmxpYyBsaXN0U2VjcmV0cyA9IGFzeW5jIChcbiAgICBiYWNrZW5kSWRlbnRpZmllcjogQmFja2VuZElkZW50aWZpZXIgfCBBcHBJZFxuICApOiBQcm9taXNlPFNlY3JldExpc3RJdGVtW10+ID0+IHtcbiAgICBjb25zdCBwYXRoID0gdGhpcy5nZXRQYXJhbWV0ZXJQcmVmaXgoYmFja2VuZElkZW50aWZpZXIpO1xuICAgIGNvbnN0IHJlc3VsdDogU2VjcmV0TGlzdEl0ZW1bXSA9IFtdO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLnNzbUNsaWVudC5nZXRQYXJhbWV0ZXJzQnlQYXRoKHtcbiAgICAgICAgUGF0aDogcGF0aCxcbiAgICAgICAgV2l0aERlY3J5cHRpb246IHRydWUsXG4gICAgICB9KTtcblxuICAgICAgcmVzcC5QYXJhbWV0ZXJzPy5mb3JFYWNoKChwYXJhbSkgPT4ge1xuICAgICAgICBpZiAoIXBhcmFtLk5hbWUgfHwgIXBhcmFtLlZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNlY3JldE5hbWUgPSBwYXJhbS5OYW1lLnNwbGl0KCcvJykucG9wKCk7XG4gICAgICAgIGlmIChzZWNyZXROYW1lKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgbmFtZTogc2VjcmV0TmFtZSxcbiAgICAgICAgICAgIHZlcnNpb246IHBhcmFtLlZlcnNpb24sXG4gICAgICAgICAgICBsYXN0VXBkYXRlZDogcGFyYW0uTGFzdE1vZGlmaWVkRGF0ZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgU2VjcmV0RXJyb3IuY3JlYXRlSW5zdGFuY2UoZXJyIGFzIEVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFNldCBhIHNlY3JldCBpbiBTU00gcGFyYW1ldGVyIHN0b3JlLlxuICAgKi9cbiAgcHVibGljIHNldFNlY3JldCA9IGFzeW5jIChcbiAgICBiYWNrZW5kSWRlbnRpZmllcjogQmFja2VuZElkZW50aWZpZXIgfCBBcHBJZCxcbiAgICBzZWNyZXROYW1lOiBzdHJpbmcsXG4gICAgc2VjcmV0VmFsdWU6IHN0cmluZ1xuICApOiBQcm9taXNlPFNlY3JldElkZW50aWZpZXI+ID0+IHtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5nZXRQYXJhbWV0ZXJGdWxsUGF0aChiYWNrZW5kSWRlbnRpZmllciwgc2VjcmV0TmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLnNzbUNsaWVudC5wdXRQYXJhbWV0ZXIoe1xuICAgICAgICBOYW1lOiBuYW1lLFxuICAgICAgICBUeXBlOiAnU2VjdXJlU3RyaW5nJyxcbiAgICAgICAgVmFsdWU6IHNlY3JldFZhbHVlLFxuICAgICAgICBEZXNjcmlwdGlvbjogYEFtcGxpZnkgU2VjcmV0YCxcbiAgICAgICAgT3ZlcndyaXRlOiB0cnVlLFxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBzZWNyZXROYW1lLFxuICAgICAgICB2ZXJzaW9uOiByZXNwLlZlcnNpb24sXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgU2VjcmV0RXJyb3IuY3JlYXRlSW5zdGFuY2UoZXJyIGFzIEVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHNlY3JldCBmcm9tIFNTTSBwYXJhbWV0ZXIgc3RvcmUuXG4gICAqL1xuICBwdWJsaWMgcmVtb3ZlU2VjcmV0ID0gYXN5bmMgKFxuICAgIGJhY2tlbmRJZGVudGlmaWVyOiBCYWNrZW5kSWRlbnRpZmllciB8IEFwcElkLFxuICAgIHNlY3JldE5hbWU6IHN0cmluZ1xuICApID0+IHtcbiAgICBjb25zdCBuYW1lID0gdGhpcy5nZXRQYXJhbWV0ZXJGdWxsUGF0aChiYWNrZW5kSWRlbnRpZmllciwgc2VjcmV0TmFtZSk7XG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IHRoaXMuc3NtQ2xpZW50LmRlbGV0ZVBhcmFtZXRlcih7XG4gICAgICAgIE5hbWU6IG5hbWUsXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHRocm93IFNlY3JldEVycm9yLmNyZWF0ZUluc3RhbmNlKGVyciBhcyBFcnJvcik7XG4gICAgfVxuICB9O1xufVxuIl19