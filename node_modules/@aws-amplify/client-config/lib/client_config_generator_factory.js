import { UnifiedClientConfigGenerator } from './unified_client_config_generator.js';
import { AuthClientConfigContributor } from './client-config-contributor/auth_client_config_contributor.js';
import { GraphqlClientConfigContributor } from './client-config-contributor/graphql_client_config_contributor.js';
import { StorageClientConfigContributor } from './client-config-contributor/storage_client_config_contributor.js';
import { ModelIntrospectionSchemaAdapter } from './client-config-contributor/model_introspection_schema_adapater.js';
import { PlatformClientConfigContributor } from './client-config-contributor/platform_client_config_contributor.js';
/**
 * Creates ClientConfigGenerators given different backend identifiers
 */
export class ClientConfigGeneratorFactory {
    fetchOutput;
    /**
     * Provide the factory with AWS credentials. These credentials will be used to configure underlying SDK clients for resolving backend output.
     */
    constructor(fetchOutput) {
        this.fetchOutput = fetchOutput;
    }
    /**
     * Returns a ClientConfigGenerator for the given BackendIdentifier type
     */
    getInstance = (credentialProvider) => {
        const modelSchemaAdapter = new ModelIntrospectionSchemaAdapter(credentialProvider);
        return new UnifiedClientConfigGenerator(this.fetchOutput, [
            new PlatformClientConfigContributor(),
            new AuthClientConfigContributor(),
            new GraphqlClientConfigContributor(modelSchemaAdapter),
            new StorageClientConfigContributor(),
        ]);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2NvbmZpZ19nZW5lcmF0b3JfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9jbGllbnRfY29uZmlnX2dlbmVyYXRvcl9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLCtEQUErRCxDQUFDO0FBQzVHLE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGtFQUFrRSxDQUFDO0FBRWxILE9BQU8sRUFBRSw4QkFBOEIsRUFBRSxNQUFNLGtFQUFrRSxDQUFDO0FBR2xILE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLG9FQUFvRSxDQUFDO0FBQ3JILE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLG1FQUFtRSxDQUFDO0FBRXBIOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDRCQUE0QjtJQUlWO0lBSDdCOztPQUVHO0lBQ0gsWUFBNkIsV0FBeUM7UUFBekMsZ0JBQVcsR0FBWCxXQUFXLENBQThCO0lBQUcsQ0FBQztJQUUxRTs7T0FFRztJQUNILFdBQVcsR0FBRyxDQUNaLGtCQUFpRCxFQUMxQixFQUFFO1FBQ3pCLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSwrQkFBK0IsQ0FDNUQsa0JBQWtCLENBQ25CLENBQUM7UUFFRixPQUFPLElBQUksNEJBQTRCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUN4RCxJQUFJLCtCQUErQixFQUFFO1lBQ3JDLElBQUksMkJBQTJCLEVBQUU7WUFDakMsSUFBSSw4QkFBOEIsQ0FBQyxrQkFBa0IsQ0FBQztZQUN0RCxJQUFJLDhCQUE4QixFQUFFO1NBQ3JDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVW5pZmllZENsaWVudENvbmZpZ0dlbmVyYXRvciB9IGZyb20gJy4vdW5pZmllZF9jbGllbnRfY29uZmlnX2dlbmVyYXRvci5qcyc7XG5pbXBvcnQgeyBBdXRoQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgfSBmcm9tICcuL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvYXV0aF9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzJztcbmltcG9ydCB7IEdyYXBocWxDbGllbnRDb25maWdDb250cmlidXRvciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy1jb250cmlidXRvci9ncmFwaHFsX2NsaWVudF9jb25maWdfY29udHJpYnV0b3IuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnR2VuZXJhdG9yIH0gZnJvbSAnLi9jbGllbnRfY29uZmlnX2dlbmVyYXRvci5qcyc7XG5pbXBvcnQgeyBTdG9yYWdlQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgfSBmcm9tICcuL2NsaWVudC1jb25maWctY29udHJpYnV0b3Ivc3RvcmFnZV9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzJztcbmltcG9ydCB7IEJhY2tlbmRPdXRwdXQgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCB7IEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyIH0gZnJvbSAnQGF3cy1zZGsvdHlwZXMnO1xuaW1wb3J0IHsgTW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy1jb250cmlidXRvci9tb2RlbF9pbnRyb3NwZWN0aW9uX3NjaGVtYV9hZGFwYXRlci5qcyc7XG5pbXBvcnQgeyBQbGF0Zm9ybUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLWNvbnRyaWJ1dG9yL3BsYXRmb3JtX2NsaWVudF9jb25maWdfY29udHJpYnV0b3IuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgQ2xpZW50Q29uZmlnR2VuZXJhdG9ycyBnaXZlbiBkaWZmZXJlbnQgYmFja2VuZCBpZGVudGlmaWVyc1xuICovXG5leHBvcnQgY2xhc3MgQ2xpZW50Q29uZmlnR2VuZXJhdG9yRmFjdG9yeSB7XG4gIC8qKlxuICAgKiBQcm92aWRlIHRoZSBmYWN0b3J5IHdpdGggQVdTIGNyZWRlbnRpYWxzLiBUaGVzZSBjcmVkZW50aWFscyB3aWxsIGJlIHVzZWQgdG8gY29uZmlndXJlIHVuZGVybHlpbmcgU0RLIGNsaWVudHMgZm9yIHJlc29sdmluZyBiYWNrZW5kIG91dHB1dC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZmV0Y2hPdXRwdXQ6ICgpID0+IFByb21pc2U8QmFja2VuZE91dHB1dD4pIHt9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBDbGllbnRDb25maWdHZW5lcmF0b3IgZm9yIHRoZSBnaXZlbiBCYWNrZW5kSWRlbnRpZmllciB0eXBlXG4gICAqL1xuICBnZXRJbnN0YW5jZSA9IChcbiAgICBjcmVkZW50aWFsUHJvdmlkZXI6IEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyXG4gICk6IENsaWVudENvbmZpZ0dlbmVyYXRvciA9PiB7XG4gICAgY29uc3QgbW9kZWxTY2hlbWFBZGFwdGVyID0gbmV3IE1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIoXG4gICAgICBjcmVkZW50aWFsUHJvdmlkZXJcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBVbmlmaWVkQ2xpZW50Q29uZmlnR2VuZXJhdG9yKHRoaXMuZmV0Y2hPdXRwdXQsIFtcbiAgICAgIG5ldyBQbGF0Zm9ybUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yKCksXG4gICAgICBuZXcgQXV0aENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yKCksXG4gICAgICBuZXcgR3JhcGhxbENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yKG1vZGVsU2NoZW1hQWRhcHRlciksXG4gICAgICBuZXcgU3RvcmFnZUNsaWVudENvbmZpZ0NvbnRyaWJ1dG9yKCksXG4gICAgXSk7XG4gIH07XG59XG4iXX0=