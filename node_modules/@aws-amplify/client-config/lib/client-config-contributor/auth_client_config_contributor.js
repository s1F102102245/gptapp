import { authOutputKey, } from '@aws-amplify/backend-output-schemas';
/**
 * Translator for the Auth portion of ClientConfig
 */
export class AuthClientConfigContributor {
    /**
     * Given some BackendOutput, contribute the Auth portion of the ClientConfig
     */
    contribute = ({ [authOutputKey]: authOutput, }) => {
        if (authOutput === undefined) {
            return {};
        }
        const parseAndAssignObject = (obj, key, value) => {
            if (value == null) {
                return;
            }
            obj[key] = JSON.parse(value);
        };
        const authClientConfig = {
            aws_user_pools_id: authOutput.payload.userPoolId,
            aws_user_pools_web_client_id: authOutput.payload.webClientId,
            aws_cognito_region: authOutput.payload.authRegion,
            aws_cognito_identity_pool_id: authOutput.payload.identityPoolId,
        };
        parseAndAssignObject(authClientConfig, 'aws_cognito_mfa_types', authOutput.payload.mfaTypes);
        parseAndAssignObject(authClientConfig, 'aws_cognito_signup_attributes', authOutput.payload.signupAttributes);
        parseAndAssignObject(authClientConfig, 'aws_cognito_username_attributes', authOutput.payload.usernameAttributes);
        parseAndAssignObject(authClientConfig, 'aws_cognito_verification_mechanisms', authOutput.payload.verificationMechanisms);
        if (authOutput.payload.mfaConfiguration) {
            authClientConfig.aws_cognito_mfa_configuration =
                authOutput.payload.mfaConfiguration;
        }
        if (authOutput.payload.passwordPolicyMinLength) {
            authClientConfig.aws_cognito_password_protection_settings = {
                passwordPolicyMinLength: Number.parseInt(authOutput.payload.passwordPolicyMinLength),
            };
            parseAndAssignObject(authClientConfig.aws_cognito_password_protection_settings, 'passwordPolicyCharacters', authOutput.payload.passwordPolicyRequirements);
        }
        return authClientConfig;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aF9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvYXV0aF9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFFTCxhQUFhLEdBQ2QsTUFBTSxxQ0FBcUMsQ0FBQztBQUc3Qzs7R0FFRztBQUNILE1BQU0sT0FBTywyQkFBMkI7SUFDdEM7O09BRUc7SUFDSCxVQUFVLEdBQUcsQ0FBQyxFQUNaLENBQUMsYUFBYSxDQUFDLEVBQUUsVUFBVSxHQUNOLEVBQTRDLEVBQUU7UUFDbkUsSUFBSSxVQUFVLEtBQUssU0FBUyxFQUFFO1lBQzVCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFDRCxNQUFNLG9CQUFvQixHQUFHLENBQzNCLEdBQU0sRUFDTixHQUFZLEVBQ1osS0FBeUIsRUFDekIsRUFBRTtZQUNGLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDakIsT0FBTzthQUNSO1lBQ0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDO1FBRUYsTUFBTSxnQkFBZ0IsR0FBNkM7WUFDakUsaUJBQWlCLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxVQUFVO1lBQ2hELDRCQUE0QixFQUFFLFVBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVztZQUM1RCxrQkFBa0IsRUFBRSxVQUFVLENBQUMsT0FBTyxDQUFDLFVBQVU7WUFDakQsNEJBQTRCLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxjQUFjO1NBQ2hFLENBQUM7UUFFRixvQkFBb0IsQ0FDbEIsZ0JBQWdCLEVBQ2hCLHVCQUF1QixFQUN2QixVQUFVLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FDNUIsQ0FBQztRQUNGLG9CQUFvQixDQUNsQixnQkFBZ0IsRUFDaEIsK0JBQStCLEVBQy9CLFVBQVUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQ3BDLENBQUM7UUFDRixvQkFBb0IsQ0FDbEIsZ0JBQWdCLEVBQ2hCLGlDQUFpQyxFQUNqQyxVQUFVLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUN0QyxDQUFDO1FBQ0Ysb0JBQW9CLENBQ2xCLGdCQUFnQixFQUNoQixxQ0FBcUMsRUFDckMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FDMUMsQ0FBQztRQUVGLElBQUksVUFBVSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRTtZQUN2QyxnQkFBZ0IsQ0FBQyw2QkFBNkI7Z0JBQzVDLFVBQVUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUM7U0FDdkM7UUFFRCxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLEVBQUU7WUFDOUMsZ0JBQWdCLENBQUMsd0NBQXdDLEdBQUc7Z0JBQzFELHVCQUF1QixFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQ3RDLFVBQVUsQ0FBQyxPQUFPLENBQUMsdUJBQXVCLENBQzNDO2FBQ0YsQ0FBQztZQUNGLG9CQUFvQixDQUNsQixnQkFBZ0IsQ0FBQyx3Q0FBd0MsRUFDekQsMEJBQTBCLEVBQzFCLFVBQVUsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQzlDLENBQUM7U0FDSDtRQUNELE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbGllbnRDb25maWdDb250cmlidXRvciB9IGZyb20gJy4vY2xpZW50X2NvbmZpZ19jb250cmlidXRvci5qcyc7XG5pbXBvcnQge1xuICBVbmlmaWVkQmFja2VuZE91dHB1dCxcbiAgYXV0aE91dHB1dEtleSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtb3V0cHV0LXNjaGVtYXMnO1xuaW1wb3J0IHsgQXV0aENsaWVudENvbmZpZyB9IGZyb20gJy4uL2NsaWVudC1jb25maWctdHlwZXMvYXV0aF9jbGllbnRfY29uZmlnLmpzJztcblxuLyoqXG4gKiBUcmFuc2xhdG9yIGZvciB0aGUgQXV0aCBwb3J0aW9uIG9mIENsaWVudENvbmZpZ1xuICovXG5leHBvcnQgY2xhc3MgQXV0aENsaWVudENvbmZpZ0NvbnRyaWJ1dG9yIGltcGxlbWVudHMgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3Ige1xuICAvKipcbiAgICogR2l2ZW4gc29tZSBCYWNrZW5kT3V0cHV0LCBjb250cmlidXRlIHRoZSBBdXRoIHBvcnRpb24gb2YgdGhlIENsaWVudENvbmZpZ1xuICAgKi9cbiAgY29udHJpYnV0ZSA9ICh7XG4gICAgW2F1dGhPdXRwdXRLZXldOiBhdXRoT3V0cHV0LFxuICB9OiBVbmlmaWVkQmFja2VuZE91dHB1dCk6IEF1dGhDbGllbnRDb25maWcgfCBSZWNvcmQ8c3RyaW5nLCBuZXZlcj4gPT4ge1xuICAgIGlmIChhdXRoT3V0cHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgY29uc3QgcGFyc2VBbmRBc3NpZ25PYmplY3QgPSA8VD4oXG4gICAgICBvYmo6IFQsXG4gICAgICBrZXk6IGtleW9mIFQsXG4gICAgICB2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkXG4gICAgKSA9PiB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBvYmpba2V5XSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgIH07XG5cbiAgICBjb25zdCBhdXRoQ2xpZW50Q29uZmlnOiBBdXRoQ2xpZW50Q29uZmlnIHwgUmVjb3JkPHN0cmluZywgbmV2ZXI+ID0ge1xuICAgICAgYXdzX3VzZXJfcG9vbHNfaWQ6IGF1dGhPdXRwdXQucGF5bG9hZC51c2VyUG9vbElkLFxuICAgICAgYXdzX3VzZXJfcG9vbHNfd2ViX2NsaWVudF9pZDogYXV0aE91dHB1dC5wYXlsb2FkLndlYkNsaWVudElkLFxuICAgICAgYXdzX2NvZ25pdG9fcmVnaW9uOiBhdXRoT3V0cHV0LnBheWxvYWQuYXV0aFJlZ2lvbixcbiAgICAgIGF3c19jb2duaXRvX2lkZW50aXR5X3Bvb2xfaWQ6IGF1dGhPdXRwdXQucGF5bG9hZC5pZGVudGl0eVBvb2xJZCxcbiAgICB9O1xuXG4gICAgcGFyc2VBbmRBc3NpZ25PYmplY3QoXG4gICAgICBhdXRoQ2xpZW50Q29uZmlnLFxuICAgICAgJ2F3c19jb2duaXRvX21mYV90eXBlcycsXG4gICAgICBhdXRoT3V0cHV0LnBheWxvYWQubWZhVHlwZXNcbiAgICApO1xuICAgIHBhcnNlQW5kQXNzaWduT2JqZWN0KFxuICAgICAgYXV0aENsaWVudENvbmZpZyxcbiAgICAgICdhd3NfY29nbml0b19zaWdudXBfYXR0cmlidXRlcycsXG4gICAgICBhdXRoT3V0cHV0LnBheWxvYWQuc2lnbnVwQXR0cmlidXRlc1xuICAgICk7XG4gICAgcGFyc2VBbmRBc3NpZ25PYmplY3QoXG4gICAgICBhdXRoQ2xpZW50Q29uZmlnLFxuICAgICAgJ2F3c19jb2duaXRvX3VzZXJuYW1lX2F0dHJpYnV0ZXMnLFxuICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLnVzZXJuYW1lQXR0cmlidXRlc1xuICAgICk7XG4gICAgcGFyc2VBbmRBc3NpZ25PYmplY3QoXG4gICAgICBhdXRoQ2xpZW50Q29uZmlnLFxuICAgICAgJ2F3c19jb2duaXRvX3ZlcmlmaWNhdGlvbl9tZWNoYW5pc21zJyxcbiAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC52ZXJpZmljYXRpb25NZWNoYW5pc21zXG4gICAgKTtcblxuICAgIGlmIChhdXRoT3V0cHV0LnBheWxvYWQubWZhQ29uZmlndXJhdGlvbikge1xuICAgICAgYXV0aENsaWVudENvbmZpZy5hd3NfY29nbml0b19tZmFfY29uZmlndXJhdGlvbiA9XG4gICAgICAgIGF1dGhPdXRwdXQucGF5bG9hZC5tZmFDb25maWd1cmF0aW9uO1xuICAgIH1cblxuICAgIGlmIChhdXRoT3V0cHV0LnBheWxvYWQucGFzc3dvcmRQb2xpY3lNaW5MZW5ndGgpIHtcbiAgICAgIGF1dGhDbGllbnRDb25maWcuYXdzX2NvZ25pdG9fcGFzc3dvcmRfcHJvdGVjdGlvbl9zZXR0aW5ncyA9IHtcbiAgICAgICAgcGFzc3dvcmRQb2xpY3lNaW5MZW5ndGg6IE51bWJlci5wYXJzZUludChcbiAgICAgICAgICBhdXRoT3V0cHV0LnBheWxvYWQucGFzc3dvcmRQb2xpY3lNaW5MZW5ndGhcbiAgICAgICAgKSxcbiAgICAgIH07XG4gICAgICBwYXJzZUFuZEFzc2lnbk9iamVjdChcbiAgICAgICAgYXV0aENsaWVudENvbmZpZy5hd3NfY29nbml0b19wYXNzd29yZF9wcm90ZWN0aW9uX3NldHRpbmdzLFxuICAgICAgICAncGFzc3dvcmRQb2xpY3lDaGFyYWN0ZXJzJyxcbiAgICAgICAgYXV0aE91dHB1dC5wYXlsb2FkLnBhc3N3b3JkUG9saWN5UmVxdWlyZW1lbnRzXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXV0aENsaWVudENvbmZpZztcbiAgfTtcbn1cbiJdfQ==