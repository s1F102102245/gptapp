import { graphqlOutputKey, } from '@aws-amplify/backend-output-schemas';
/**
 * Translator for the Graphql API portion of ClientConfig
 */
export class GraphqlClientConfigContributor {
    modelIntrospectionSchemaAdapter;
    /**
     * Constructor
     * @param modelIntrospectionSchemaAdapter the adapter to provide the model introspection schema from s3 uri
     */
    constructor(modelIntrospectionSchemaAdapter) {
        this.modelIntrospectionSchemaAdapter = modelIntrospectionSchemaAdapter;
    }
    /**
     * Given some BackendOutput, contribute the Graphql API portion of the client config
     */
    contribute = async ({ [graphqlOutputKey]: graphqlOutput, }) => {
        if (graphqlOutput === undefined) {
            return {};
        }
        const config = {
            aws_appsync_graphqlEndpoint: graphqlOutput.payload.awsAppsyncApiEndpoint,
            aws_appsync_region: graphqlOutput.payload.awsAppsyncRegion,
            aws_appsync_apiKey: graphqlOutput.payload.awsAppsyncApiKey,
            aws_appsync_authenticationType: graphqlOutput.payload.awsAppsyncAuthenticationType,
            aws_appsync_additionalAuthenticationTypes: graphqlOutput.payload.awsAppsyncAdditionalAuthenticationTypes,
            aws_appsync_conflictResolutionMode: graphqlOutput.payload.awsAppsyncConflictResolutionMode,
        };
        const modelIntrospection = await this.modelIntrospectionSchemaAdapter.getModelIntrospectionSchemaFromS3Uri(graphqlOutput.payload.amplifyApiModelSchemaS3Uri);
        if (modelIntrospection) {
            config.modelIntrospection = modelIntrospection;
        }
        return config;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbF9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC1jb25maWctY29udHJpYnV0b3IvZ3JhcGhxbF9jbGllbnRfY29uZmlnX2NvbnRyaWJ1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFFTCxnQkFBZ0IsR0FDakIsTUFBTSxxQ0FBcUMsQ0FBQztBQUk3Qzs7R0FFRztBQUNILE1BQU0sT0FBTyw4QkFBOEI7SUFNdEI7SUFMbkI7OztPQUdHO0lBQ0gsWUFDbUIsK0JBQWdFO1FBQWhFLG9DQUErQixHQUEvQiwrQkFBK0IsQ0FBaUM7SUFDaEYsQ0FBQztJQUVKOztPQUVHO0lBQ0gsVUFBVSxHQUFHLEtBQUssRUFBRSxFQUNsQixDQUFDLGdCQUFnQixDQUFDLEVBQUUsYUFBYSxHQUNaLEVBRXJCLEVBQUU7UUFDRixJQUFJLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDL0IsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELE1BQU0sTUFBTSxHQUF3QjtZQUNsQywyQkFBMkIsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLHFCQUFxQjtZQUN4RSxrQkFBa0IsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLGdCQUFnQjtZQUMxRCxrQkFBa0IsRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLGdCQUFnQjtZQUMxRCw4QkFBOEIsRUFDNUIsYUFBYSxDQUFDLE9BQU8sQ0FBQyw0QkFBNEI7WUFDcEQseUNBQXlDLEVBQ3ZDLGFBQWEsQ0FBQyxPQUFPLENBQUMsdUNBQXVDO1lBQy9ELGtDQUFrQyxFQUNoQyxhQUFhLENBQUMsT0FBTyxDQUFDLGdDQUFnQztTQUN6RCxDQUFDO1FBRUYsTUFBTSxrQkFBa0IsR0FDdEIsTUFBTSxJQUFJLENBQUMsK0JBQStCLENBQUMsb0NBQW9DLENBQzdFLGFBQWEsQ0FBQyxPQUFPLENBQUMsMEJBQTBCLENBQ2pELENBQUM7UUFFSixJQUFJLGtCQUFrQixFQUFFO1lBQ3RCLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztTQUNoRDtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgfSBmcm9tICcuL2NsaWVudF9jb25maWdfY29udHJpYnV0b3IuanMnO1xuaW1wb3J0IHtcbiAgVW5pZmllZEJhY2tlbmRPdXRwdXQsXG4gIGdyYXBocWxPdXRwdXRLZXksXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLW91dHB1dC1zY2hlbWFzJztcbmltcG9ydCB7IEdyYXBocWxDbGllbnRDb25maWcgfSBmcm9tICcuLi9jbGllbnQtY29uZmlnLXR5cGVzL2dyYXBocWxfY2xpZW50X2NvbmZpZy5qcyc7XG5pbXBvcnQgeyBNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyIH0gZnJvbSAnLi9tb2RlbF9pbnRyb3NwZWN0aW9uX3NjaGVtYV9hZGFwYXRlci5qcyc7XG5cbi8qKlxuICogVHJhbnNsYXRvciBmb3IgdGhlIEdyYXBocWwgQVBJIHBvcnRpb24gb2YgQ2xpZW50Q29uZmlnXG4gKi9cbmV4cG9ydCBjbGFzcyBHcmFwaHFsQ2xpZW50Q29uZmlnQ29udHJpYnV0b3IgaW1wbGVtZW50cyBDbGllbnRDb25maWdDb250cmlidXRvciB7XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gbW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hQWRhcHRlciB0aGUgYWRhcHRlciB0byBwcm92aWRlIHRoZSBtb2RlbCBpbnRyb3NwZWN0aW9uIHNjaGVtYSBmcm9tIHMzIHVyaVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBtb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyOiBNb2RlbEludHJvc3BlY3Rpb25TY2hlbWFBZGFwdGVyXG4gICkge31cblxuICAvKipcbiAgICogR2l2ZW4gc29tZSBCYWNrZW5kT3V0cHV0LCBjb250cmlidXRlIHRoZSBHcmFwaHFsIEFQSSBwb3J0aW9uIG9mIHRoZSBjbGllbnQgY29uZmlnXG4gICAqL1xuICBjb250cmlidXRlID0gYXN5bmMgKHtcbiAgICBbZ3JhcGhxbE91dHB1dEtleV06IGdyYXBocWxPdXRwdXQsXG4gIH06IFVuaWZpZWRCYWNrZW5kT3V0cHV0KTogUHJvbWlzZTxcbiAgICBHcmFwaHFsQ2xpZW50Q29uZmlnIHwgUmVjb3JkPHN0cmluZywgbmV2ZXI+XG4gID4gPT4ge1xuICAgIGlmIChncmFwaHFsT3V0cHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgY29uc3QgY29uZmlnOiBHcmFwaHFsQ2xpZW50Q29uZmlnID0ge1xuICAgICAgYXdzX2FwcHN5bmNfZ3JhcGhxbEVuZHBvaW50OiBncmFwaHFsT3V0cHV0LnBheWxvYWQuYXdzQXBwc3luY0FwaUVuZHBvaW50LFxuICAgICAgYXdzX2FwcHN5bmNfcmVnaW9uOiBncmFwaHFsT3V0cHV0LnBheWxvYWQuYXdzQXBwc3luY1JlZ2lvbixcbiAgICAgIGF3c19hcHBzeW5jX2FwaUtleTogZ3JhcGhxbE91dHB1dC5wYXlsb2FkLmF3c0FwcHN5bmNBcGlLZXksXG4gICAgICBhd3NfYXBwc3luY19hdXRoZW50aWNhdGlvblR5cGU6XG4gICAgICAgIGdyYXBocWxPdXRwdXQucGF5bG9hZC5hd3NBcHBzeW5jQXV0aGVudGljYXRpb25UeXBlLFxuICAgICAgYXdzX2FwcHN5bmNfYWRkaXRpb25hbEF1dGhlbnRpY2F0aW9uVHlwZXM6XG4gICAgICAgIGdyYXBocWxPdXRwdXQucGF5bG9hZC5hd3NBcHBzeW5jQWRkaXRpb25hbEF1dGhlbnRpY2F0aW9uVHlwZXMsXG4gICAgICBhd3NfYXBwc3luY19jb25mbGljdFJlc29sdXRpb25Nb2RlOlxuICAgICAgICBncmFwaHFsT3V0cHV0LnBheWxvYWQuYXdzQXBwc3luY0NvbmZsaWN0UmVzb2x1dGlvbk1vZGUsXG4gICAgfTtcblxuICAgIGNvbnN0IG1vZGVsSW50cm9zcGVjdGlvbiA9XG4gICAgICBhd2FpdCB0aGlzLm1vZGVsSW50cm9zcGVjdGlvblNjaGVtYUFkYXB0ZXIuZ2V0TW9kZWxJbnRyb3NwZWN0aW9uU2NoZW1hRnJvbVMzVXJpKFxuICAgICAgICBncmFwaHFsT3V0cHV0LnBheWxvYWQuYW1wbGlmeUFwaU1vZGVsU2NoZW1hUzNVcmlcbiAgICAgICk7XG5cbiAgICBpZiAobW9kZWxJbnRyb3NwZWN0aW9uKSB7XG4gICAgICBjb25maWcubW9kZWxJbnRyb3NwZWN0aW9uID0gbW9kZWxJbnRyb3NwZWN0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBjb25maWc7XG4gIH07XG59XG4iXX0=