import fs from 'fs';
import path from 'path';
import { ClientConfigFormat } from '../index.js';
const configFileName = 'amplifyconfiguration';
/**
 * Get path to config file
 * @param outDir - path to directory where config is written. If not provided defaults to current process working directory.
 * @param format - The format which the configuration should be exported into. Defaults to JSON.
 * returns path to config file
 */
export const getClientConfigPath = async (outDir, format) => {
    const defaultArgs = {
        out: process.cwd(),
        format: ClientConfigFormat.JSON,
    };
    format = format || defaultArgs.format;
    let targetPath = defaultArgs.out;
    if (outDir) {
        const outDirIsFile = fs.lstatSync(outDir).isFile();
        if (!outDirIsFile) {
            targetPath = path.isAbsolute(outDir)
                ? outDir
                : path.resolve(process.cwd(), outDir);
        }
    }
    let extension;
    switch (format) {
        case ClientConfigFormat.JSON_MOBILE:
            extension = 'json';
            break;
        default:
            extension = format;
            break;
    }
    targetPath = path.resolve(targetPath, `${configFileName}.${extension}`);
    return targetPath;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2NsaWVudF9jb25maWdfcGF0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXRocy9nZXRfY2xpZW50X2NvbmZpZ19wYXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUNwQixPQUFPLElBQUksTUFBTSxNQUFNLENBQUM7QUFDeEIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRWpELE1BQU0sY0FBYyxHQUFHLHNCQUFzQixDQUFDO0FBRTlDOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUJBQW1CLEdBQUcsS0FBSyxFQUN0QyxNQUFlLEVBQ2YsTUFBMkIsRUFDM0IsRUFBRTtJQUNGLE1BQU0sV0FBVyxHQUFHO1FBQ2xCLEdBQUcsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFO1FBQ2xCLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxJQUFJO0tBQ2hDLENBQUM7SUFDRixNQUFNLEdBQUcsTUFBTSxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUM7SUFFdEMsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQztJQUVqQyxJQUFJLE1BQU0sRUFBRTtRQUNWLE1BQU0sWUFBWSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbkQsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7Z0JBQ2xDLENBQUMsQ0FBQyxNQUFNO2dCQUNSLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztTQUN6QztLQUNGO0lBRUQsSUFBSSxTQUFpQixDQUFDO0lBQ3RCLFFBQVEsTUFBTSxFQUFFO1FBQ2QsS0FBSyxrQkFBa0IsQ0FBQyxXQUFXO1lBQ2pDLFNBQVMsR0FBRyxNQUFNLENBQUM7WUFDbkIsTUFBTTtRQUNSO1lBQ0UsU0FBUyxHQUFHLE1BQU0sQ0FBQztZQUNuQixNQUFNO0tBQ1Q7SUFFRCxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsR0FBRyxjQUFjLElBQUksU0FBUyxFQUFFLENBQUMsQ0FBQztJQUN4RSxPQUFPLFVBQVUsQ0FBQztBQUNwQixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdGb3JtYXQgfSBmcm9tICcuLi9pbmRleC5qcyc7XG5cbmNvbnN0IGNvbmZpZ0ZpbGVOYW1lID0gJ2FtcGxpZnljb25maWd1cmF0aW9uJztcblxuLyoqXG4gKiBHZXQgcGF0aCB0byBjb25maWcgZmlsZVxuICogQHBhcmFtIG91dERpciAtIHBhdGggdG8gZGlyZWN0b3J5IHdoZXJlIGNvbmZpZyBpcyB3cml0dGVuLiBJZiBub3QgcHJvdmlkZWQgZGVmYXVsdHMgdG8gY3VycmVudCBwcm9jZXNzIHdvcmtpbmcgZGlyZWN0b3J5LlxuICogQHBhcmFtIGZvcm1hdCAtIFRoZSBmb3JtYXQgd2hpY2ggdGhlIGNvbmZpZ3VyYXRpb24gc2hvdWxkIGJlIGV4cG9ydGVkIGludG8uIERlZmF1bHRzIHRvIEpTT04uXG4gKiByZXR1cm5zIHBhdGggdG8gY29uZmlnIGZpbGVcbiAqL1xuZXhwb3J0IGNvbnN0IGdldENsaWVudENvbmZpZ1BhdGggPSBhc3luYyAoXG4gIG91dERpcj86IHN0cmluZyxcbiAgZm9ybWF0PzogQ2xpZW50Q29uZmlnRm9ybWF0XG4pID0+IHtcbiAgY29uc3QgZGVmYXVsdEFyZ3MgPSB7XG4gICAgb3V0OiBwcm9jZXNzLmN3ZCgpLFxuICAgIGZvcm1hdDogQ2xpZW50Q29uZmlnRm9ybWF0LkpTT04sXG4gIH07XG4gIGZvcm1hdCA9IGZvcm1hdCB8fCBkZWZhdWx0QXJncy5mb3JtYXQ7XG5cbiAgbGV0IHRhcmdldFBhdGggPSBkZWZhdWx0QXJncy5vdXQ7XG5cbiAgaWYgKG91dERpcikge1xuICAgIGNvbnN0IG91dERpcklzRmlsZSA9IGZzLmxzdGF0U3luYyhvdXREaXIpLmlzRmlsZSgpO1xuICAgIGlmICghb3V0RGlySXNGaWxlKSB7XG4gICAgICB0YXJnZXRQYXRoID0gcGF0aC5pc0Fic29sdXRlKG91dERpcilcbiAgICAgICAgPyBvdXREaXJcbiAgICAgICAgOiBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgb3V0RGlyKTtcbiAgICB9XG4gIH1cblxuICBsZXQgZXh0ZW5zaW9uOiBzdHJpbmc7XG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSBDbGllbnRDb25maWdGb3JtYXQuSlNPTl9NT0JJTEU6XG4gICAgICBleHRlbnNpb24gPSAnanNvbic7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgZXh0ZW5zaW9uID0gZm9ybWF0O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICB0YXJnZXRQYXRoID0gcGF0aC5yZXNvbHZlKHRhcmdldFBhdGgsIGAke2NvbmZpZ0ZpbGVOYW1lfS4ke2V4dGVuc2lvbn1gKTtcbiAgcmV0dXJuIHRhcmdldFBhdGg7XG59O1xuIl19