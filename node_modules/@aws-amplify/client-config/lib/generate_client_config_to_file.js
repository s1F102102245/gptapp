import { generateClientConfig } from './generate_client_config.js';
import { ClientConfigWriter } from './client-config-writer/client_config_writer.js';
import { getClientConfigPath } from './paths/index.js';
import { ClientConfigFormatter } from './client-config-writer/client_config_formatter.js';
import { ClientConfigConverter } from './client-config-writer/client_config_converter.js';
import { fileURLToPath } from 'url';
import * as fsp from 'fs/promises';
/**
 * Main entry point for generating client config and writing to a file
 */
export const generateClientConfigToFile = async (credentialProvider, backendIdentifier, outDir, format) => {
    const packageJson = await readPackageJson();
    const clientConfigWriter = new ClientConfigWriter(getClientConfigPath, new ClientConfigFormatter(new ClientConfigConverter(packageJson.name, packageJson.version)));
    const clientConfig = await generateClientConfig(credentialProvider, backendIdentifier);
    await clientConfigWriter.writeClientConfig(clientConfig, outDir, format);
};
const readPackageJson = async () => {
    const packageJsonPath = fileURLToPath(new URL('../package.json', import.meta.url));
    return JSON.parse(await fsp.readFile(packageJsonPath, 'utf-8'));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY2xpZW50X2NvbmZpZ190b19maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2dlbmVyYXRlX2NsaWVudF9jb25maWdfdG9fZmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUVwRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUV2RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMxRixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUMxRixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxHQUFHLE1BQU0sYUFBYSxDQUFDO0FBRW5DOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsS0FBSyxFQUM3QyxrQkFBaUQsRUFDakQsaUJBQTRDLEVBQzVDLE1BQWUsRUFDZixNQUEyQixFQUNaLEVBQUU7SUFDakIsTUFBTSxXQUFXLEdBQUcsTUFBTSxlQUFlLEVBQUUsQ0FBQztJQUU1QyxNQUFNLGtCQUFrQixHQUFHLElBQUksa0JBQWtCLENBQy9DLG1CQUFtQixFQUNuQixJQUFJLHFCQUFxQixDQUN2QixJQUFJLHFCQUFxQixDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUNqRSxDQUNGLENBQUM7SUFFRixNQUFNLFlBQVksR0FBRyxNQUFNLG9CQUFvQixDQUM3QyxrQkFBa0IsRUFDbEIsaUJBQWlCLENBQ2xCLENBQUM7SUFDRixNQUFNLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDM0UsQ0FBQyxDQUFDO0FBRUYsTUFBTSxlQUFlLEdBQUcsS0FBSyxJQUcxQixFQUFFO0lBQ0gsTUFBTSxlQUFlLEdBQUcsYUFBYSxDQUNuQyxJQUFJLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUM1QyxDQUFDO0lBQ0YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNsRSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlciB9IGZyb20gJ0Bhd3Mtc2RrL3R5cGVzJztcbmltcG9ydCB7IGdlbmVyYXRlQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9nZW5lcmF0ZV9jbGllbnRfY29uZmlnLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ1dyaXRlciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ193cml0ZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnRm9ybWF0IH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHsgZ2V0Q2xpZW50Q29uZmlnUGF0aCB9IGZyb20gJy4vcGF0aHMvaW5kZXguanMnO1xuaW1wb3J0IHsgRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9kZXBsb3llZC1iYWNrZW5kLWNsaWVudCc7XG5pbXBvcnQgeyBDbGllbnRDb25maWdGb3JtYXR0ZXIgfSBmcm9tICcuL2NsaWVudC1jb25maWctd3JpdGVyL2NsaWVudF9jb25maWdfZm9ybWF0dGVyLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0NvbnZlcnRlciB9IGZyb20gJy4vY2xpZW50LWNvbmZpZy13cml0ZXIvY2xpZW50X2NvbmZpZ19jb252ZXJ0ZXIuanMnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5pbXBvcnQgKiBhcyBmc3AgZnJvbSAnZnMvcHJvbWlzZXMnO1xuXG4vKipcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIGdlbmVyYXRpbmcgY2xpZW50IGNvbmZpZyBhbmQgd3JpdGluZyB0byBhIGZpbGVcbiAqL1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlID0gYXN5bmMgKFxuICBjcmVkZW50aWFsUHJvdmlkZXI6IEF3c0NyZWRlbnRpYWxJZGVudGl0eVByb3ZpZGVyLFxuICBiYWNrZW5kSWRlbnRpZmllcjogRGVwbG95ZWRCYWNrZW5kSWRlbnRpZmllcixcbiAgb3V0RGlyPzogc3RyaW5nLFxuICBmb3JtYXQ/OiBDbGllbnRDb25maWdGb3JtYXRcbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBwYWNrYWdlSnNvbiA9IGF3YWl0IHJlYWRQYWNrYWdlSnNvbigpO1xuXG4gIGNvbnN0IGNsaWVudENvbmZpZ1dyaXRlciA9IG5ldyBDbGllbnRDb25maWdXcml0ZXIoXG4gICAgZ2V0Q2xpZW50Q29uZmlnUGF0aCxcbiAgICBuZXcgQ2xpZW50Q29uZmlnRm9ybWF0dGVyKFxuICAgICAgbmV3IENsaWVudENvbmZpZ0NvbnZlcnRlcihwYWNrYWdlSnNvbi5uYW1lLCBwYWNrYWdlSnNvbi52ZXJzaW9uKVxuICAgIClcbiAgKTtcblxuICBjb25zdCBjbGllbnRDb25maWcgPSBhd2FpdCBnZW5lcmF0ZUNsaWVudENvbmZpZyhcbiAgICBjcmVkZW50aWFsUHJvdmlkZXIsXG4gICAgYmFja2VuZElkZW50aWZpZXJcbiAgKTtcbiAgYXdhaXQgY2xpZW50Q29uZmlnV3JpdGVyLndyaXRlQ2xpZW50Q29uZmlnKGNsaWVudENvbmZpZywgb3V0RGlyLCBmb3JtYXQpO1xufTtcblxuY29uc3QgcmVhZFBhY2thZ2VKc29uID0gYXN5bmMgKCk6IFByb21pc2U8e1xuICBuYW1lOiBzdHJpbmc7XG4gIHZlcnNpb246IHN0cmluZztcbn0+ID0+IHtcbiAgY29uc3QgcGFja2FnZUpzb25QYXRoID0gZmlsZVVSTFRvUGF0aChcbiAgICBuZXcgVVJMKCcuLi9wYWNrYWdlLmpzb24nLCBpbXBvcnQubWV0YS51cmwpXG4gICk7XG4gIHJldHVybiBKU09OLnBhcnNlKGF3YWl0IGZzcC5yZWFkRmlsZShwYWNrYWdlSnNvblBhdGgsICd1dGYtOCcpKTtcbn07XG4iXX0=