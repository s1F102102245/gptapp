import { ClientConfigGeneratorFactory } from './client_config_generator_factory.js';
import { BackendOutputClientFactory, } from '@aws-amplify/deployed-backend-client';
// Because this function is acting as the DI container for this functionality, there is no way to test it without
// exposing the ClientConfigGeneratorFactory in the method signature. For this reason, we're turning off coverage for this file
// All this function should do is construct the factory and delegate to generateClientConfig()
// TODO this functionality should be tested in an E2E test once we've worked out a strategy to use real AWS credentials in tests
// https://github.com/aws-amplify/amplify-backend/issues/46
/* c8 ignore start */
/**
 * Main entry point for generating client config
 */
export const generateClientConfig = async (credentialProvider, backendIdentifier) => {
    const backendOutputClient = BackendOutputClientFactory.getInstance({
        credentials: credentialProvider,
    });
    return new ClientConfigGeneratorFactory(() => backendOutputClient.getOutput(backendIdentifier))
        .getInstance(credentialProvider)
        .generateClientConfig();
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY2xpZW50X2NvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9nZW5lcmF0ZV9jbGllbnRfY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBRXBGLE9BQU8sRUFDTCwwQkFBMEIsR0FFM0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUU5QyxpSEFBaUg7QUFDakgsK0hBQStIO0FBQy9ILDhGQUE4RjtBQUM5RixnSUFBZ0k7QUFDaEksMkRBQTJEO0FBQzNELHFCQUFxQjtBQUVyQjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEtBQUssRUFDdkMsa0JBQWlELEVBQ2pELGlCQUE0QyxFQUNyQixFQUFFO0lBQ3pCLE1BQU0sbUJBQW1CLEdBQUcsMEJBQTBCLENBQUMsV0FBVyxDQUFDO1FBQ2pFLFdBQVcsRUFBRSxrQkFBa0I7S0FDaEMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxJQUFJLDRCQUE0QixDQUFDLEdBQUcsRUFBRSxDQUMzQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FDakQ7U0FDRSxXQUFXLENBQUMsa0JBQWtCLENBQUM7U0FDL0Isb0JBQW9CLEVBQUUsQ0FBQztBQUM1QixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlciB9IGZyb20gJ0Bhd3Mtc2RrL3R5cGVzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvckZhY3RvcnkgfSBmcm9tICcuL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yX2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnIH0gZnJvbSAnLi9jbGllbnQtY29uZmlnLXR5cGVzL2NsaWVudF9jb25maWcuanMnO1xuaW1wb3J0IHtcbiAgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnksXG4gIERlcGxveWVkQmFja2VuZElkZW50aWZpZXIsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9kZXBsb3llZC1iYWNrZW5kLWNsaWVudCc7XG5cbi8vIEJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBhY3RpbmcgYXMgdGhlIERJIGNvbnRhaW5lciBmb3IgdGhpcyBmdW5jdGlvbmFsaXR5LCB0aGVyZSBpcyBubyB3YXkgdG8gdGVzdCBpdCB3aXRob3V0XG4vLyBleHBvc2luZyB0aGUgQ2xpZW50Q29uZmlnR2VuZXJhdG9yRmFjdG9yeSBpbiB0aGUgbWV0aG9kIHNpZ25hdHVyZS4gRm9yIHRoaXMgcmVhc29uLCB3ZSdyZSB0dXJuaW5nIG9mZiBjb3ZlcmFnZSBmb3IgdGhpcyBmaWxlXG4vLyBBbGwgdGhpcyBmdW5jdGlvbiBzaG91bGQgZG8gaXMgY29uc3RydWN0IHRoZSBmYWN0b3J5IGFuZCBkZWxlZ2F0ZSB0byBnZW5lcmF0ZUNsaWVudENvbmZpZygpXG4vLyBUT0RPIHRoaXMgZnVuY3Rpb25hbGl0eSBzaG91bGQgYmUgdGVzdGVkIGluIGFuIEUyRSB0ZXN0IG9uY2Ugd2UndmUgd29ya2VkIG91dCBhIHN0cmF0ZWd5IHRvIHVzZSByZWFsIEFXUyBjcmVkZW50aWFscyBpbiB0ZXN0c1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2F3cy1hbXBsaWZ5L2FtcGxpZnktYmFja2VuZC9pc3N1ZXMvNDZcbi8qIGM4IGlnbm9yZSBzdGFydCAqL1xuXG4vKipcbiAqIE1haW4gZW50cnkgcG9pbnQgZm9yIGdlbmVyYXRpbmcgY2xpZW50IGNvbmZpZ1xuICovXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVDbGllbnRDb25maWcgPSBhc3luYyAoXG4gIGNyZWRlbnRpYWxQcm92aWRlcjogQXdzQ3JlZGVudGlhbElkZW50aXR5UHJvdmlkZXIsXG4gIGJhY2tlbmRJZGVudGlmaWVyOiBEZXBsb3llZEJhY2tlbmRJZGVudGlmaWVyXG4pOiBQcm9taXNlPENsaWVudENvbmZpZz4gPT4ge1xuICBjb25zdCBiYWNrZW5kT3V0cHV0Q2xpZW50ID0gQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnkuZ2V0SW5zdGFuY2Uoe1xuICAgIGNyZWRlbnRpYWxzOiBjcmVkZW50aWFsUHJvdmlkZXIsXG4gIH0pO1xuICByZXR1cm4gbmV3IENsaWVudENvbmZpZ0dlbmVyYXRvckZhY3RvcnkoKCkgPT5cbiAgICBiYWNrZW5kT3V0cHV0Q2xpZW50LmdldE91dHB1dChiYWNrZW5kSWRlbnRpZmllcilcbiAgKVxuICAgIC5nZXRJbnN0YW5jZShjcmVkZW50aWFsUHJvdmlkZXIpXG4gICAgLmdlbmVyYXRlQ2xpZW50Q29uZmlnKCk7XG59O1xuIl19