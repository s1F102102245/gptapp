import { fromNodeProviderChain } from '@aws-sdk/credential-providers';
import { EOL } from 'os';
import { loadConfig } from '@smithy/node-config-provider';
import { NODE_REGION_CONFIG_OPTIONS } from '@aws-sdk/region-config-resolver';
import { InvalidCredentialError } from './error/credential_error.js';
export const profileSetupInstruction = `To configure a new Amplify profile, use "amplify configure profile".`;
/**
 * Contains middleware functions.
 */
export class CommandMiddleware {
    /**
     * Ensure AWS credentials and region of the input profile (or 'default' if undefined) are available in the provider chain.
     * If the input profile is defined, the environment variable AWS_PROFILE will be set accordingly.
     */
    ensureAwsCredentialAndRegion = async (argv) => {
        if (argv.profile) {
            process.env.AWS_PROFILE = argv.profile;
        }
        // Check credentials.
        try {
            await fromNodeProviderChain({
                ignoreCache: true,
            })();
        }
        catch (err) {
            let errMsg;
            if (argv.profile) {
                errMsg = `Failed to load aws credentials for profile '${argv.profile}': ${err.message}.${EOL}`;
            }
            else {
                errMsg = `Failed to load default aws credentials: ${err.message}.${EOL}`;
            }
            errMsg += profileSetupInstruction;
            throw new InvalidCredentialError(errMsg, { cause: err });
        }
        // Check region.
        try {
            await loadConfig(NODE_REGION_CONFIG_OPTIONS, {
                ignoreCache: true,
            })();
        }
        catch (err) {
            let errMsg;
            if (argv.profile) {
                errMsg = `Failed to load aws region for profile '${argv.profile}': ${err.message}.${EOL}`;
            }
            else {
                errMsg = `Failed to load default aws region: ${err.message}.${EOL}`;
            }
            errMsg += profileSetupInstruction;
            throw new InvalidCredentialError(errMsg, { cause: err });
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9taWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbW1hbmRfbWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3pCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVyRSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxzRUFBc0UsQ0FBQztBQUU5Rzs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUI7OztPQUdHO0lBQ0gsNEJBQTRCLEdBQUcsS0FBSyxFQUdsQyxJQUEyQixFQUMzQixFQUFFO1FBQ0YsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDeEM7UUFFRCxxQkFBcUI7UUFDckIsSUFBSTtZQUNGLE1BQU0scUJBQXFCLENBQUM7Z0JBQzFCLFdBQVcsRUFBRSxJQUFJO2FBQ2xCLENBQUMsRUFBRSxDQUFDO1NBQ047UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNaLElBQUksTUFBYyxDQUFDO1lBQ25CLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDaEIsTUFBTSxHQUFHLCtDQUNQLElBQUksQ0FBQyxPQUNQLE1BQU8sR0FBYSxDQUFDLE9BQU8sSUFBSSxHQUFHLEVBQUUsQ0FBQzthQUN2QztpQkFBTTtnQkFDTCxNQUFNLEdBQUcsMkNBQ04sR0FBYSxDQUFDLE9BQ2pCLElBQUksR0FBRyxFQUFFLENBQUM7YUFDWDtZQUNELE1BQU0sSUFBSSx1QkFBdUIsQ0FBQztZQUNsQyxNQUFNLElBQUksc0JBQXNCLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDMUQ7UUFFRCxnQkFBZ0I7UUFDaEIsSUFBSTtZQUNGLE1BQU0sVUFBVSxDQUFDLDBCQUEwQixFQUFFO2dCQUMzQyxXQUFXLEVBQUUsSUFBSTthQUNsQixDQUFDLEVBQUUsQ0FBQztTQUNOO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDWixJQUFJLE1BQWMsQ0FBQztZQUNuQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7Z0JBQ2hCLE1BQU0sR0FBRywwQ0FBMEMsSUFBSSxDQUFDLE9BQU8sTUFDNUQsR0FBYSxDQUFDLE9BQ2pCLElBQUksR0FBRyxFQUFFLENBQUM7YUFDWDtpQkFBTTtnQkFDTCxNQUFNLEdBQUcsc0NBQ04sR0FBYSxDQUFDLE9BQ2pCLElBQUksR0FBRyxFQUFFLENBQUM7YUFDWDtZQUNELE1BQU0sSUFBSSx1QkFBdUIsQ0FBQztZQUNsQyxNQUFNLElBQUksc0JBQXNCLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7U0FDMUQ7SUFDSCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3VtZW50c0NhbWVsQ2FzZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IGZyb21Ob2RlUHJvdmlkZXJDaGFpbiB9IGZyb20gJ0Bhd3Mtc2RrL2NyZWRlbnRpYWwtcHJvdmlkZXJzJztcbmltcG9ydCB7IEVPTCB9IGZyb20gJ29zJztcbmltcG9ydCB7IGxvYWRDb25maWcgfSBmcm9tICdAc21pdGh5L25vZGUtY29uZmlnLXByb3ZpZGVyJztcbmltcG9ydCB7IE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TIH0gZnJvbSAnQGF3cy1zZGsvcmVnaW9uLWNvbmZpZy1yZXNvbHZlcic7XG5pbXBvcnQgeyBJbnZhbGlkQ3JlZGVudGlhbEVycm9yIH0gZnJvbSAnLi9lcnJvci9jcmVkZW50aWFsX2Vycm9yLmpzJztcblxuZXhwb3J0IGNvbnN0IHByb2ZpbGVTZXR1cEluc3RydWN0aW9uID0gYFRvIGNvbmZpZ3VyZSBhIG5ldyBBbXBsaWZ5IHByb2ZpbGUsIHVzZSBcImFtcGxpZnkgY29uZmlndXJlIHByb2ZpbGVcIi5gO1xuXG4vKipcbiAqIENvbnRhaW5zIG1pZGRsZXdhcmUgZnVuY3Rpb25zLlxuICovXG5leHBvcnQgY2xhc3MgQ29tbWFuZE1pZGRsZXdhcmUge1xuICAvKipcbiAgICogRW5zdXJlIEFXUyBjcmVkZW50aWFscyBhbmQgcmVnaW9uIG9mIHRoZSBpbnB1dCBwcm9maWxlIChvciAnZGVmYXVsdCcgaWYgdW5kZWZpbmVkKSBhcmUgYXZhaWxhYmxlIGluIHRoZSBwcm92aWRlciBjaGFpbi5cbiAgICogSWYgdGhlIGlucHV0IHByb2ZpbGUgaXMgZGVmaW5lZCwgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIEFXU19QUk9GSUxFIHdpbGwgYmUgc2V0IGFjY29yZGluZ2x5LlxuICAgKi9cbiAgZW5zdXJlQXdzQ3JlZGVudGlhbEFuZFJlZ2lvbiA9IGFzeW5jIDxcbiAgICBUIGV4dGVuZHMgeyBwcm9maWxlOiBzdHJpbmcgfCB1bmRlZmluZWQgfVxuICA+KFxuICAgIGFyZ3Y6IEFyZ3VtZW50c0NhbWVsQ2FzZTxUPlxuICApID0+IHtcbiAgICBpZiAoYXJndi5wcm9maWxlKSB7XG4gICAgICBwcm9jZXNzLmVudi5BV1NfUFJPRklMRSA9IGFyZ3YucHJvZmlsZTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBjcmVkZW50aWFscy5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgZnJvbU5vZGVQcm92aWRlckNoYWluKHtcbiAgICAgICAgaWdub3JlQ2FjaGU6IHRydWUsXG4gICAgICB9KSgpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbGV0IGVyck1zZzogc3RyaW5nO1xuICAgICAgaWYgKGFyZ3YucHJvZmlsZSkge1xuICAgICAgICBlcnJNc2cgPSBgRmFpbGVkIHRvIGxvYWQgYXdzIGNyZWRlbnRpYWxzIGZvciBwcm9maWxlICcke1xuICAgICAgICAgIGFyZ3YucHJvZmlsZVxuICAgICAgICB9JzogJHsoZXJyIGFzIEVycm9yKS5tZXNzYWdlfS4ke0VPTH1gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyTXNnID0gYEZhaWxlZCB0byBsb2FkIGRlZmF1bHQgYXdzIGNyZWRlbnRpYWxzOiAke1xuICAgICAgICAgIChlcnIgYXMgRXJyb3IpLm1lc3NhZ2VcbiAgICAgICAgfS4ke0VPTH1gO1xuICAgICAgfVxuICAgICAgZXJyTXNnICs9IHByb2ZpbGVTZXR1cEluc3RydWN0aW9uO1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRDcmVkZW50aWFsRXJyb3IoZXJyTXNnLCB7IGNhdXNlOiBlcnIgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgcmVnaW9uLlxuICAgIHRyeSB7XG4gICAgICBhd2FpdCBsb2FkQ29uZmlnKE5PREVfUkVHSU9OX0NPTkZJR19PUFRJT05TLCB7XG4gICAgICAgIGlnbm9yZUNhY2hlOiB0cnVlLFxuICAgICAgfSkoKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGxldCBlcnJNc2c6IHN0cmluZztcbiAgICAgIGlmIChhcmd2LnByb2ZpbGUpIHtcbiAgICAgICAgZXJyTXNnID0gYEZhaWxlZCB0byBsb2FkIGF3cyByZWdpb24gZm9yIHByb2ZpbGUgJyR7YXJndi5wcm9maWxlfSc6ICR7XG4gICAgICAgICAgKGVyciBhcyBFcnJvcikubWVzc2FnZVxuICAgICAgICB9LiR7RU9MfWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJNc2cgPSBgRmFpbGVkIHRvIGxvYWQgZGVmYXVsdCBhd3MgcmVnaW9uOiAke1xuICAgICAgICAgIChlcnIgYXMgRXJyb3IpLm1lc3NhZ2VcbiAgICAgICAgfS4ke0VPTH1gO1xuICAgICAgfVxuICAgICAgZXJyTXNnICs9IHByb2ZpbGVTZXR1cEluc3RydWN0aW9uO1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRDcmVkZW50aWFsRXJyb3IoZXJyTXNnLCB7IGNhdXNlOiBlcnIgfSk7XG4gICAgfVxuICB9O1xufVxuIl19