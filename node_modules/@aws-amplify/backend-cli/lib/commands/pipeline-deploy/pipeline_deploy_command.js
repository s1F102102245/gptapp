import _isCI from 'is-ci';
import { handleCommandFailure } from '../../command_failure_handler.js';
/**
 * An entry point for deploy command.
 */
export class PipelineDeployCommand {
    clientConfigGenerator;
    backendDeployer;
    isCiEnvironment;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for deploy command.
     */
    constructor(clientConfigGenerator, backendDeployer, isCiEnvironment = _isCI) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendDeployer = backendDeployer;
        this.isCiEnvironment = isCiEnvironment;
        this.command = 'pipeline-deploy';
        // use false for a hidden command
        this.describe = false;
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        if (!this.isCiEnvironment) {
            throw new Error('It looks like this command is being run outside of a CI/CD workflow. To deploy locally use `amplify sandbox` instead.');
        }
        const backendId = {
            namespace: args['app-id'],
            name: args.branch,
            type: 'branch',
        };
        await this.backendDeployer.deploy(backendId, {
            deploymentType: 'branch',
            validateAppSources: true,
        });
        await this.clientConfigGenerator.generateClientConfigToFile(backendId);
    };
    builder = (yargs) => {
        return yargs
            .version(false)
            .option('branch', {
            describe: 'Name of the git branch being deployed',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .option('app-id', {
            describe: 'The app id of the target Amplify app',
            demandOption: true,
            type: 'string',
            array: false,
        })
            .fail((msg, err) => {
            handleCommandFailure(msg, err, yargs);
            yargs.exit(1, err);
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlwZWxpbmVfZGVwbG95X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvcGlwZWxpbmUtZGVwbG95L3BpcGVsaW5lX2RlcGxveV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUsxQixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQVd4RTs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBcUI7SUFpQmI7SUFDQTtJQUNBO0lBaEJuQjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUTtJQUV6Qjs7T0FFRztJQUNILFlBQ21CLHFCQUFtRCxFQUNuRCxlQUFnQyxFQUNoQyxrQkFBZ0MsS0FBSztRQUZyQywwQkFBcUIsR0FBckIscUJBQXFCLENBQThCO1FBQ25ELG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtRQUNoQyxvQkFBZSxHQUFmLGVBQWUsQ0FBc0I7UUFFdEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQztRQUNqQyxpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFBRSxJQUFrQyxFQUFpQixFQUFFO1FBQ3BFLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLE1BQU0sSUFBSSxLQUFLLENBQ2IsdUhBQXVILENBQ3hILENBQUM7U0FDSDtRQUVELE1BQU0sU0FBUyxHQUFzQjtZQUNuQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUN6QixJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDakIsSUFBSSxFQUFFLFFBQVE7U0FDZixDQUFDO1FBQ0YsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDM0MsY0FBYyxFQUFFLFFBQVE7WUFDeEIsa0JBQWtCLEVBQUUsSUFBSTtTQUN6QixDQUFDLENBQUM7UUFDSCxNQUFNLElBQUksQ0FBQyxxQkFBcUIsQ0FBQywwQkFBMEIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6RSxDQUFDLENBQUM7SUFFRixPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQXNDLEVBQUU7UUFDNUQsT0FBTyxLQUFLO2FBQ1QsT0FBTyxDQUFDLEtBQUssQ0FBQzthQUNkLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsUUFBUSxFQUFFLHVDQUF1QztZQUNqRCxZQUFZLEVBQUUsSUFBSTtZQUNsQixJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsUUFBUSxFQUFFLHNDQUFzQztZQUNoRCxZQUFZLEVBQUUsSUFBSTtZQUNsQixJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQzthQUNELElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNqQixvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2lzQ0kgZnJvbSAnaXMtY2knO1xuaW1wb3J0IHsgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IEJhY2tlbmREZXBsb3llciB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLWRlcGxveWVyJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIgfSBmcm9tICcuLi8uLi9jbGllbnQtY29uZmlnL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yX2FkYXB0ZXIuanMnO1xuaW1wb3J0IHsgQXJndW1lbnRzS2ViYWJDYXNlIH0gZnJvbSAnLi4vLi4va2ViYWJfY2FzZS5qcyc7XG5pbXBvcnQgeyBoYW5kbGVDb21tYW5kRmFpbHVyZSB9IGZyb20gJy4uLy4uL2NvbW1hbmRfZmFpbHVyZV9oYW5kbGVyLmpzJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnMgPVxuICBBcmd1bWVudHNLZWJhYkNhc2U8UGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZT47XG5cbnR5cGUgUGlwZWxpbmVEZXBsb3lDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZSA9IHtcbiAgYnJhbmNoOiBzdHJpbmc7XG4gIGFwcElkOiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIEFuIGVudHJ5IHBvaW50IGZvciBkZXBsb3kgY29tbWFuZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFBpcGVsaW5lRGVwbG95Q29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBQaXBlbGluZURlcGxveUNvbW1hbmRPcHRpb25zPlxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBmYWxzZTtcblxuICAvKipcbiAgICogQ3JlYXRlcyB0b3AgbGV2ZWwgZW50cnkgcG9pbnQgZm9yIGRlcGxveSBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBjbGllbnRDb25maWdHZW5lcmF0b3I6IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBiYWNrZW5kRGVwbG95ZXI6IEJhY2tlbmREZXBsb3llcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGlzQ2lFbnZpcm9ubWVudDogdHlwZW9mIF9pc0NJID0gX2lzQ0lcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3BpcGVsaW5lLWRlcGxveSc7XG4gICAgLy8gdXNlIGZhbHNlIGZvciBhIGhpZGRlbiBjb21tYW5kXG4gICAgdGhpcy5kZXNjcmliZSA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBoYW5kbGVyID0gYXN5bmMgKGFyZ3M6IFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBpZiAoIXRoaXMuaXNDaUVudmlyb25tZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJdCBsb29rcyBsaWtlIHRoaXMgY29tbWFuZCBpcyBiZWluZyBydW4gb3V0c2lkZSBvZiBhIENJL0NEIHdvcmtmbG93LiBUbyBkZXBsb3kgbG9jYWxseSB1c2UgYGFtcGxpZnkgc2FuZGJveGAgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IGJhY2tlbmRJZDogQmFja2VuZElkZW50aWZpZXIgPSB7XG4gICAgICBuYW1lc3BhY2U6IGFyZ3NbJ2FwcC1pZCddLFxuICAgICAgbmFtZTogYXJncy5icmFuY2gsXG4gICAgICB0eXBlOiAnYnJhbmNoJyxcbiAgICB9O1xuICAgIGF3YWl0IHRoaXMuYmFja2VuZERlcGxveWVyLmRlcGxveShiYWNrZW5kSWQsIHtcbiAgICAgIGRlcGxveW1lbnRUeXBlOiAnYnJhbmNoJyxcbiAgICAgIHZhbGlkYXRlQXBwU291cmNlczogdHJ1ZSxcbiAgICB9KTtcbiAgICBhd2FpdCB0aGlzLmNsaWVudENvbmZpZ0dlbmVyYXRvci5nZW5lcmF0ZUNsaWVudENvbmZpZ1RvRmlsZShiYWNrZW5kSWQpO1xuICB9O1xuXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PFBpcGVsaW5lRGVwbG95Q29tbWFuZE9wdGlvbnM+ID0+IHtcbiAgICByZXR1cm4geWFyZ3NcbiAgICAgIC52ZXJzaW9uKGZhbHNlKVxuICAgICAgLm9wdGlvbignYnJhbmNoJywge1xuICAgICAgICBkZXNjcmliZTogJ05hbWUgb2YgdGhlIGdpdCBicmFuY2ggYmVpbmcgZGVwbG95ZWQnLFxuICAgICAgICBkZW1hbmRPcHRpb246IHRydWUsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignYXBwLWlkJywge1xuICAgICAgICBkZXNjcmliZTogJ1RoZSBhcHAgaWQgb2YgdGhlIHRhcmdldCBBbXBsaWZ5IGFwcCcsXG4gICAgICAgIGRlbWFuZE9wdGlvbjogdHJ1ZSxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgIH0pXG4gICAgICAuZmFpbCgobXNnLCBlcnIpID0+IHtcbiAgICAgICAgaGFuZGxlQ29tbWFuZEZhaWx1cmUobXNnLCBlcnIsIHlhcmdzKTtcbiAgICAgICAgeWFyZ3MuZXhpdCgxLCBlcnIpO1xuICAgICAgfSk7XG4gIH07XG59XG4iXX0=