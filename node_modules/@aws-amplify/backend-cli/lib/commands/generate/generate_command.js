import { handleCommandFailure } from '../../command_failure_handler.js';
/**
 * An entry point for generate command.
 */
export class GenerateCommand {
    generateConfigCommand;
    generateFormsCommand;
    generateGraphqlClientCodeCommand;
    commandMiddleware;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates top level entry point for generate command.
     */
    constructor(generateConfigCommand, generateFormsCommand, generateGraphqlClientCodeCommand, commandMiddleware) {
        this.generateConfigCommand = generateConfigCommand;
        this.generateFormsCommand = generateFormsCommand;
        this.generateGraphqlClientCodeCommand = generateGraphqlClientCodeCommand;
        this.commandMiddleware = commandMiddleware;
        this.command = 'generate';
        this.describe = 'Generates post deployment artifacts';
    }
    /**
     * @inheritDoc
     */
    handler = () => {
        // CommandModule requires handler implementation. But this is never called if top level command
        // is configured to require subcommand.
        // Help is printed by default in that case before ever attempting to call handler.
        throw new Error('Top level generate handler should never be called');
    };
    builder = (yargs) => {
        return (yargs
            .version(false)
            // Cast to erase options types used in internal sub command implementation. Otherwise, compiler fails here.
            .command(this.generateConfigCommand)
            .command(this.generateFormsCommand)
            .command(this.generateGraphqlClientCodeCommand)
            .demandCommand()
            .strictCommands()
            .recommendCommands()
            .option('profile', {
            describe: 'An AWS profile name.',
            type: 'string',
            array: false,
        })
            .middleware([this.commandMiddleware.ensureAwsCredentialAndRegion])
            .fail((msg, err) => {
            handleCommandFailure(msg, err, yargs);
            yargs.exit(1, err);
        }));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9nZW5lcmF0ZS9nZW5lcmF0ZV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBR3hFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGVBQWU7SUFlUDtJQUNBO0lBQ0E7SUFDQTtJQWpCbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixxQkFBNEMsRUFDNUMsb0JBQTBDLEVBQzFDLGdDQUFrRSxFQUNsRSxpQkFBb0M7UUFIcEMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLHFDQUFnQyxHQUFoQyxnQ0FBZ0MsQ0FBa0M7UUFDbEUsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUVyRCxJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLHFDQUFxQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxHQUF5QixFQUFFO1FBQ25DLCtGQUErRjtRQUMvRix1Q0FBdUM7UUFDdkMsa0ZBQWtGO1FBQ2xGLE1BQU0sSUFBSSxLQUFLLENBQUMsbURBQW1ELENBQUMsQ0FBQztJQUN2RSxDQUFDLENBQUM7SUFFRixPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQVEsRUFBRTtRQUM5QixPQUFPLENBQ0wsS0FBSzthQUNGLE9BQU8sQ0FBQyxLQUFLLENBQUM7WUFDZiwyR0FBMkc7YUFDMUcsT0FBTyxDQUFDLElBQUksQ0FBQyxxQkFBaUQsQ0FBQzthQUMvRCxPQUFPLENBQUMsSUFBSSxDQUFDLG9CQUFnRCxDQUFDO2FBQzlELE9BQU8sQ0FDTixJQUFJLENBQUMsZ0NBQTRELENBQ2xFO2FBQ0EsYUFBYSxFQUFFO2FBQ2YsY0FBYyxFQUFFO2FBQ2hCLGlCQUFpQixFQUFFO2FBQ25CLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDakIsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQzthQUNELFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO2FBQ2pFLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNqQixvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUNMLENBQUM7SUFDSixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUNvbmZpZ0NvbW1hbmQgfSBmcm9tICcuL2NvbmZpZy9nZW5lcmF0ZV9jb25maWdfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUZvcm1zQ29tbWFuZCB9IGZyb20gJy4vZm9ybXMvZ2VuZXJhdGVfZm9ybXNfY29tbWFuZC5qcyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZCB9IGZyb20gJy4vZ3JhcGhxbC1jbGllbnQtY29kZS9nZW5lcmF0ZV9ncmFwaHFsX2NsaWVudF9jb2RlX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgaGFuZGxlQ29tbWFuZEZhaWx1cmUgfSBmcm9tICcuLi8uLi9jb21tYW5kX2ZhaWx1cmVfaGFuZGxlci5qcyc7XG5pbXBvcnQgeyBDb21tYW5kTWlkZGxld2FyZSB9IGZyb20gJy4uLy4uL2NvbW1hbmRfbWlkZGxld2FyZS5qcyc7XG5cbi8qKlxuICogQW4gZW50cnkgcG9pbnQgZm9yIGdlbmVyYXRlIGNvbW1hbmQuXG4gKi9cbmV4cG9ydCBjbGFzcyBHZW5lcmF0ZUNvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlIHtcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDcmVhdGVzIHRvcCBsZXZlbCBlbnRyeSBwb2ludCBmb3IgZ2VuZXJhdGUgY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2VuZXJhdGVDb25maWdDb21tYW5kOiBHZW5lcmF0ZUNvbmZpZ0NvbW1hbmQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZW5lcmF0ZUZvcm1zQ29tbWFuZDogR2VuZXJhdGVGb3Jtc0NvbW1hbmQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZDogR2VuZXJhdGVHcmFwaHFsQ2xpZW50Q29kZUNvbW1hbmQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb21tYW5kTWlkZGxld2FyZTogQ29tbWFuZE1pZGRsZXdhcmVcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ2dlbmVyYXRlJztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0dlbmVyYXRlcyBwb3N0IGRlcGxveW1lbnQgYXJ0aWZhY3RzJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9ICgpOiB2b2lkIHwgUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgLy8gQ29tbWFuZE1vZHVsZSByZXF1aXJlcyBoYW5kbGVyIGltcGxlbWVudGF0aW9uLiBCdXQgdGhpcyBpcyBuZXZlciBjYWxsZWQgaWYgdG9wIGxldmVsIGNvbW1hbmRcbiAgICAvLyBpcyBjb25maWd1cmVkIHRvIHJlcXVpcmUgc3ViY29tbWFuZC5cbiAgICAvLyBIZWxwIGlzIHByaW50ZWQgYnkgZGVmYXVsdCBpbiB0aGF0IGNhc2UgYmVmb3JlIGV2ZXIgYXR0ZW1wdGluZyB0byBjYWxsIGhhbmRsZXIuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb3AgbGV2ZWwgZ2VuZXJhdGUgaGFuZGxlciBzaG91bGQgbmV2ZXIgYmUgY2FsbGVkJyk7XG4gIH07XG5cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndik6IEFyZ3YgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICB5YXJnc1xuICAgICAgICAudmVyc2lvbihmYWxzZSlcbiAgICAgICAgLy8gQ2FzdCB0byBlcmFzZSBvcHRpb25zIHR5cGVzIHVzZWQgaW4gaW50ZXJuYWwgc3ViIGNvbW1hbmQgaW1wbGVtZW50YXRpb24uIE90aGVyd2lzZSwgY29tcGlsZXIgZmFpbHMgaGVyZS5cbiAgICAgICAgLmNvbW1hbmQodGhpcy5nZW5lcmF0ZUNvbmZpZ0NvbW1hbmQgYXMgdW5rbm93biBhcyBDb21tYW5kTW9kdWxlKVxuICAgICAgICAuY29tbWFuZCh0aGlzLmdlbmVyYXRlRm9ybXNDb21tYW5kIGFzIHVua25vd24gYXMgQ29tbWFuZE1vZHVsZSlcbiAgICAgICAgLmNvbW1hbmQoXG4gICAgICAgICAgdGhpcy5nZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZCBhcyB1bmtub3duIGFzIENvbW1hbmRNb2R1bGVcbiAgICAgICAgKVxuICAgICAgICAuZGVtYW5kQ29tbWFuZCgpXG4gICAgICAgIC5zdHJpY3RDb21tYW5kcygpXG4gICAgICAgIC5yZWNvbW1lbmRDb21tYW5kcygpXG4gICAgICAgIC5vcHRpb24oJ3Byb2ZpbGUnLCB7XG4gICAgICAgICAgZGVzY3JpYmU6ICdBbiBBV1MgcHJvZmlsZSBuYW1lLicsXG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICB9KVxuICAgICAgICAubWlkZGxld2FyZShbdGhpcy5jb21tYW5kTWlkZGxld2FyZS5lbnN1cmVBd3NDcmVkZW50aWFsQW5kUmVnaW9uXSlcbiAgICAgICAgLmZhaWwoKG1zZywgZXJyKSA9PiB7XG4gICAgICAgICAgaGFuZGxlQ29tbWFuZEZhaWx1cmUobXNnLCBlcnIsIHlhcmdzKTtcbiAgICAgICAgICB5YXJncy5leGl0KDEsIGVycik7XG4gICAgICAgIH0pXG4gICAgKTtcbiAgfTtcbn1cbiJdfQ==