import { ClientConfigFormat } from '@aws-amplify/client-config';
import { handleCommandFailure } from '../../../command_failure_handler.js';
/**
 * Command that generates client config.
 */
export class GenerateConfigCommand {
    clientConfigGenerator;
    backendIdentifierResolver;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Creates client config generation command.
     */
    constructor(clientConfigGenerator, backendIdentifierResolver) {
        this.clientConfigGenerator = clientConfigGenerator;
        this.backendIdentifierResolver = backendIdentifierResolver;
        this.command = 'config';
        this.describe = 'Generates client config';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const backendIdentifier = await this.backendIdentifierResolver.resolve(args);
        if (!backendIdentifier) {
            throw new Error('Could not resolve the backend identifier');
        }
        await this.clientConfigGenerator.generateClientConfigToFile(backendIdentifier, args['out-dir'], args.format);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .option('stack', {
            conflicts: ['app-id', 'branch'],
            describe: 'A stack name that contains an Amplify backend',
            type: 'string',
            array: false,
            group: 'Stack identifier',
        })
            .option('app-id', {
            conflicts: ['stack'],
            describe: 'The Amplify App ID of the project',
            type: 'string',
            array: false,
            implies: 'branch',
            group: 'Project identifier',
        })
            .option('branch', {
            conflicts: ['stack'],
            describe: 'A git branch of the Amplify project',
            type: 'string',
            array: false,
            group: 'Project identifier',
        })
            .option('format', {
            describe: 'The format which the configuration should be exported into.',
            type: 'string',
            array: false,
            choices: Object.values(ClientConfigFormat),
        })
            .option('out-dir', {
            describe: 'A path to directory where config is written. If not provided defaults to current process working directory.',
            type: 'string',
            array: false,
        })
            .fail((msg, err) => {
            handleCommandFailure(msg, err, yargs);
            yargs.exit(1, err);
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY29uZmlnX2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvZ2VuZXJhdGUvY29uZmlnL2dlbmVyYXRlX2NvbmZpZ19jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBSWhFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBYTNFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQWlCYjtJQUNBO0lBZm5COztPQUVHO0lBQ00sT0FBTyxDQUFTO0lBRXpCOztPQUVHO0lBQ00sUUFBUSxDQUFTO0lBRTFCOztPQUVHO0lBQ0gsWUFDbUIscUJBQW1ELEVBQ25ELHlCQUFvRDtRQURwRCwwQkFBcUIsR0FBckIscUJBQXFCLENBQThCO1FBQ25ELDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBMkI7UUFFckUsSUFBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUM7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyx5QkFBeUIsQ0FBQztJQUM1QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxPQUFPLEdBQUcsS0FBSyxFQUFFLElBQWtDLEVBQWlCLEVBQUU7UUFDcEUsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxPQUFPLENBQ3BFLElBQUksQ0FDTCxDQUFDO1FBRUYsSUFBSSxDQUFDLGlCQUFpQixFQUFFO1lBQ3RCLE1BQU0sSUFBSSxLQUFLLENBQUMsMENBQTBDLENBQUMsQ0FBQztTQUM3RDtRQUVELE1BQU0sSUFBSSxDQUFDLHFCQUFxQixDQUFDLDBCQUEwQixDQUN6RCxpQkFBaUIsRUFDakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUNmLElBQUksQ0FBQyxNQUFNLENBQ1osQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUFzQyxFQUFFO1FBQzVELE9BQU8sS0FBSzthQUNULE1BQU0sQ0FBQyxPQUFPLEVBQUU7WUFDZixTQUFTLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO1lBQy9CLFFBQVEsRUFBRSwrQ0FBK0M7WUFDekQsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLEtBQUssRUFBRSxrQkFBa0I7U0FDMUIsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxtQ0FBbUM7WUFDN0MsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLE9BQU8sRUFBRSxRQUFRO1lBQ2pCLEtBQUssRUFBRSxvQkFBb0I7U0FDNUIsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3BCLFFBQVEsRUFBRSxxQ0FBcUM7WUFDL0MsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztZQUNaLEtBQUssRUFBRSxvQkFBb0I7U0FDNUIsQ0FBQzthQUNELE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDaEIsUUFBUSxFQUFFLDZEQUE2RDtZQUN2RSxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1lBQ1osT0FBTyxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7U0FDM0MsQ0FBQzthQUNELE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDakIsUUFBUSxFQUNOLDZHQUE2RztZQUMvRyxJQUFJLEVBQUUsUUFBUTtZQUNkLEtBQUssRUFBRSxLQUFLO1NBQ2IsQ0FBQzthQUNELElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNqQixvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnRm9ybWF0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaWVudC1jb25maWcnO1xuaW1wb3J0IHsgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlciB9IGZyb20gJy4uLy4uLy4uL2JhY2tlbmQtaWRlbnRpZmllci9iYWNrZW5kX2lkZW50aWZpZXJfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciB9IGZyb20gJy4uLy4uLy4uL2NsaWVudC1jb25maWcvY2xpZW50X2NvbmZpZ19nZW5lcmF0b3JfYWRhcHRlci5qcyc7XG5pbXBvcnQgeyBBcmd1bWVudHNLZWJhYkNhc2UgfSBmcm9tICcuLi8uLi8uLi9rZWJhYl9jYXNlLmpzJztcbmltcG9ydCB7IGhhbmRsZUNvbW1hbmRGYWlsdXJlIH0gZnJvbSAnLi4vLi4vLi4vY29tbWFuZF9mYWlsdXJlX2hhbmRsZXIuanMnO1xuXG5leHBvcnQgdHlwZSBHZW5lcmF0ZUNvbmZpZ0NvbW1hbmRPcHRpb25zID1cbiAgQXJndW1lbnRzS2ViYWJDYXNlPEdlbmVyYXRlQ29uZmlnQ29tbWFuZE9wdGlvbnNDYW1lbENhc2U+O1xuXG50eXBlIEdlbmVyYXRlQ29uZmlnQ29tbWFuZE9wdGlvbnNDYW1lbENhc2UgPSB7XG4gIHN0YWNrOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGFwcElkOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIGJyYW5jaDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICBmb3JtYXQ6IENsaWVudENvbmZpZ0Zvcm1hdCB8IHVuZGVmaW5lZDtcbiAgb3V0RGlyOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIENvbW1hbmQgdGhhdCBnZW5lcmF0ZXMgY2xpZW50IGNvbmZpZy5cbiAqL1xuZXhwb3J0IGNsYXNzIEdlbmVyYXRlQ29uZmlnQ29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBHZW5lcmF0ZUNvbmZpZ0NvbW1hbmRPcHRpb25zPlxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgY2xpZW50IGNvbmZpZyBnZW5lcmF0aW9uIGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNsaWVudENvbmZpZ0dlbmVyYXRvcjogQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXI6IEJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXJcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ2NvbmZpZyc7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdHZW5lcmF0ZXMgY2xpZW50IGNvbmZpZyc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoYXJnczogR2VuZXJhdGVDb25maWdDb21tYW5kT3B0aW9ucyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IGJhY2tlbmRJZGVudGlmaWVyID0gYXdhaXQgdGhpcy5iYWNrZW5kSWRlbnRpZmllclJlc29sdmVyLnJlc29sdmUoXG4gICAgICBhcmdzXG4gICAgKTtcblxuICAgIGlmICghYmFja2VuZElkZW50aWZpZXIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHJlc29sdmUgdGhlIGJhY2tlbmQgaWRlbnRpZmllcicpO1xuICAgIH1cblxuICAgIGF3YWl0IHRoaXMuY2xpZW50Q29uZmlnR2VuZXJhdG9yLmdlbmVyYXRlQ2xpZW50Q29uZmlnVG9GaWxlKFxuICAgICAgYmFja2VuZElkZW50aWZpZXIsXG4gICAgICBhcmdzWydvdXQtZGlyJ10sXG4gICAgICBhcmdzLmZvcm1hdFxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxHZW5lcmF0ZUNvbmZpZ0NvbW1hbmRPcHRpb25zPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzXG4gICAgICAub3B0aW9uKCdzdGFjaycsIHtcbiAgICAgICAgY29uZmxpY3RzOiBbJ2FwcC1pZCcsICdicmFuY2gnXSxcbiAgICAgICAgZGVzY3JpYmU6ICdBIHN0YWNrIG5hbWUgdGhhdCBjb250YWlucyBhbiBBbXBsaWZ5IGJhY2tlbmQnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgICBncm91cDogJ1N0YWNrIGlkZW50aWZpZXInLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ2FwcC1pZCcsIHtcbiAgICAgICAgY29uZmxpY3RzOiBbJ3N0YWNrJ10sXG4gICAgICAgIGRlc2NyaWJlOiAnVGhlIEFtcGxpZnkgQXBwIElEIG9mIHRoZSBwcm9qZWN0JyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgICAgaW1wbGllczogJ2JyYW5jaCcsXG4gICAgICAgIGdyb3VwOiAnUHJvamVjdCBpZGVudGlmaWVyJyxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdicmFuY2gnLCB7XG4gICAgICAgIGNvbmZsaWN0czogWydzdGFjayddLFxuICAgICAgICBkZXNjcmliZTogJ0EgZ2l0IGJyYW5jaCBvZiB0aGUgQW1wbGlmeSBwcm9qZWN0JyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGFycmF5OiBmYWxzZSxcbiAgICAgICAgZ3JvdXA6ICdQcm9qZWN0IGlkZW50aWZpZXInLFxuICAgICAgfSlcbiAgICAgIC5vcHRpb24oJ2Zvcm1hdCcsIHtcbiAgICAgICAgZGVzY3JpYmU6ICdUaGUgZm9ybWF0IHdoaWNoIHRoZSBjb25maWd1cmF0aW9uIHNob3VsZCBiZSBleHBvcnRlZCBpbnRvLicsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIGNob2ljZXM6IE9iamVjdC52YWx1ZXMoQ2xpZW50Q29uZmlnRm9ybWF0KSxcbiAgICAgIH0pXG4gICAgICAub3B0aW9uKCdvdXQtZGlyJywge1xuICAgICAgICBkZXNjcmliZTpcbiAgICAgICAgICAnQSBwYXRoIHRvIGRpcmVjdG9yeSB3aGVyZSBjb25maWcgaXMgd3JpdHRlbi4gSWYgbm90IHByb3ZpZGVkIGRlZmF1bHRzIHRvIGN1cnJlbnQgcHJvY2VzcyB3b3JraW5nIGRpcmVjdG9yeS4nLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5mYWlsKChtc2csIGVycikgPT4ge1xuICAgICAgICBoYW5kbGVDb21tYW5kRmFpbHVyZShtc2csIGVyciwgeWFyZ3MpO1xuICAgICAgICB5YXJncy5leGl0KDEsIGVycik7XG4gICAgICB9KTtcbiAgfTtcbn1cbiJdfQ==