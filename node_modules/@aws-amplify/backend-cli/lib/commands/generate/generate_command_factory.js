import { GenerateCommand } from './generate_command.js';
import { GenerateConfigCommand } from './config/generate_config_command.js';
import { fromNodeProviderChain } from '@aws-sdk/credential-providers';
import { GenerateFormsCommand } from './forms/generate_forms_command.js';
import { PackageJsonReader } from '@aws-amplify/platform-core';
import { GenerateGraphqlClientCodeCommand } from './graphql-client-code/generate_graphql_client_code_command.js';
import { LocalNamespaceResolver } from '../../backend-identifier/local_namespace_resolver.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { GenerateApiCodeAdapter } from './graphql-client-code/generate_api_code_adapter.js';
import { FormGenerationHandler } from '../../form-generation/form_generation_handler.js';
import { BackendOutputClientFactory } from '@aws-amplify/deployed-backend-client';
import { SandboxBackendIdResolver } from '../sandbox/sandbox_id_resolver.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { BackendIdentifierResolverWithFallback } from '../../backend-identifier/backend_identifier_with_sandbox_fallback.js';
import { AppBackendIdentifierResolver } from '../../backend-identifier/backend_identifier_resolver.js';
/**
 * Creates wired generate command.
 */
export const createGenerateCommand = () => {
    const credentialProvider = fromNodeProviderChain();
    const clientConfigGenerator = new ClientConfigGeneratorAdapter(credentialProvider);
    const namespaceResolver = new LocalNamespaceResolver(new PackageJsonReader());
    const backendIdentifierResolver = new BackendIdentifierResolverWithFallback(new AppBackendIdentifierResolver(namespaceResolver), new SandboxBackendIdResolver(namespaceResolver));
    const generateConfigCommand = new GenerateConfigCommand(clientConfigGenerator, backendIdentifierResolver);
    const generateFormsCommand = new GenerateFormsCommand(backendIdentifierResolver, () => BackendOutputClientFactory.getInstance({
        credentials: credentialProvider,
    }), new FormGenerationHandler({ credentialProvider }));
    const generateApiCodeAdapter = new GenerateApiCodeAdapter(credentialProvider);
    const generateGraphqlClientCodeCommand = new GenerateGraphqlClientCodeCommand(generateApiCodeAdapter, backendIdentifierResolver);
    const commandMiddleware = new CommandMiddleware();
    return new GenerateCommand(generateConfigCommand, generateFormsCommand, generateGraphqlClientCodeCommand, commandMiddleware);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfY29tbWFuZF9mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2dlbmVyYXRlL2dlbmVyYXRlX2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDNUUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDekUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sK0RBQStELENBQUM7QUFDakgsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFDOUYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sd0RBQXdELENBQUM7QUFDdEcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDNUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDekYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDN0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sc0VBQXNFLENBQUM7QUFDN0gsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0seURBQXlELENBQUM7QUFFdkc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxHQUFrQixFQUFFO0lBQ3ZELE1BQU0sa0JBQWtCLEdBQUcscUJBQXFCLEVBQUUsQ0FBQztJQUNuRCxNQUFNLHFCQUFxQixHQUFHLElBQUksNEJBQTRCLENBQzVELGtCQUFrQixDQUNuQixDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLHNCQUFzQixDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBRTlFLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxxQ0FBcUMsQ0FDekUsSUFBSSw0QkFBNEIsQ0FBQyxpQkFBaUIsQ0FBQyxFQUNuRCxJQUFJLHdCQUF3QixDQUFDLGlCQUFpQixDQUFDLENBQ2hELENBQUM7SUFFRixNQUFNLHFCQUFxQixHQUFHLElBQUkscUJBQXFCLENBQ3JELHFCQUFxQixFQUNyQix5QkFBeUIsQ0FDMUIsQ0FBQztJQUVGLE1BQU0sb0JBQW9CLEdBQUcsSUFBSSxvQkFBb0IsQ0FDbkQseUJBQXlCLEVBQ3pCLEdBQUcsRUFBRSxDQUNILDBCQUEwQixDQUFDLFdBQVcsQ0FBQztRQUNyQyxXQUFXLEVBQUUsa0JBQWtCO0tBQ2hDLENBQUMsRUFDSixJQUFJLHFCQUFxQixDQUFDLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyxDQUNsRCxDQUFDO0lBRUYsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLHNCQUFzQixDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFFOUUsTUFBTSxnQ0FBZ0MsR0FBRyxJQUFJLGdDQUFnQyxDQUMzRSxzQkFBc0IsRUFDdEIseUJBQXlCLENBQzFCLENBQUM7SUFFRixNQUFNLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztJQUVsRCxPQUFPLElBQUksZUFBZSxDQUN4QixxQkFBcUIsRUFDckIsb0JBQW9CLEVBQ3BCLGdDQUFnQyxFQUNoQyxpQkFBaUIsQ0FDbEIsQ0FBQztBQUNKLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUNvbW1hbmQgfSBmcm9tICcuL2dlbmVyYXRlX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgR2VuZXJhdGVDb25maWdDb21tYW5kIH0gZnJvbSAnLi9jb25maWcvZ2VuZXJhdGVfY29uZmlnX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgZnJvbU5vZGVQcm92aWRlckNoYWluIH0gZnJvbSAnQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlcnMnO1xuaW1wb3J0IHsgR2VuZXJhdGVGb3Jtc0NvbW1hbmQgfSBmcm9tICcuL2Zvcm1zL2dlbmVyYXRlX2Zvcm1zX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgUGFja2FnZUpzb25SZWFkZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvcGxhdGZvcm0tY29yZSc7XG5pbXBvcnQgeyBHZW5lcmF0ZUdyYXBocWxDbGllbnRDb2RlQ29tbWFuZCB9IGZyb20gJy4vZ3JhcGhxbC1jbGllbnQtY29kZS9nZW5lcmF0ZV9ncmFwaHFsX2NsaWVudF9jb2RlX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgTG9jYWxOYW1lc3BhY2VSZXNvbHZlciB9IGZyb20gJy4uLy4uL2JhY2tlbmQtaWRlbnRpZmllci9sb2NhbF9uYW1lc3BhY2VfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlciB9IGZyb20gJy4uLy4uL2NsaWVudC1jb25maWcvY2xpZW50X2NvbmZpZ19nZW5lcmF0b3JfYWRhcHRlci5qcyc7XG5pbXBvcnQgeyBHZW5lcmF0ZUFwaUNvZGVBZGFwdGVyIH0gZnJvbSAnLi9ncmFwaHFsLWNsaWVudC1jb2RlL2dlbmVyYXRlX2FwaV9jb2RlX2FkYXB0ZXIuanMnO1xuaW1wb3J0IHsgRm9ybUdlbmVyYXRpb25IYW5kbGVyIH0gZnJvbSAnLi4vLi4vZm9ybS1nZW5lcmF0aW9uL2Zvcm1fZ2VuZXJhdGlvbl9oYW5kbGVyLmpzJztcbmltcG9ydCB7IEJhY2tlbmRPdXRwdXRDbGllbnRGYWN0b3J5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2RlcGxveWVkLWJhY2tlbmQtY2xpZW50JztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4uL3NhbmRib3gvc2FuZGJveF9pZF9yZXNvbHZlci5qcyc7XG5pbXBvcnQgeyBDb21tYW5kTWlkZGxld2FyZSB9IGZyb20gJy4uLy4uL2NvbW1hbmRfbWlkZGxld2FyZS5qcyc7XG5pbXBvcnQgeyBCYWNrZW5kSWRlbnRpZmllclJlc29sdmVyV2l0aEZhbGxiYWNrIH0gZnJvbSAnLi4vLi4vYmFja2VuZC1pZGVudGlmaWVyL2JhY2tlbmRfaWRlbnRpZmllcl93aXRoX3NhbmRib3hfZmFsbGJhY2suanMnO1xuaW1wb3J0IHsgQXBwQmFja2VuZElkZW50aWZpZXJSZXNvbHZlciB9IGZyb20gJy4uLy4uL2JhY2tlbmQtaWRlbnRpZmllci9iYWNrZW5kX2lkZW50aWZpZXJfcmVzb2x2ZXIuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgd2lyZWQgZ2VuZXJhdGUgY29tbWFuZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUdlbmVyYXRlQ29tbWFuZCA9ICgpOiBDb21tYW5kTW9kdWxlID0+IHtcbiAgY29uc3QgY3JlZGVudGlhbFByb3ZpZGVyID0gZnJvbU5vZGVQcm92aWRlckNoYWluKCk7XG4gIGNvbnN0IGNsaWVudENvbmZpZ0dlbmVyYXRvciA9IG5ldyBDbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyKFxuICAgIGNyZWRlbnRpYWxQcm92aWRlclxuICApO1xuXG4gIGNvbnN0IG5hbWVzcGFjZVJlc29sdmVyID0gbmV3IExvY2FsTmFtZXNwYWNlUmVzb2x2ZXIobmV3IFBhY2thZ2VKc29uUmVhZGVyKCkpO1xuXG4gIGNvbnN0IGJhY2tlbmRJZGVudGlmaWVyUmVzb2x2ZXIgPSBuZXcgQmFja2VuZElkZW50aWZpZXJSZXNvbHZlcldpdGhGYWxsYmFjayhcbiAgICBuZXcgQXBwQmFja2VuZElkZW50aWZpZXJSZXNvbHZlcihuYW1lc3BhY2VSZXNvbHZlciksXG4gICAgbmV3IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlcihuYW1lc3BhY2VSZXNvbHZlcilcbiAgKTtcblxuICBjb25zdCBnZW5lcmF0ZUNvbmZpZ0NvbW1hbmQgPSBuZXcgR2VuZXJhdGVDb25maWdDb21tYW5kKFxuICAgIGNsaWVudENvbmZpZ0dlbmVyYXRvcixcbiAgICBiYWNrZW5kSWRlbnRpZmllclJlc29sdmVyXG4gICk7XG5cbiAgY29uc3QgZ2VuZXJhdGVGb3Jtc0NvbW1hbmQgPSBuZXcgR2VuZXJhdGVGb3Jtc0NvbW1hbmQoXG4gICAgYmFja2VuZElkZW50aWZpZXJSZXNvbHZlcixcbiAgICAoKSA9PlxuICAgICAgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnkuZ2V0SW5zdGFuY2Uoe1xuICAgICAgICBjcmVkZW50aWFsczogY3JlZGVudGlhbFByb3ZpZGVyLFxuICAgICAgfSksXG4gICAgbmV3IEZvcm1HZW5lcmF0aW9uSGFuZGxlcih7IGNyZWRlbnRpYWxQcm92aWRlciB9KVxuICApO1xuXG4gIGNvbnN0IGdlbmVyYXRlQXBpQ29kZUFkYXB0ZXIgPSBuZXcgR2VuZXJhdGVBcGlDb2RlQWRhcHRlcihjcmVkZW50aWFsUHJvdmlkZXIpO1xuXG4gIGNvbnN0IGdlbmVyYXRlR3JhcGhxbENsaWVudENvZGVDb21tYW5kID0gbmV3IEdlbmVyYXRlR3JhcGhxbENsaWVudENvZGVDb21tYW5kKFxuICAgIGdlbmVyYXRlQXBpQ29kZUFkYXB0ZXIsXG4gICAgYmFja2VuZElkZW50aWZpZXJSZXNvbHZlclxuICApO1xuXG4gIGNvbnN0IGNvbW1hbmRNaWRkbGV3YXJlID0gbmV3IENvbW1hbmRNaWRkbGV3YXJlKCk7XG5cbiAgcmV0dXJuIG5ldyBHZW5lcmF0ZUNvbW1hbmQoXG4gICAgZ2VuZXJhdGVDb25maWdDb21tYW5kLFxuICAgIGdlbmVyYXRlRm9ybXNDb21tYW5kLFxuICAgIGdlbmVyYXRlR3JhcGhxbENsaWVudENvZGVDb21tYW5kLFxuICAgIGNvbW1hbmRNaWRkbGV3YXJlXG4gICk7XG59O1xuIl19