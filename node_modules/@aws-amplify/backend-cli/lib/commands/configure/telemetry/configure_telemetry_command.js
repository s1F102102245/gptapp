import { Printer } from '@aws-amplify/cli-core';
import { USAGE_DATA_TRACKING_ENABLED, } from '@aws-amplify/platform-core';
import { handleCommandFailure } from '../../../command_failure_handler.js';
/**
 * Command to configure AWS Amplify profile.
 */
export class ConfigureTelemetryCommand {
    configController;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Configure profile command.
     */
    constructor(configController) {
        this.configController = configController;
        this.command = 'telemetry';
        this.describe = 'Configure anonymous usage data collection';
    }
    /**
     * @inheritDoc
     */
    handler = () => {
        // CommandModule requires handler implementation. But this is never called if top level command
        // is configured to require subcommand.
        // Help is printed by default in that case before ever attempting to call handler.
        throw new Error('Top level generate handler should never be called');
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .command('enable', 'Enable anonymous data collection', {}, async () => {
            await this.configController.set(USAGE_DATA_TRACKING_ENABLED, true);
            Printer.print('You have enabled telemetry data collection');
        })
            .command('disable', 'Disable anonymous data collection', {}, async () => {
            await this.configController.set(USAGE_DATA_TRACKING_ENABLED, false);
            Printer.print('You have disabled telemetry data collection');
        })
            .demandCommand()
            .strictCommands()
            .recommendCommands()
            .fail((msg, err) => {
            handleCommandFailure(msg, err, yargs);
            yargs.exit(1, err);
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlX3RlbGVtZXRyeV9jb21tYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2NvbmZpZ3VyZS90ZWxlbWV0cnkvY29uZmlndXJlX3RlbGVtZXRyeV9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRCxPQUFPLEVBRUwsMkJBQTJCLEdBQzVCLE1BQU0sNEJBQTRCLENBQUM7QUFFcEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0U7O0dBRUc7QUFDSCxNQUFNLE9BQU8seUJBQXlCO0lBY1A7SUFiN0I7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUE2QixnQkFBeUM7UUFBekMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUF5QjtRQUNwRSxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQztRQUMzQixJQUFJLENBQUMsUUFBUSxHQUFHLDJDQUEyQyxDQUFDO0lBQzlELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxHQUFHLEVBQUU7UUFDYiwrRkFBK0Y7UUFDL0YsdUNBQXVDO1FBQ3ZDLGtGQUFrRjtRQUNsRixNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7SUFDdkUsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQUUsRUFBRTtRQUN4QixPQUFPLEtBQUs7YUFDVCxPQUFPLENBQUMsUUFBUSxFQUFFLGtDQUFrQyxFQUFFLEVBQUUsRUFBRSxLQUFLLElBQUksRUFBRTtZQUNwRSxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFbkUsT0FBTyxDQUFDLEtBQUssQ0FBQyw0Q0FBNEMsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQzthQUNELE9BQU8sQ0FBQyxTQUFTLEVBQUUsbUNBQW1DLEVBQUUsRUFBRSxFQUFFLEtBQUssSUFBSSxFQUFFO1lBQ3RFLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUVwRSxPQUFPLENBQUMsS0FBSyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDO2FBQ0QsYUFBYSxFQUFFO2FBQ2YsY0FBYyxFQUFFO2FBQ2hCLGlCQUFpQixFQUFFO2FBQ25CLElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNqQixvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmludGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcbmltcG9ydCB7XG4gIENvbmZpZ3VyYXRpb25Db250cm9sbGVyLFxuICBVU0FHRV9EQVRBX1RSQUNLSU5HX0VOQUJMRUQsXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBoYW5kbGVDb21tYW5kRmFpbHVyZSB9IGZyb20gJy4uLy4uLy4uL2NvbW1hbmRfZmFpbHVyZV9oYW5kbGVyLmpzJztcbi8qKlxuICogQ29tbWFuZCB0byBjb25maWd1cmUgQVdTIEFtcGxpZnkgcHJvZmlsZS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbmZpZ3VyZVRlbGVtZXRyeUNvbW1hbmQgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdD4ge1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSBwcm9maWxlIGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGNvbmZpZ0NvbnRyb2xsZXI6IENvbmZpZ3VyYXRpb25Db250cm9sbGVyKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3RlbGVtZXRyeSc7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdDb25maWd1cmUgYW5vbnltb3VzIHVzYWdlIGRhdGEgY29sbGVjdGlvbic7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSAoKSA9PiB7XG4gICAgLy8gQ29tbWFuZE1vZHVsZSByZXF1aXJlcyBoYW5kbGVyIGltcGxlbWVudGF0aW9uLiBCdXQgdGhpcyBpcyBuZXZlciBjYWxsZWQgaWYgdG9wIGxldmVsIGNvbW1hbmRcbiAgICAvLyBpcyBjb25maWd1cmVkIHRvIHJlcXVpcmUgc3ViY29tbWFuZC5cbiAgICAvLyBIZWxwIGlzIHByaW50ZWQgYnkgZGVmYXVsdCBpbiB0aGF0IGNhc2UgYmVmb3JlIGV2ZXIgYXR0ZW1wdGluZyB0byBjYWxsIGhhbmRsZXIuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUb3AgbGV2ZWwgZ2VuZXJhdGUgaGFuZGxlciBzaG91bGQgbmV2ZXIgYmUgY2FsbGVkJyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KSA9PiB7XG4gICAgcmV0dXJuIHlhcmdzXG4gICAgICAuY29tbWFuZCgnZW5hYmxlJywgJ0VuYWJsZSBhbm9ueW1vdXMgZGF0YSBjb2xsZWN0aW9uJywge30sIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5jb25maWdDb250cm9sbGVyLnNldChVU0FHRV9EQVRBX1RSQUNLSU5HX0VOQUJMRUQsIHRydWUpO1xuXG4gICAgICAgIFByaW50ZXIucHJpbnQoJ1lvdSBoYXZlIGVuYWJsZWQgdGVsZW1ldHJ5IGRhdGEgY29sbGVjdGlvbicpO1xuICAgICAgfSlcbiAgICAgIC5jb21tYW5kKCdkaXNhYmxlJywgJ0Rpc2FibGUgYW5vbnltb3VzIGRhdGEgY29sbGVjdGlvbicsIHt9LCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMuY29uZmlnQ29udHJvbGxlci5zZXQoVVNBR0VfREFUQV9UUkFDS0lOR19FTkFCTEVELCBmYWxzZSk7XG5cbiAgICAgICAgUHJpbnRlci5wcmludCgnWW91IGhhdmUgZGlzYWJsZWQgdGVsZW1ldHJ5IGRhdGEgY29sbGVjdGlvbicpO1xuICAgICAgfSlcbiAgICAgIC5kZW1hbmRDb21tYW5kKClcbiAgICAgIC5zdHJpY3RDb21tYW5kcygpXG4gICAgICAucmVjb21tZW5kQ29tbWFuZHMoKVxuICAgICAgLmZhaWwoKG1zZywgZXJyKSA9PiB7XG4gICAgICAgIGhhbmRsZUNvbW1hbmRGYWlsdXJlKG1zZywgZXJyLCB5YXJncyk7XG4gICAgICAgIHlhcmdzLmV4aXQoMSwgZXJyKTtcbiAgICAgIH0pO1xuICB9O1xufVxuIl19