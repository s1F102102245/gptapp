import { AmplifyPrompter, Printer } from '@aws-amplify/cli-core';
import { DEFAULT_PROFILE } from '@smithy/shared-ini-file-loader';
import { EOL } from 'os';
import { Open } from '../open/open.js';
const configureAccountUrl = 'https://docs.amplify.aws/gen2/start/account-setup/';
const profileSetupInstruction = `Follow the instructions at ${configureAccountUrl}${EOL}to configure Amplify IAM user and credentials.${EOL}`;
/**
 * Command to configure AWS Amplify profile.
 */
export class ConfigureProfileCommand {
    profileController;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Configure profile command.
     */
    constructor(profileController) {
        this.profileController = profileController;
        this.command = 'profile';
        this.describe = 'Configure an AWS Amplify profile';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const profileName = args.name;
        const profileExists = await this.profileController.profileExists(profileName);
        if (profileExists) {
            Printer.print(`Profile '${profileName}' already exists!${EOL}${profileSetupInstruction}`);
            return;
        }
        const hasIAMUser = await AmplifyPrompter.yesOrNo({
            message: 'Do you already have IAM User credentials?',
        });
        if (!hasIAMUser) {
            Printer.print(profileSetupInstruction);
            await Open.open(configureAccountUrl, { wait: false });
            await AmplifyPrompter.input({
                message: `Hit [enter] when complete`,
            });
        }
        const accessKeyId = await AmplifyPrompter.secretValue('Enter Access Key ID:');
        const secretAccessKey = await AmplifyPrompter.secretValue('Enter Secret Access Key:');
        const region = await AmplifyPrompter.input({
            message: `Enter the AWS region to use with the '${profileName}' profile (eg us-east-1, us-west-2, etc):`,
        });
        await this.profileController.appendAWSFiles({
            profile: profileName,
            region,
            accessKeyId,
            secretAccessKey,
        });
        Printer.print(`Created profile ${profileName} successfully!`);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs.option('name', {
            describe: 'An AWS profile name',
            type: 'string',
            array: false,
            default: DEFAULT_PROFILE,
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJlX3Byb2ZpbGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21tYW5kcy9jb25maWd1cmUvY29uZmlndXJlX3Byb2ZpbGVfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUNqRSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3pCLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUl2QyxNQUFNLG1CQUFtQixHQUN2QixvREFBb0QsQ0FBQztBQUV2RCxNQUFNLHVCQUF1QixHQUFHLDhCQUE4QixtQkFBbUIsR0FBRyxHQUFHLGlEQUFpRCxHQUFHLEVBQUUsQ0FBQztBQUU5STs7R0FFRztBQUNILE1BQU0sT0FBTyx1QkFBdUI7SUFnQkw7SUFiN0I7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUE2QixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUMvRCxJQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztRQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLGtDQUFrQyxDQUFDO0lBQ3JELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQUUsSUFBb0MsRUFBaUIsRUFBRTtRQUN0RSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQzlCLE1BQU0sYUFBYSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsQ0FDOUQsV0FBVyxDQUNaLENBQUM7UUFDRixJQUFJLGFBQWEsRUFBRTtZQUNqQixPQUFPLENBQUMsS0FBSyxDQUNYLFlBQVksV0FBVyxvQkFBb0IsR0FBRyxHQUFHLHVCQUF1QixFQUFFLENBQzNFLENBQUM7WUFDRixPQUFPO1NBQ1I7UUFDRCxNQUFNLFVBQVUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxPQUFPLENBQUM7WUFDL0MsT0FBTyxFQUFFLDJDQUEyQztTQUNyRCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBRXZDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ3RELE1BQU0sZUFBZSxDQUFDLEtBQUssQ0FBQztnQkFDMUIsT0FBTyxFQUFFLDJCQUEyQjthQUNyQyxDQUFDLENBQUM7U0FDSjtRQUVELE1BQU0sV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLFdBQVcsQ0FDbkQsc0JBQXNCLENBQ3ZCLENBQUM7UUFDRixNQUFNLGVBQWUsR0FBRyxNQUFNLGVBQWUsQ0FBQyxXQUFXLENBQ3ZELDBCQUEwQixDQUMzQixDQUFDO1FBRUYsTUFBTSxNQUFNLEdBQUcsTUFBTSxlQUFlLENBQUMsS0FBSyxDQUFDO1lBQ3pDLE9BQU8sRUFBRSx5Q0FBeUMsV0FBVywyQ0FBMkM7U0FDekcsQ0FBQyxDQUFDO1FBRUgsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDO1lBQzFDLE9BQU8sRUFBRSxXQUFXO1lBQ3BCLE1BQU07WUFDTixXQUFXO1lBQ1gsZUFBZTtTQUNoQixDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsS0FBSyxDQUFDLG1CQUFtQixXQUFXLGdCQUFnQixDQUFDLENBQUM7SUFDaEUsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQXdDLEVBQUU7UUFDOUQsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUMxQixRQUFRLEVBQUUscUJBQXFCO1lBQy9CLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLEtBQUs7WUFDWixPQUFPLEVBQUUsZUFBZTtTQUN6QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFyZ3YsIENvbW1hbmRNb2R1bGUgfSBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyBBbXBsaWZ5UHJvbXB0ZXIsIFByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgREVGQVVMVF9QUk9GSUxFIH0gZnJvbSAnQHNtaXRoeS9zaGFyZWQtaW5pLWZpbGUtbG9hZGVyJztcbmltcG9ydCB7IEVPTCB9IGZyb20gJ29zJztcbmltcG9ydCB7IE9wZW4gfSBmcm9tICcuLi9vcGVuL29wZW4uanMnO1xuaW1wb3J0IHsgQXJndW1lbnRzS2ViYWJDYXNlIH0gZnJvbSAnLi4vLi4va2ViYWJfY2FzZS5qcyc7XG5pbXBvcnQgeyBQcm9maWxlQ29udHJvbGxlciB9IGZyb20gJy4vcHJvZmlsZV9jb250cm9sbGVyLmpzJztcblxuY29uc3QgY29uZmlndXJlQWNjb3VudFVybCA9XG4gICdodHRwczovL2RvY3MuYW1wbGlmeS5hd3MvZ2VuMi9zdGFydC9hY2NvdW50LXNldHVwLyc7XG5cbmNvbnN0IHByb2ZpbGVTZXR1cEluc3RydWN0aW9uID0gYEZvbGxvdyB0aGUgaW5zdHJ1Y3Rpb25zIGF0ICR7Y29uZmlndXJlQWNjb3VudFVybH0ke0VPTH10byBjb25maWd1cmUgQW1wbGlmeSBJQU0gdXNlciBhbmQgY3JlZGVudGlhbHMuJHtFT0x9YDtcblxuLyoqXG4gKiBDb21tYW5kIHRvIGNvbmZpZ3VyZSBBV1MgQW1wbGlmeSBwcm9maWxlLlxuICovXG5leHBvcnQgY2xhc3MgQ29uZmlndXJlUHJvZmlsZUNvbW1hbmRcbiAgaW1wbGVtZW50cyBDb21tYW5kTW9kdWxlPG9iamVjdCwgQ29uZmlndXJlUHJvZmlsZUNvbW1hbmRPcHRpb25zPlxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSBwcm9maWxlIGNvbW1hbmQuXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHByb2ZpbGVDb250cm9sbGVyOiBQcm9maWxlQ29udHJvbGxlcikge1xuICAgIHRoaXMuY29tbWFuZCA9ICdwcm9maWxlJztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0NvbmZpZ3VyZSBhbiBBV1MgQW1wbGlmeSBwcm9maWxlJztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChhcmdzOiBDb25maWd1cmVQcm9maWxlQ29tbWFuZE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBwcm9maWxlTmFtZSA9IGFyZ3MubmFtZTtcbiAgICBjb25zdCBwcm9maWxlRXhpc3RzID0gYXdhaXQgdGhpcy5wcm9maWxlQ29udHJvbGxlci5wcm9maWxlRXhpc3RzKFxuICAgICAgcHJvZmlsZU5hbWVcbiAgICApO1xuICAgIGlmIChwcm9maWxlRXhpc3RzKSB7XG4gICAgICBQcmludGVyLnByaW50KFxuICAgICAgICBgUHJvZmlsZSAnJHtwcm9maWxlTmFtZX0nIGFscmVhZHkgZXhpc3RzISR7RU9MfSR7cHJvZmlsZVNldHVwSW5zdHJ1Y3Rpb259YFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaGFzSUFNVXNlciA9IGF3YWl0IEFtcGxpZnlQcm9tcHRlci55ZXNPck5vKHtcbiAgICAgIG1lc3NhZ2U6ICdEbyB5b3UgYWxyZWFkeSBoYXZlIElBTSBVc2VyIGNyZWRlbnRpYWxzPycsXG4gICAgfSk7XG5cbiAgICBpZiAoIWhhc0lBTVVzZXIpIHtcbiAgICAgIFByaW50ZXIucHJpbnQocHJvZmlsZVNldHVwSW5zdHJ1Y3Rpb24pO1xuXG4gICAgICBhd2FpdCBPcGVuLm9wZW4oY29uZmlndXJlQWNjb3VudFVybCwgeyB3YWl0OiBmYWxzZSB9KTtcbiAgICAgIGF3YWl0IEFtcGxpZnlQcm9tcHRlci5pbnB1dCh7XG4gICAgICAgIG1lc3NhZ2U6IGBIaXQgW2VudGVyXSB3aGVuIGNvbXBsZXRlYCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IGFjY2Vzc0tleUlkID0gYXdhaXQgQW1wbGlmeVByb21wdGVyLnNlY3JldFZhbHVlKFxuICAgICAgJ0VudGVyIEFjY2VzcyBLZXkgSUQ6J1xuICAgICk7XG4gICAgY29uc3Qgc2VjcmV0QWNjZXNzS2V5ID0gYXdhaXQgQW1wbGlmeVByb21wdGVyLnNlY3JldFZhbHVlKFxuICAgICAgJ0VudGVyIFNlY3JldCBBY2Nlc3MgS2V5OidcbiAgICApO1xuXG4gICAgY29uc3QgcmVnaW9uID0gYXdhaXQgQW1wbGlmeVByb21wdGVyLmlucHV0KHtcbiAgICAgIG1lc3NhZ2U6IGBFbnRlciB0aGUgQVdTIHJlZ2lvbiB0byB1c2Ugd2l0aCB0aGUgJyR7cHJvZmlsZU5hbWV9JyBwcm9maWxlIChlZyB1cy1lYXN0LTEsIHVzLXdlc3QtMiwgZXRjKTpgLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgdGhpcy5wcm9maWxlQ29udHJvbGxlci5hcHBlbmRBV1NGaWxlcyh7XG4gICAgICBwcm9maWxlOiBwcm9maWxlTmFtZSxcbiAgICAgIHJlZ2lvbixcbiAgICAgIGFjY2Vzc0tleUlkLFxuICAgICAgc2VjcmV0QWNjZXNzS2V5LFxuICAgIH0pO1xuXG4gICAgUHJpbnRlci5wcmludChgQ3JlYXRlZCBwcm9maWxlICR7cHJvZmlsZU5hbWV9IHN1Y2Nlc3NmdWxseSFgKTtcbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9ucz4gPT4ge1xuICAgIHJldHVybiB5YXJncy5vcHRpb24oJ25hbWUnLCB7XG4gICAgICBkZXNjcmliZTogJ0FuIEFXUyBwcm9maWxlIG5hbWUnLFxuICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICBhcnJheTogZmFsc2UsXG4gICAgICBkZWZhdWx0OiBERUZBVUxUX1BST0ZJTEUsXG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9ucyA9XG4gIEFyZ3VtZW50c0tlYmFiQ2FzZTxDb25maWd1cmVQcm9maWxlQ29tbWFuZE9wdGlvbnNDYW1lbENhc2U+O1xuXG50eXBlIENvbmZpZ3VyZVByb2ZpbGVDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZSA9IHtcbiAgbmFtZTogc3RyaW5nO1xufTtcbiJdfQ==