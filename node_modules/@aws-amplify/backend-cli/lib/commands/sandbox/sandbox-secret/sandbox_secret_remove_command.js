import { handleCommandFailure } from '../../../command_failure_handler.js';
/**
 * Command to remove sandbox secret.
 */
export class SandboxSecretRemoveCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Remove sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'remove <secret-name>';
        this.describe = 'Remove a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const sandboxBackendIdentifier = await this.sandboxIdResolver.resolve();
        await this.secretClient.removeSecret(sandboxBackendIdentifier, args['secret-name']);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .positional('secret-name', {
            describe: 'Name of the secret to remove',
            type: 'string',
            demandOption: true,
        })
            .fail((msg, err) => {
            handleCommandFailure(msg, err, yargs);
            yargs.exit(1, err);
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfcmVtb3ZlX2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9yZW1vdmVfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUUzRTs7R0FFRztBQUNILE1BQU0sT0FBTywwQkFBMEI7SUFpQmxCO0lBQ0E7SUFmbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsWUFBMEI7UUFEMUIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUUzQyxJQUFJLENBQUMsT0FBTyxHQUFHLHNCQUFzQixDQUFDO1FBQ3RDLElBQUksQ0FBQyxRQUFRLEdBQUcseUJBQXlCLENBQUM7SUFDNUMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFBRSxJQUFnQyxFQUFpQixFQUFFO1FBQ2xFLE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDeEUsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FDbEMsd0JBQXdCLEVBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FDcEIsQ0FBQztJQUNKLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUFvQyxFQUFFO1FBQzFELE9BQU8sS0FBSzthQUNULFVBQVUsQ0FBQyxhQUFhLEVBQUU7WUFDekIsUUFBUSxFQUFFLDhCQUE4QjtZQUN4QyxJQUFJLEVBQUUsUUFBUTtZQUNkLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUM7YUFDRCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDakIsb0JBQW9CLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN0QyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IFNlY3JldENsaWVudCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLXNlY3JldCc7XG5pbXBvcnQgeyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIgfSBmcm9tICcuLi9zYW5kYm94X2lkX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IEFyZ3VtZW50c0tlYmFiQ2FzZSB9IGZyb20gJy4uLy4uLy4uL2tlYmFiX2Nhc2UuanMnO1xuaW1wb3J0IHsgaGFuZGxlQ29tbWFuZEZhaWx1cmUgfSBmcm9tICcuLi8uLi8uLi9jb21tYW5kX2ZhaWx1cmVfaGFuZGxlci5qcyc7XG5cbi8qKlxuICogQ29tbWFuZCB0byByZW1vdmUgc2FuZGJveCBzZWNyZXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94U2VjcmV0UmVtb3ZlQ29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBTZWNyZXRSZW1vdmVDb21tYW5kT3B0aW9ucz5cbntcbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBjb21tYW5kOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICByZWFkb25seSBkZXNjcmliZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgc2FuZGJveCBzZWNyZXQgY29tbWFuZC5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2FuZGJveElkUmVzb2x2ZXI6IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNlY3JldENsaWVudDogU2VjcmV0Q2xpZW50XG4gICkge1xuICAgIHRoaXMuY29tbWFuZCA9ICdyZW1vdmUgPHNlY3JldC1uYW1lPic7XG4gICAgdGhpcy5kZXNjcmliZSA9ICdSZW1vdmUgYSBzYW5kYm94IHNlY3JldCc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoYXJnczogU2VjcmV0UmVtb3ZlQ29tbWFuZE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICBjb25zdCBzYW5kYm94QmFja2VuZElkZW50aWZpZXIgPSBhd2FpdCB0aGlzLnNhbmRib3hJZFJlc29sdmVyLnJlc29sdmUoKTtcbiAgICBhd2FpdCB0aGlzLnNlY3JldENsaWVudC5yZW1vdmVTZWNyZXQoXG4gICAgICBzYW5kYm94QmFja2VuZElkZW50aWZpZXIsXG4gICAgICBhcmdzWydzZWNyZXQtbmFtZSddXG4gICAgKTtcbiAgfTtcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGJ1aWxkZXIgPSAoeWFyZ3M6IEFyZ3YpOiBBcmd2PFNlY3JldFJlbW92ZUNvbW1hbmRPcHRpb25zPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzXG4gICAgICAucG9zaXRpb25hbCgnc2VjcmV0LW5hbWUnLCB7XG4gICAgICAgIGRlc2NyaWJlOiAnTmFtZSBvZiB0aGUgc2VjcmV0IHRvIHJlbW92ZScsXG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBkZW1hbmRPcHRpb246IHRydWUsXG4gICAgICB9KVxuICAgICAgLmZhaWwoKG1zZywgZXJyKSA9PiB7XG4gICAgICAgIGhhbmRsZUNvbW1hbmRGYWlsdXJlKG1zZywgZXJyLCB5YXJncyk7XG4gICAgICAgIHlhcmdzLmV4aXQoMSwgZXJyKTtcbiAgICAgIH0pO1xuICB9O1xufVxuXG50eXBlIFNlY3JldFJlbW92ZUNvbW1hbmRPcHRpb25zID1cbiAgQXJndW1lbnRzS2ViYWJDYXNlPFNlY3JldFJlbW92ZUNvbW1hbmRPcHRpb25zQ2FtZWxDYXNlPjtcblxudHlwZSBTZWNyZXRSZW1vdmVDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZSA9IHtcbiAgc2VjcmV0TmFtZTogc3RyaW5nO1xufTtcbiJdfQ==