import { Printer } from '@aws-amplify/cli-core';
import { handleCommandFailure } from '../../../command_failure_handler.js';
/**
 * Command to get sandbox secret.
 */
export class SandboxSecretGetCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Get sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'get <secret-name>';
        this.describe = 'Get a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const sandboxBackendIdentifier = await this.sandboxIdResolver.resolve();
        const secret = await this.secretClient.getSecret(sandboxBackendIdentifier, {
            name: args['secret-name'],
        });
        Printer.printRecord(secret);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .positional('secret-name', {
            describe: 'Name of the secret to get',
            type: 'string',
            demandOption: true,
        })
            .help()
            .fail((msg, err) => {
            handleCommandFailure(msg, err, yargs);
            yargs.exit(1, err);
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfZ2V0X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9nZXRfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFaEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFM0U7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBaUJmO0lBQ0E7SUFmbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsWUFBMEI7UUFEMUIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUUzQyxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsc0JBQXNCLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFBRSxJQUE2QixFQUFpQixFQUFFO1FBQy9ELE1BQU0sd0JBQXdCLEdBQUcsTUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDeEUsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsRUFBRTtZQUN6RSxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQztTQUMxQixDQUFDLENBQUM7UUFDSCxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzlCLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsS0FBVyxFQUFpQyxFQUFFO1FBQ3ZELE9BQU8sS0FBSzthQUNULFVBQVUsQ0FBQyxhQUFhLEVBQUU7WUFDekIsUUFBUSxFQUFFLDJCQUEyQjtZQUNyQyxJQUFJLEVBQUUsUUFBUTtZQUNkLFlBQVksRUFBRSxJQUFJO1NBQ25CLENBQUM7YUFDRCxJQUFJLEVBQUU7YUFDTixJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDakIsb0JBQW9CLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN0QyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndiwgQ29tbWFuZE1vZHVsZSB9IGZyb20gJ3lhcmdzJztcbmltcG9ydCB7IFNlY3JldENsaWVudCB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9iYWNrZW5kLXNlY3JldCc7XG5pbXBvcnQgeyBTYW5kYm94QmFja2VuZElkUmVzb2x2ZXIgfSBmcm9tICcuLi9zYW5kYm94X2lkX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IFByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgQXJndW1lbnRzS2ViYWJDYXNlIH0gZnJvbSAnLi4vLi4vLi4va2ViYWJfY2FzZS5qcyc7XG5pbXBvcnQgeyBoYW5kbGVDb21tYW5kRmFpbHVyZSB9IGZyb20gJy4uLy4uLy4uL2NvbW1hbmRfZmFpbHVyZV9oYW5kbGVyLmpzJztcblxuLyoqXG4gKiBDb21tYW5kIHRvIGdldCBzYW5kYm94IHNlY3JldC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNhbmRib3hTZWNyZXRHZXRDb21tYW5kXG4gIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZTxvYmplY3QsIFNlY3JldEdldENvbW1hbmRPcHRpb25zPlxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEdldCBzYW5kYm94IHNlY3JldCBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzYW5kYm94SWRSZXNvbHZlcjogU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0Q2xpZW50OiBTZWNyZXRDbGllbnRcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ2dldCA8c2VjcmV0LW5hbWU+JztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0dldCBhIHNhbmRib3ggc2VjcmV0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChhcmdzOiBTZWNyZXRHZXRDb21tYW5kT3B0aW9ucyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHNhbmRib3hCYWNrZW5kSWRlbnRpZmllciA9IGF3YWl0IHRoaXMuc2FuZGJveElkUmVzb2x2ZXIucmVzb2x2ZSgpO1xuICAgIGNvbnN0IHNlY3JldCA9IGF3YWl0IHRoaXMuc2VjcmV0Q2xpZW50LmdldFNlY3JldChzYW5kYm94QmFja2VuZElkZW50aWZpZXIsIHtcbiAgICAgIG5hbWU6IGFyZ3NbJ3NlY3JldC1uYW1lJ10sXG4gICAgfSk7XG4gICAgUHJpbnRlci5wcmludFJlY29yZChzZWNyZXQpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndik6IEFyZ3Y8U2VjcmV0R2V0Q29tbWFuZE9wdGlvbnM+ID0+IHtcbiAgICByZXR1cm4geWFyZ3NcbiAgICAgIC5wb3NpdGlvbmFsKCdzZWNyZXQtbmFtZScsIHtcbiAgICAgICAgZGVzY3JpYmU6ICdOYW1lIG9mIHRoZSBzZWNyZXQgdG8gZ2V0JyxcbiAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgIGRlbWFuZE9wdGlvbjogdHJ1ZSxcbiAgICAgIH0pXG4gICAgICAuaGVscCgpXG4gICAgICAuZmFpbCgobXNnLCBlcnIpID0+IHtcbiAgICAgICAgaGFuZGxlQ29tbWFuZEZhaWx1cmUobXNnLCBlcnIsIHlhcmdzKTtcbiAgICAgICAgeWFyZ3MuZXhpdCgxLCBlcnIpO1xuICAgICAgfSk7XG4gIH07XG59XG5cbnR5cGUgU2VjcmV0R2V0Q29tbWFuZE9wdGlvbnMgPVxuICBBcmd1bWVudHNLZWJhYkNhc2U8U2VjcmV0R2V0Q29tbWFuZE9wdGlvbnNDYW1lbENhc2U+O1xuXG50eXBlIFNlY3JldEdldENvbW1hbmRPcHRpb25zQ2FtZWxDYXNlID0ge1xuICBzZWNyZXROYW1lOiBzdHJpbmc7XG59O1xuIl19