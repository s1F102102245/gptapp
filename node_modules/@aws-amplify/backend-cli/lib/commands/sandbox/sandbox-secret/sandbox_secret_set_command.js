import { AmplifyPrompter } from '@aws-amplify/cli-core';
import { handleCommandFailure } from '../../../command_failure_handler.js';
/**
 * Command to set sandbox secret.
 */
export class SandboxSecretSetCommand {
    sandboxIdResolver;
    secretClient;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Set sandbox secret command.
     */
    constructor(sandboxIdResolver, secretClient) {
        this.sandboxIdResolver = sandboxIdResolver;
        this.secretClient = secretClient;
        this.command = 'set <secret-name>';
        this.describe = 'Set a sandbox secret';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        const secretVal = await AmplifyPrompter.secretValue();
        await this.secretClient.setSecret(await this.sandboxIdResolver.resolve(), args['secret-name'], secretVal);
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .positional('secret-name', {
            describe: 'Name of the secret to set',
            type: 'string',
            demandOption: true,
        })
            .fail((msg, err) => {
            handleCommandFailure(msg, err, yargs);
            yargs.exit(1, err);
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9zZWNyZXRfc2V0X2NvbW1hbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94LXNlY3JldC9zYW5kYm94X3NlY3JldF9zZXRfY29tbWFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHeEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFM0U7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBaUJmO0lBQ0E7SUFmbkI7O09BRUc7SUFDTSxPQUFPLENBQVM7SUFFekI7O09BRUc7SUFDTSxRQUFRLENBQVM7SUFFMUI7O09BRUc7SUFDSCxZQUNtQixpQkFBMkMsRUFDM0MsWUFBMEI7UUFEMUIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUEwQjtRQUMzQyxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUUzQyxJQUFJLENBQUMsT0FBTyxHQUFHLG1CQUFtQixDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsc0JBQXNCLENBQUM7SUFDekMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsT0FBTyxHQUFHLEtBQUssRUFBRSxJQUE2QixFQUFpQixFQUFFO1FBQy9ELE1BQU0sU0FBUyxHQUFHLE1BQU0sZUFBZSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3RELE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQy9CLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxFQUN0QyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQ25CLFNBQVMsQ0FDVixDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxPQUFPLEdBQUcsQ0FBQyxLQUFXLEVBQWlDLEVBQUU7UUFDdkQsT0FBTyxLQUFLO2FBQ1QsVUFBVSxDQUFDLGFBQWEsRUFBRTtZQUN6QixRQUFRLEVBQUUsMkJBQTJCO1lBQ3JDLElBQUksRUFBRSxRQUFRO1lBQ2QsWUFBWSxFQUFFLElBQUk7U0FDbkIsQ0FBQzthQUNELElBQUksQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNqQixvQkFBb0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgU2VjcmV0Q2xpZW50IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcbmltcG9ydCB7IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlciB9IGZyb20gJy4uL3NhbmRib3hfaWRfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgQW1wbGlmeVByb21wdGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NsaS1jb3JlJztcblxuaW1wb3J0IHsgQXJndW1lbnRzS2ViYWJDYXNlIH0gZnJvbSAnLi4vLi4vLi4va2ViYWJfY2FzZS5qcyc7XG5pbXBvcnQgeyBoYW5kbGVDb21tYW5kRmFpbHVyZSB9IGZyb20gJy4uLy4uLy4uL2NvbW1hbmRfZmFpbHVyZV9oYW5kbGVyLmpzJztcblxuLyoqXG4gKiBDb21tYW5kIHRvIHNldCBzYW5kYm94IHNlY3JldC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNhbmRib3hTZWNyZXRTZXRDb21tYW5kXG4gIGltcGxlbWVudHMgQ29tbWFuZE1vZHVsZTxvYmplY3QsIFNlY3JldFNldENvbW1hbmRPcHRpb25zPlxue1xuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGNvbW1hbmQ6IHN0cmluZztcblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIHJlYWRvbmx5IGRlc2NyaWJlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFNldCBzYW5kYm94IHNlY3JldCBjb21tYW5kLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzYW5kYm94SWRSZXNvbHZlcjogU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0Q2xpZW50OiBTZWNyZXRDbGllbnRcbiAgKSB7XG4gICAgdGhpcy5jb21tYW5kID0gJ3NldCA8c2VjcmV0LW5hbWU+JztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ1NldCBhIHNhbmRib3ggc2VjcmV0JztcbiAgfVxuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgaGFuZGxlciA9IGFzeW5jIChhcmdzOiBTZWNyZXRTZXRDb21tYW5kT3B0aW9ucyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgIGNvbnN0IHNlY3JldFZhbCA9IGF3YWl0IEFtcGxpZnlQcm9tcHRlci5zZWNyZXRWYWx1ZSgpO1xuICAgIGF3YWl0IHRoaXMuc2VjcmV0Q2xpZW50LnNldFNlY3JldChcbiAgICAgIGF3YWl0IHRoaXMuc2FuZGJveElkUmVzb2x2ZXIucmVzb2x2ZSgpLFxuICAgICAgYXJnc1snc2VjcmV0LW5hbWUnXSxcbiAgICAgIHNlY3JldFZhbFxuICAgICk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBpbmhlcml0RG9jXG4gICAqL1xuICBidWlsZGVyID0gKHlhcmdzOiBBcmd2KTogQXJndjxTZWNyZXRTZXRDb21tYW5kT3B0aW9ucz4gPT4ge1xuICAgIHJldHVybiB5YXJnc1xuICAgICAgLnBvc2l0aW9uYWwoJ3NlY3JldC1uYW1lJywge1xuICAgICAgICBkZXNjcmliZTogJ05hbWUgb2YgdGhlIHNlY3JldCB0byBzZXQnLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgZGVtYW5kT3B0aW9uOiB0cnVlLFxuICAgICAgfSlcbiAgICAgIC5mYWlsKChtc2csIGVycikgPT4ge1xuICAgICAgICBoYW5kbGVDb21tYW5kRmFpbHVyZShtc2csIGVyciwgeWFyZ3MpO1xuICAgICAgICB5YXJncy5leGl0KDEsIGVycik7XG4gICAgICB9KTtcbiAgfTtcbn1cblxudHlwZSBTZWNyZXRTZXRDb21tYW5kT3B0aW9ucyA9XG4gIEFyZ3VtZW50c0tlYmFiQ2FzZTxTZWNyZXRTZXRDb21tYW5kT3B0aW9uc0NhbWVsQ2FzZT47XG5cbnR5cGUgU2VjcmV0U2V0Q29tbWFuZE9wdGlvbnNDYW1lbENhc2UgPSB7XG4gIHNlY3JldE5hbWU6IHN0cmluZztcbn07XG4iXX0=