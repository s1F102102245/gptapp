import { COLOR, Printer } from '@aws-amplify/cli-core';
/**
 * Coordinates creation of sandbox event handlers
 */
export class SandboxEventHandlerFactory {
    getBackendIdentifier;
    getUsageDataEmitter;
    /**
     * Creates a SandboxEventHandlerFactory
     */
    constructor(getBackendIdentifier, getUsageDataEmitter) {
        this.getBackendIdentifier = getBackendIdentifier;
        this.getUsageDataEmitter = getUsageDataEmitter;
    }
    getSandboxEventHandlers = ({ sandboxName, clientConfigLifecycleHandler, }) => {
        return {
            successfulDeployment: [
                async (...args) => {
                    const backendIdentifier = await this.getBackendIdentifier(sandboxName);
                    const usageDataEmitter = await this.getUsageDataEmitter();
                    try {
                        await clientConfigLifecycleHandler.generateClientConfigFile(backendIdentifier);
                        if (args && args[0]) {
                            const deployResult = args[0];
                            if (deployResult && deployResult.deploymentTimes) {
                                await usageDataEmitter.emitSuccess(deployResult.deploymentTimes, { command: 'Sandbox' });
                            }
                        }
                    }
                    catch (error) {
                        // Don't crash sandbox if config cannot be generated, but print the error message
                        Printer.print('Amplify configuration could not be generated.', COLOR.RED);
                        if (error instanceof Error) {
                            Printer.print(error.message, COLOR.RED);
                        }
                        else {
                            try {
                                Printer.print(JSON.stringify(error, null, 2), COLOR.RED);
                            }
                            catch {
                                // fallback in case there's an error stringify the error
                                // like with circular references.
                                Printer.print('Unknown error', COLOR.RED);
                            }
                        }
                    }
                },
            ],
            successfulDeletion: [
                async () => {
                    await clientConfigLifecycleHandler.deleteClientConfigFile();
                },
            ],
            failedDeployment: [
                async (...args) => {
                    const usageDataEmitter = await this.getUsageDataEmitter();
                    if (args.length == 0 || !args[0]) {
                        return;
                    }
                    const deployError = args[0];
                    if (deployError && deployError.message) {
                        await usageDataEmitter.emitFailure(deployError, {
                            command: 'Sandbox',
                        });
                    }
                },
            ],
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9ldmVudF9oYW5kbGVyX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2V2ZW50X2hhbmRsZXJfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXZEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLDBCQUEwQjtJQUtsQjtJQUdBO0lBUG5COztPQUVHO0lBQ0gsWUFDbUIsb0JBRWMsRUFDZCxtQkFBb0Q7UUFIcEQseUJBQW9CLEdBQXBCLG9CQUFvQixDQUVOO1FBQ2Qsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFpQztJQUNwRSxDQUFDO0lBRUosdUJBQXVCLEdBQStCLENBQUMsRUFDckQsV0FBVyxFQUNYLDRCQUE0QixHQUM3QixFQUFFLEVBQUU7UUFDSCxPQUFPO1lBQ0wsb0JBQW9CLEVBQUU7Z0JBQ3BCLEtBQUssRUFBRSxHQUFHLElBQWUsRUFBRSxFQUFFO29CQUMzQixNQUFNLGlCQUFpQixHQUFHLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixDQUN2RCxXQUFXLENBQ1osQ0FBQztvQkFDRixNQUFNLGdCQUFnQixHQUFHLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7b0JBQzFELElBQUk7d0JBQ0YsTUFBTSw0QkFBNEIsQ0FBQyx3QkFBd0IsQ0FDekQsaUJBQWlCLENBQ2xCLENBQUM7d0JBQ0YsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFOzRCQUNuQixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFpQixDQUFDOzRCQUM3QyxJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsZUFBZSxFQUFFO2dDQUNoRCxNQUFNLGdCQUFnQixDQUFDLFdBQVcsQ0FDaEMsWUFBWSxDQUFDLGVBQWUsRUFDNUIsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLENBQ3ZCLENBQUM7NkJBQ0g7eUJBQ0Y7cUJBQ0Y7b0JBQUMsT0FBTyxLQUFLLEVBQUU7d0JBQ2QsaUZBQWlGO3dCQUNqRixPQUFPLENBQUMsS0FBSyxDQUNYLCtDQUErQyxFQUMvQyxLQUFLLENBQUMsR0FBRyxDQUNWLENBQUM7d0JBQ0YsSUFBSSxLQUFLLFlBQVksS0FBSyxFQUFFOzRCQUMxQixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3lCQUN6Qzs2QkFBTTs0QkFDTCxJQUFJO2dDQUNGLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzs2QkFDMUQ7NEJBQUMsTUFBTTtnQ0FDTix3REFBd0Q7Z0NBQ3hELGlDQUFpQztnQ0FDakMsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDOzZCQUMzQzt5QkFDRjtxQkFDRjtnQkFDSCxDQUFDO2FBQ0Y7WUFDRCxrQkFBa0IsRUFBRTtnQkFDbEIsS0FBSyxJQUFJLEVBQUU7b0JBQ1QsTUFBTSw0QkFBNEIsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO2dCQUM5RCxDQUFDO2FBQ0Y7WUFDRCxnQkFBZ0IsRUFBRTtnQkFDaEIsS0FBSyxFQUFFLEdBQUcsSUFBZSxFQUFFLEVBQUU7b0JBQzNCLE1BQU0sZ0JBQWdCLEdBQUcsTUFBTSxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztvQkFDMUQsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDaEMsT0FBTztxQkFDUjtvQkFDRCxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFVLENBQUM7b0JBQ3JDLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxPQUFPLEVBQUU7d0JBQ3RDLE1BQU0sZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRTs0QkFDOUMsT0FBTyxFQUFFLFNBQVM7eUJBQ25CLENBQUMsQ0FBQztxQkFDSjtnQkFDSCxDQUFDO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTYW5kYm94RXZlbnRIYW5kbGVyQ3JlYXRvciB9IGZyb20gJy4vc2FuZGJveF9jb21tYW5kLmpzJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQgeyBVc2FnZURhdGFFbWl0dGVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsYXRmb3JtLWNvcmUnO1xuaW1wb3J0IHsgRGVwbG95UmVzdWx0IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtZGVwbG95ZXInO1xuaW1wb3J0IHsgQ09MT1IsIFByaW50ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuXG4vKipcbiAqIENvb3JkaW5hdGVzIGNyZWF0aW9uIG9mIHNhbmRib3ggZXZlbnQgaGFuZGxlcnNcbiAqL1xuZXhwb3J0IGNsYXNzIFNhbmRib3hFdmVudEhhbmRsZXJGYWN0b3J5IHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZXRCYWNrZW5kSWRlbnRpZmllcjogKFxuICAgICAgc2FuZGJveE5hbWU/OiBzdHJpbmdcbiAgICApID0+IFByb21pc2U8QmFja2VuZElkZW50aWZpZXI+LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2V0VXNhZ2VEYXRhRW1pdHRlcjogKCkgPT4gUHJvbWlzZTxVc2FnZURhdGFFbWl0dGVyPlxuICApIHt9XG5cbiAgZ2V0U2FuZGJveEV2ZW50SGFuZGxlcnM6IFNhbmRib3hFdmVudEhhbmRsZXJDcmVhdG9yID0gKHtcbiAgICBzYW5kYm94TmFtZSxcbiAgICBjbGllbnRDb25maWdMaWZlY3ljbGVIYW5kbGVyLFxuICB9KSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN1Y2Nlc3NmdWxEZXBsb3ltZW50OiBbXG4gICAgICAgIGFzeW5jICguLi5hcmdzOiB1bmtub3duW10pID0+IHtcbiAgICAgICAgICBjb25zdCBiYWNrZW5kSWRlbnRpZmllciA9IGF3YWl0IHRoaXMuZ2V0QmFja2VuZElkZW50aWZpZXIoXG4gICAgICAgICAgICBzYW5kYm94TmFtZVxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgdXNhZ2VEYXRhRW1pdHRlciA9IGF3YWl0IHRoaXMuZ2V0VXNhZ2VEYXRhRW1pdHRlcigpO1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCBjbGllbnRDb25maWdMaWZlY3ljbGVIYW5kbGVyLmdlbmVyYXRlQ2xpZW50Q29uZmlnRmlsZShcbiAgICAgICAgICAgICAgYmFja2VuZElkZW50aWZpZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoYXJncyAmJiBhcmdzWzBdKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGRlcGxveVJlc3VsdCA9IGFyZ3NbMF0gYXMgRGVwbG95UmVzdWx0O1xuICAgICAgICAgICAgICBpZiAoZGVwbG95UmVzdWx0ICYmIGRlcGxveVJlc3VsdC5kZXBsb3ltZW50VGltZXMpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB1c2FnZURhdGFFbWl0dGVyLmVtaXRTdWNjZXNzKFxuICAgICAgICAgICAgICAgICAgZGVwbG95UmVzdWx0LmRlcGxveW1lbnRUaW1lcyxcbiAgICAgICAgICAgICAgICAgIHsgY29tbWFuZDogJ1NhbmRib3gnIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIERvbid0IGNyYXNoIHNhbmRib3ggaWYgY29uZmlnIGNhbm5vdCBiZSBnZW5lcmF0ZWQsIGJ1dCBwcmludCB0aGUgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgICAgUHJpbnRlci5wcmludChcbiAgICAgICAgICAgICAgJ0FtcGxpZnkgY29uZmlndXJhdGlvbiBjb3VsZCBub3QgYmUgZ2VuZXJhdGVkLicsXG4gICAgICAgICAgICAgIENPTE9SLlJFRFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgIFByaW50ZXIucHJpbnQoZXJyb3IubWVzc2FnZSwgQ09MT1IuUkVEKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgUHJpbnRlci5wcmludChKU09OLnN0cmluZ2lmeShlcnJvciwgbnVsbCwgMiksIENPTE9SLlJFRCk7XG4gICAgICAgICAgICAgIH0gY2F0Y2gge1xuICAgICAgICAgICAgICAgIC8vIGZhbGxiYWNrIGluIGNhc2UgdGhlcmUncyBhbiBlcnJvciBzdHJpbmdpZnkgdGhlIGVycm9yXG4gICAgICAgICAgICAgICAgLy8gbGlrZSB3aXRoIGNpcmN1bGFyIHJlZmVyZW5jZXMuXG4gICAgICAgICAgICAgICAgUHJpbnRlci5wcmludCgnVW5rbm93biBlcnJvcicsIENPTE9SLlJFRCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgc3VjY2Vzc2Z1bERlbGV0aW9uOiBbXG4gICAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBhd2FpdCBjbGllbnRDb25maWdMaWZlY3ljbGVIYW5kbGVyLmRlbGV0ZUNsaWVudENvbmZpZ0ZpbGUoKTtcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBmYWlsZWREZXBsb3ltZW50OiBbXG4gICAgICAgIGFzeW5jICguLi5hcmdzOiB1bmtub3duW10pID0+IHtcbiAgICAgICAgICBjb25zdCB1c2FnZURhdGFFbWl0dGVyID0gYXdhaXQgdGhpcy5nZXRVc2FnZURhdGFFbWl0dGVyKCk7XG4gICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09IDAgfHwgIWFyZ3NbMF0pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZGVwbG95RXJyb3IgPSBhcmdzWzBdIGFzIEVycm9yO1xuICAgICAgICAgIGlmIChkZXBsb3lFcnJvciAmJiBkZXBsb3lFcnJvci5tZXNzYWdlKSB7XG4gICAgICAgICAgICBhd2FpdCB1c2FnZURhdGFFbWl0dGVyLmVtaXRGYWlsdXJlKGRlcGxveUVycm9yLCB7XG4gICAgICAgICAgICAgIGNvbW1hbmQ6ICdTYW5kYm94JyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfTtcbiAgfTtcbn1cbiJdfQ==