import { SandboxCommand } from './sandbox_command.js';
import { SandboxSingletonFactory } from '@aws-amplify/sandbox';
import { SandboxDeleteCommand } from './sandbox-delete/sandbox_delete_command.js';
import { SandboxBackendIdResolver } from './sandbox_id_resolver.js';
import { ClientConfigGeneratorAdapter } from '../../client-config/client_config_generator_adapter.js';
import { fromNodeProviderChain } from '@aws-sdk/credential-providers';
import { LocalNamespaceResolver } from '../../backend-identifier/local_namespace_resolver.js';
import { createSandboxSecretCommand } from './sandbox-secret/sandbox_secret_command_factory.js';
import { PackageJsonReader, UsageDataEmitterFactory, } from '@aws-amplify/platform-core';
import { SandboxEventHandlerFactory } from './sandbox_event_handler_factory.js';
import { CommandMiddleware } from '../../command_middleware.js';
import { fileURLToPath } from 'url';
/**
 * Creates wired sandbox command.
 */
export const createSandboxCommand = () => {
    const credentialProvider = fromNodeProviderChain();
    const sandboxBackendIdPartsResolver = new SandboxBackendIdResolver(new LocalNamespaceResolver(new PackageJsonReader()));
    /**
     * This callback allows sandbox to resolve the backend id using the name specified by the --name arg if present
     * Otherwise, the default sandboxBackendIdPartsResolver.resolve() value is used
     * @param sandboxName A customer specified name to use as part of the sandbox identifier (the --name arg to sandbox)
     */
    const sandboxBackendIdentifierResolver = async (sandboxName) => {
        const sandboxBackendIdParts = await sandboxBackendIdPartsResolver.resolve();
        if (!sandboxName) {
            return sandboxBackendIdParts;
        }
        return {
            ...sandboxBackendIdParts,
            name: sandboxName,
        };
    };
    const sandboxFactory = new SandboxSingletonFactory(sandboxBackendIdentifierResolver);
    const clientConfigGeneratorAdapter = new ClientConfigGeneratorAdapter(credentialProvider);
    const libraryVersion = new PackageJsonReader().read(fileURLToPath(new URL('../../../package.json', import.meta.url))).version ?? '';
    const eventHandlerFactory = new SandboxEventHandlerFactory(sandboxBackendIdentifierResolver, async () => await new UsageDataEmitterFactory().getInstance(libraryVersion));
    const commandMiddleWare = new CommandMiddleware();
    return new SandboxCommand(sandboxFactory, [new SandboxDeleteCommand(sandboxFactory), createSandboxSecretCommand()], clientConfigGeneratorAdapter, commandMiddleWare, eventHandlerFactory.getSandboxEventHandlers);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9jb21tYW5kX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tbWFuZHMvc2FuZGJveC9zYW5kYm94X2NvbW1hbmRfZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsY0FBYyxFQUF5QixNQUFNLHNCQUFzQixDQUFDO0FBQzdFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHdEQUF3RCxDQUFDO0FBQ3RHLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzlGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQ2hHLE9BQU8sRUFDTCxpQkFBaUIsRUFDakIsdUJBQXVCLEdBQ3hCLE1BQU0sNEJBQTRCLENBQUM7QUFDcEMsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDaEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEtBQUssQ0FBQztBQUVwQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLEdBR2xDLEVBQUU7SUFDRixNQUFNLGtCQUFrQixHQUFHLHFCQUFxQixFQUFFLENBQUM7SUFDbkQsTUFBTSw2QkFBNkIsR0FBRyxJQUFJLHdCQUF3QixDQUNoRSxJQUFJLHNCQUFzQixDQUFDLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxDQUNwRCxDQUFDO0lBRUY7Ozs7T0FJRztJQUNILE1BQU0sZ0NBQWdDLEdBQUcsS0FBSyxFQUFFLFdBQW9CLEVBQUUsRUFBRTtRQUN0RSxNQUFNLHFCQUFxQixHQUFHLE1BQU0sNkJBQTZCLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDNUUsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixPQUFPLHFCQUFxQixDQUFDO1NBQzlCO1FBQ0QsT0FBTztZQUNMLEdBQUcscUJBQXFCO1lBQ3hCLElBQUksRUFBRSxXQUFXO1NBQ2xCLENBQUM7SUFDSixDQUFDLENBQUM7SUFFRixNQUFNLGNBQWMsR0FBRyxJQUFJLHVCQUF1QixDQUNoRCxnQ0FBZ0MsQ0FDakMsQ0FBQztJQUNGLE1BQU0sNEJBQTRCLEdBQUcsSUFBSSw0QkFBNEIsQ0FDbkUsa0JBQWtCLENBQ25CLENBQUM7SUFFRixNQUFNLGNBQWMsR0FDbEIsSUFBSSxpQkFBaUIsRUFBRSxDQUFDLElBQUksQ0FDMUIsYUFBYSxDQUFDLElBQUksR0FBRyxDQUFDLHVCQUF1QixFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FDakUsQ0FBQyxPQUFPLElBQUksRUFBRSxDQUFDO0lBRWxCLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSwwQkFBMEIsQ0FDeEQsZ0NBQWdDLEVBQ2hDLEtBQUssSUFBSSxFQUFFLENBQUMsTUFBTSxJQUFJLHVCQUF1QixFQUFFLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUM1RSxDQUFDO0lBRUYsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLGlCQUFpQixFQUFFLENBQUM7SUFDbEQsT0FBTyxJQUFJLGNBQWMsQ0FDdkIsY0FBYyxFQUNkLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxjQUFjLENBQUMsRUFBRSwwQkFBMEIsRUFBRSxDQUFDLEVBQ3hFLDRCQUE0QixFQUM1QixpQkFBaUIsRUFDakIsbUJBQW1CLENBQUMsdUJBQXVCLENBQzVDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgU2FuZGJveENvbW1hbmQsIFNhbmRib3hDb21tYW5kT3B0aW9ucyB9IGZyb20gJy4vc2FuZGJveF9jb21tYW5kLmpzJztcbmltcG9ydCB7IFNhbmRib3hTaW5nbGV0b25GYWN0b3J5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3NhbmRib3gnO1xuaW1wb3J0IHsgU2FuZGJveERlbGV0ZUNvbW1hbmQgfSBmcm9tICcuL3NhbmRib3gtZGVsZXRlL3NhbmRib3hfZGVsZXRlX2NvbW1hbmQuanMnO1xuaW1wb3J0IHsgU2FuZGJveEJhY2tlbmRJZFJlc29sdmVyIH0gZnJvbSAnLi9zYW5kYm94X2lkX3Jlc29sdmVyLmpzJztcbmltcG9ydCB7IENsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIgfSBmcm9tICcuLi8uLi9jbGllbnQtY29uZmlnL2NsaWVudF9jb25maWdfZ2VuZXJhdG9yX2FkYXB0ZXIuanMnO1xuaW1wb3J0IHsgZnJvbU5vZGVQcm92aWRlckNoYWluIH0gZnJvbSAnQGF3cy1zZGsvY3JlZGVudGlhbC1wcm92aWRlcnMnO1xuaW1wb3J0IHsgTG9jYWxOYW1lc3BhY2VSZXNvbHZlciB9IGZyb20gJy4uLy4uL2JhY2tlbmQtaWRlbnRpZmllci9sb2NhbF9uYW1lc3BhY2VfcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHsgY3JlYXRlU2FuZGJveFNlY3JldENvbW1hbmQgfSBmcm9tICcuL3NhbmRib3gtc2VjcmV0L3NhbmRib3hfc2VjcmV0X2NvbW1hbmRfZmFjdG9yeS5qcyc7XG5pbXBvcnQge1xuICBQYWNrYWdlSnNvblJlYWRlcixcbiAgVXNhZ2VEYXRhRW1pdHRlckZhY3RvcnksXG59IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbGF0Zm9ybS1jb3JlJztcbmltcG9ydCB7IFNhbmRib3hFdmVudEhhbmRsZXJGYWN0b3J5IH0gZnJvbSAnLi9zYW5kYm94X2V2ZW50X2hhbmRsZXJfZmFjdG9yeS5qcyc7XG5pbXBvcnQgeyBDb21tYW5kTWlkZGxld2FyZSB9IGZyb20gJy4uLy4uL2NvbW1hbmRfbWlkZGxld2FyZS5qcyc7XG5pbXBvcnQgeyBmaWxlVVJMVG9QYXRoIH0gZnJvbSAndXJsJztcblxuLyoqXG4gKiBDcmVhdGVzIHdpcmVkIHNhbmRib3ggY29tbWFuZC5cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVNhbmRib3hDb21tYW5kID0gKCk6IENvbW1hbmRNb2R1bGU8XG4gIG9iamVjdCxcbiAgU2FuZGJveENvbW1hbmRPcHRpb25zXG4+ID0+IHtcbiAgY29uc3QgY3JlZGVudGlhbFByb3ZpZGVyID0gZnJvbU5vZGVQcm92aWRlckNoYWluKCk7XG4gIGNvbnN0IHNhbmRib3hCYWNrZW5kSWRQYXJ0c1Jlc29sdmVyID0gbmV3IFNhbmRib3hCYWNrZW5kSWRSZXNvbHZlcihcbiAgICBuZXcgTG9jYWxOYW1lc3BhY2VSZXNvbHZlcihuZXcgUGFja2FnZUpzb25SZWFkZXIoKSlcbiAgKTtcblxuICAvKipcbiAgICogVGhpcyBjYWxsYmFjayBhbGxvd3Mgc2FuZGJveCB0byByZXNvbHZlIHRoZSBiYWNrZW5kIGlkIHVzaW5nIHRoZSBuYW1lIHNwZWNpZmllZCBieSB0aGUgLS1uYW1lIGFyZyBpZiBwcmVzZW50XG4gICAqIE90aGVyd2lzZSwgdGhlIGRlZmF1bHQgc2FuZGJveEJhY2tlbmRJZFBhcnRzUmVzb2x2ZXIucmVzb2x2ZSgpIHZhbHVlIGlzIHVzZWRcbiAgICogQHBhcmFtIHNhbmRib3hOYW1lIEEgY3VzdG9tZXIgc3BlY2lmaWVkIG5hbWUgdG8gdXNlIGFzIHBhcnQgb2YgdGhlIHNhbmRib3ggaWRlbnRpZmllciAodGhlIC0tbmFtZSBhcmcgdG8gc2FuZGJveClcbiAgICovXG4gIGNvbnN0IHNhbmRib3hCYWNrZW5kSWRlbnRpZmllclJlc29sdmVyID0gYXN5bmMgKHNhbmRib3hOYW1lPzogc3RyaW5nKSA9PiB7XG4gICAgY29uc3Qgc2FuZGJveEJhY2tlbmRJZFBhcnRzID0gYXdhaXQgc2FuZGJveEJhY2tlbmRJZFBhcnRzUmVzb2x2ZXIucmVzb2x2ZSgpO1xuICAgIGlmICghc2FuZGJveE5hbWUpIHtcbiAgICAgIHJldHVybiBzYW5kYm94QmFja2VuZElkUGFydHM7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAuLi5zYW5kYm94QmFja2VuZElkUGFydHMsXG4gICAgICBuYW1lOiBzYW5kYm94TmFtZSxcbiAgICB9O1xuICB9O1xuXG4gIGNvbnN0IHNhbmRib3hGYWN0b3J5ID0gbmV3IFNhbmRib3hTaW5nbGV0b25GYWN0b3J5KFxuICAgIHNhbmRib3hCYWNrZW5kSWRlbnRpZmllclJlc29sdmVyXG4gICk7XG4gIGNvbnN0IGNsaWVudENvbmZpZ0dlbmVyYXRvckFkYXB0ZXIgPSBuZXcgQ2xpZW50Q29uZmlnR2VuZXJhdG9yQWRhcHRlcihcbiAgICBjcmVkZW50aWFsUHJvdmlkZXJcbiAgKTtcblxuICBjb25zdCBsaWJyYXJ5VmVyc2lvbiA9XG4gICAgbmV3IFBhY2thZ2VKc29uUmVhZGVyKCkucmVhZChcbiAgICAgIGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi4vLi4vLi4vcGFja2FnZS5qc29uJywgaW1wb3J0Lm1ldGEudXJsKSlcbiAgICApLnZlcnNpb24gPz8gJyc7XG5cbiAgY29uc3QgZXZlbnRIYW5kbGVyRmFjdG9yeSA9IG5ldyBTYW5kYm94RXZlbnRIYW5kbGVyRmFjdG9yeShcbiAgICBzYW5kYm94QmFja2VuZElkZW50aWZpZXJSZXNvbHZlcixcbiAgICBhc3luYyAoKSA9PiBhd2FpdCBuZXcgVXNhZ2VEYXRhRW1pdHRlckZhY3RvcnkoKS5nZXRJbnN0YW5jZShsaWJyYXJ5VmVyc2lvbilcbiAgKTtcblxuICBjb25zdCBjb21tYW5kTWlkZGxlV2FyZSA9IG5ldyBDb21tYW5kTWlkZGxld2FyZSgpO1xuICByZXR1cm4gbmV3IFNhbmRib3hDb21tYW5kKFxuICAgIHNhbmRib3hGYWN0b3J5LFxuICAgIFtuZXcgU2FuZGJveERlbGV0ZUNvbW1hbmQoc2FuZGJveEZhY3RvcnkpLCBjcmVhdGVTYW5kYm94U2VjcmV0Q29tbWFuZCgpXSxcbiAgICBjbGllbnRDb25maWdHZW5lcmF0b3JBZGFwdGVyLFxuICAgIGNvbW1hbmRNaWRkbGVXYXJlLFxuICAgIGV2ZW50SGFuZGxlckZhY3RvcnkuZ2V0U2FuZGJveEV2ZW50SGFuZGxlcnNcbiAgKTtcbn07XG4iXX0=