import { AmplifyPrompter } from '@aws-amplify/cli-core';
import { handleCommandFailure } from '../../../command_failure_handler.js';
/**
 * Command that deletes the sandbox environment.
 */
export class SandboxDeleteCommand {
    sandboxFactory;
    /**
     * @inheritDoc
     */
    command;
    /**
     * @inheritDoc
     */
    describe;
    /**
     * Deletes sandbox environment.
     */
    constructor(sandboxFactory) {
        this.sandboxFactory = sandboxFactory;
        this.command = 'delete';
        this.describe = 'Deletes sandbox environment';
    }
    /**
     * @inheritDoc
     */
    handler = async (args) => {
        let isConfirmed = args.yes;
        if (!isConfirmed) {
            isConfirmed = await AmplifyPrompter.yesOrNo({
                message: "Are you sure you want to delete all the resources in your sandbox environment (This can't be undone)?",
            });
        }
        if (isConfirmed) {
            await (await this.sandboxFactory.getInstance()).delete({ name: args.name });
        }
    };
    /**
     * @inheritDoc
     */
    builder = (yargs) => {
        return yargs
            .option('yes', {
            describe: 'Do not ask for confirmation before deleting the sandbox environment',
            type: 'boolean',
            array: false,
            alias: 'y',
        })
            .option('name', {
            describe: 'An optional name to distinguish between different sandbox environments. Default is the name in your package.json',
            type: 'string',
            array: false,
        })
            .check((argv) => {
            if (argv.name) {
                const projectNameRegex = /^[a-zA-Z0-9-]{1,15}$/;
                if (!argv.name.match(projectNameRegex)) {
                    throw new Error(`--name should match [a-zA-Z0-9-] and less than 15 characters.`);
                }
            }
            return true;
        })
            .fail((msg, err) => {
            handleCommandFailure(msg, err, yargs);
            yargs.exit(1, err);
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9kZWxldGVfY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21tYW5kcy9zYW5kYm94L3NhbmRib3gtZGVsZXRlL3NhbmRib3hfZGVsZXRlX2NvbW1hbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRTNFOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9CQUFvQjtJQWdCRjtJQWI3Qjs7T0FFRztJQUNNLE9BQU8sQ0FBUztJQUV6Qjs7T0FFRztJQUNNLFFBQVEsQ0FBUztJQUUxQjs7T0FFRztJQUNILFlBQTZCLGNBQXVDO1FBQXZDLG1CQUFjLEdBQWQsY0FBYyxDQUF5QjtRQUNsRSxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLDZCQUE2QixDQUFDO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU8sR0FBRyxLQUFLLEVBQ2IsSUFBcUQsRUFDdEMsRUFBRTtRQUNqQixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsV0FBVyxHQUFHLE1BQU0sZUFBZSxDQUFDLE9BQU8sQ0FBQztnQkFDMUMsT0FBTyxFQUNMLHVHQUF1RzthQUMxRyxDQUFDLENBQUM7U0FDSjtRQUVELElBQUksV0FBVyxFQUFFO1lBQ2YsTUFBTSxDQUNKLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FDeEMsQ0FBQyxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDL0I7SUFDSCxDQUFDLENBQUM7SUFFRjs7T0FFRztJQUNILE9BQU8sR0FBRyxDQUFDLEtBQVcsRUFBcUMsRUFBRTtRQUMzRCxPQUFPLEtBQUs7YUFDVCxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2IsUUFBUSxFQUNOLHFFQUFxRTtZQUN2RSxJQUFJLEVBQUUsU0FBUztZQUNmLEtBQUssRUFBRSxLQUFLO1lBQ1osS0FBSyxFQUFFLEdBQUc7U0FDWCxDQUFDO2FBQ0QsTUFBTSxDQUFDLE1BQU0sRUFBRTtZQUNkLFFBQVEsRUFDTixrSEFBa0g7WUFDcEgsSUFBSSxFQUFFLFFBQVE7WUFDZCxLQUFLLEVBQUUsS0FBSztTQUNiLENBQUM7YUFDRCxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNkLElBQUksSUFBSSxDQUFDLElBQUksRUFBRTtnQkFDYixNQUFNLGdCQUFnQixHQUFHLHNCQUFzQixDQUFDO2dCQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFDdEMsTUFBTSxJQUFJLEtBQUssQ0FDYiwrREFBK0QsQ0FDaEUsQ0FBQztpQkFDSDthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7YUFDRCxJQUFJLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDakIsb0JBQW9CLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUN0QyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXJndW1lbnRzQ2FtZWxDYXNlLCBBcmd2LCBDb21tYW5kTW9kdWxlIH0gZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgU2FuZGJveFNpbmdsZXRvbkZhY3RvcnkgfSBmcm9tICdAYXdzLWFtcGxpZnkvc2FuZGJveCc7XG5pbXBvcnQgeyBBbXBsaWZ5UHJvbXB0ZXIgfSBmcm9tICdAYXdzLWFtcGxpZnkvY2xpLWNvcmUnO1xuaW1wb3J0IHsgaGFuZGxlQ29tbWFuZEZhaWx1cmUgfSBmcm9tICcuLi8uLi8uLi9jb21tYW5kX2ZhaWx1cmVfaGFuZGxlci5qcyc7XG5cbi8qKlxuICogQ29tbWFuZCB0aGF0IGRlbGV0ZXMgdGhlIHNhbmRib3ggZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW5kYm94RGVsZXRlQ29tbWFuZFxuICBpbXBsZW1lbnRzIENvbW1hbmRNb2R1bGU8b2JqZWN0LCBTYW5kYm94RGVsZXRlQ29tbWFuZE9wdGlvbnM+XG57XG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgY29tbWFuZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgcmVhZG9ubHkgZGVzY3JpYmU6IHN0cmluZztcblxuICAvKipcbiAgICogRGVsZXRlcyBzYW5kYm94IGVudmlyb25tZW50LlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzYW5kYm94RmFjdG9yeTogU2FuZGJveFNpbmdsZXRvbkZhY3RvcnkpIHtcbiAgICB0aGlzLmNvbW1hbmQgPSAnZGVsZXRlJztcbiAgICB0aGlzLmRlc2NyaWJlID0gJ0RlbGV0ZXMgc2FuZGJveCBlbnZpcm9ubWVudCc7XG4gIH1cblxuICAvKipcbiAgICogQGluaGVyaXREb2NcbiAgICovXG4gIGhhbmRsZXIgPSBhc3luYyAoXG4gICAgYXJnczogQXJndW1lbnRzQ2FtZWxDYXNlPFNhbmRib3hEZWxldGVDb21tYW5kT3B0aW9ucz5cbiAgKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgbGV0IGlzQ29uZmlybWVkID0gYXJncy55ZXM7XG4gICAgaWYgKCFpc0NvbmZpcm1lZCkge1xuICAgICAgaXNDb25maXJtZWQgPSBhd2FpdCBBbXBsaWZ5UHJvbXB0ZXIueWVzT3JObyh7XG4gICAgICAgIG1lc3NhZ2U6XG4gICAgICAgICAgXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIGFsbCB0aGUgcmVzb3VyY2VzIGluIHlvdXIgc2FuZGJveCBlbnZpcm9ubWVudCAoVGhpcyBjYW4ndCBiZSB1bmRvbmUpP1wiLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKGlzQ29uZmlybWVkKSB7XG4gICAgICBhd2FpdCAoXG4gICAgICAgIGF3YWl0IHRoaXMuc2FuZGJveEZhY3RvcnkuZ2V0SW5zdGFuY2UoKVxuICAgICAgKS5kZWxldGUoeyBuYW1lOiBhcmdzLm5hbWUgfSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBAaW5oZXJpdERvY1xuICAgKi9cbiAgYnVpbGRlciA9ICh5YXJnczogQXJndik6IEFyZ3Y8U2FuZGJveERlbGV0ZUNvbW1hbmRPcHRpb25zPiA9PiB7XG4gICAgcmV0dXJuIHlhcmdzXG4gICAgICAub3B0aW9uKCd5ZXMnLCB7XG4gICAgICAgIGRlc2NyaWJlOlxuICAgICAgICAgICdEbyBub3QgYXNrIGZvciBjb25maXJtYXRpb24gYmVmb3JlIGRlbGV0aW5nIHRoZSBzYW5kYm94IGVudmlyb25tZW50JyxcbiAgICAgICAgdHlwZTogJ2Jvb2xlYW4nLFxuICAgICAgICBhcnJheTogZmFsc2UsXG4gICAgICAgIGFsaWFzOiAneScsXG4gICAgICB9KVxuICAgICAgLm9wdGlvbignbmFtZScsIHtcbiAgICAgICAgZGVzY3JpYmU6XG4gICAgICAgICAgJ0FuIG9wdGlvbmFsIG5hbWUgdG8gZGlzdGluZ3Vpc2ggYmV0d2VlbiBkaWZmZXJlbnQgc2FuZGJveCBlbnZpcm9ubWVudHMuIERlZmF1bHQgaXMgdGhlIG5hbWUgaW4geW91ciBwYWNrYWdlLmpzb24nLFxuICAgICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgICAgYXJyYXk6IGZhbHNlLFxuICAgICAgfSlcbiAgICAgIC5jaGVjaygoYXJndikgPT4ge1xuICAgICAgICBpZiAoYXJndi5uYW1lKSB7XG4gICAgICAgICAgY29uc3QgcHJvamVjdE5hbWVSZWdleCA9IC9eW2EtekEtWjAtOS1dezEsMTV9JC87XG4gICAgICAgICAgaWYgKCFhcmd2Lm5hbWUubWF0Y2gocHJvamVjdE5hbWVSZWdleCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgYC0tbmFtZSBzaG91bGQgbWF0Y2ggW2EtekEtWjAtOS1dIGFuZCBsZXNzIHRoYW4gMTUgY2hhcmFjdGVycy5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pXG4gICAgICAuZmFpbCgobXNnLCBlcnIpID0+IHtcbiAgICAgICAgaGFuZGxlQ29tbWFuZEZhaWx1cmUobXNnLCBlcnIsIHlhcmdzKTtcbiAgICAgICAgeWFyZ3MuZXhpdCgxLCBlcnIpO1xuICAgICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCB0eXBlIFNhbmRib3hEZWxldGVDb21tYW5kT3B0aW9ucyA9IHtcbiAgeWVzPzogYm9vbGVhbjtcbiAgbmFtZT86IHN0cmluZztcbn07XG4iXX0=