/// <reference types="node" resolution-mode="require"/>
import { AmplifySandboxExecutor } from './sandbox_executor.js';
import { BackendIdSandboxResolver, Sandbox, SandboxDeleteOptions, SandboxEvents, SandboxOptions } from './sandbox.js';
import _open from 'open';
import EventEmitter from 'events';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
export declare const CDK_BOOTSTRAP_STACK_NAME = "CDKToolkit";
export declare const CDK_BOOTSTRAP_VERSION_KEY = "BootstrapVersion";
export declare const CDK_MIN_BOOTSTRAP_VERSION = 6;
/**
 * Constructs Amplify Console bootstrap URL for a given region
 * @param region AWS region
 * @returns Amplify Console bootstrap URL
 */
export declare const getBootstrapUrl: (region: string) => string;
/**
 * Runs a file watcher and deploys
 */
export declare class FileWatchingSandbox extends EventEmitter implements Sandbox {
    private readonly backendIdSandboxResolver;
    private readonly executor;
    private readonly cfnClient;
    private readonly open;
    private watcherSubscription;
    private outputFilesExcludedFromWatch;
    private filesChangesTracker;
    /**
     * Creates a watcher process for this instance
     */
    constructor(backendIdSandboxResolver: BackendIdSandboxResolver, executor: AmplifySandboxExecutor, cfnClient: CloudFormationClient, open?: typeof _open);
    /**
     * @inheritdoc
     */
    emit(eventName: SandboxEvents, ...args: unknown[]): boolean;
    /**
     * @inheritdoc
     */
    on(eventName: SandboxEvents, listener: (...args: unknown[]) => void): this;
    /**
     * @inheritdoc
     */
    start: (options: SandboxOptions) => Promise<void>;
    /**
     * @inheritdoc
     */
    stop: () => Promise<void>;
    /**
     * @inheritdoc
     */
    delete: (options: SandboxDeleteOptions) => Promise<void>;
    private shouldValidateAppSources;
    private deploy;
    private reset;
    /**
     * Just a shorthand console log to indicate whenever watcher is going idle
     */
    private emitWatching;
    /**
     * Reads and parses .gitignore file and returns the list of paths
     */
    private getGitIgnoredPaths;
    /**
     * Checks if a given region has been bootstrapped with >= min version using CFN describeStacks with CDKToolKit.
     * @returns A Boolean that represents if region has been bootstrapped.
     */
    private isBootstrapped;
    /**
     * Generates a printable error message from the thrown error
     */
    private getErrorMessage;
    private handleUnsupportedDestructiveChanges;
}
//# sourceMappingURL=file_watching_sandbox.d.ts.map