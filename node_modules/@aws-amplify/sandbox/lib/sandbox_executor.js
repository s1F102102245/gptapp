import debounce from 'debounce-promise';
/**
 * Execute CDK commands.
 */
export class AmplifySandboxExecutor {
    backendDeployer;
    secretClient;
    /**
     * Creates an AmplifySandboxExecutor instance
     */
    constructor(backendDeployer, secretClient) {
        this.backendDeployer = backendDeployer;
        this.secretClient = secretClient;
    }
    getSecretLastUpdated = async (backendId) => {
        const secrets = await this.secretClient.listSecrets(backendId);
        let latestTimestamp = -1;
        let secretLastUpdate;
        secrets.forEach((secret) => {
            if (!secret.lastUpdated) {
                return;
            }
            const curTimeStamp = secret.lastUpdated.getTime();
            if (curTimeStamp > 0 && curTimeStamp > latestTimestamp) {
                latestTimestamp = curTimeStamp;
                secretLastUpdate = secret.lastUpdated;
            }
        });
        return secretLastUpdate;
    };
    /**
     * Deploys sandbox
     */
    deploy = async (backendId, validateAppSourcesProvider) => {
        console.debug('[Sandbox] Executing command `deploy`');
        const secretLastUpdated = await this.getSecretLastUpdated(backendId);
        return this.invoke(() => {
            // it's important to get information here so that information
            // doesn't get lost while debouncing
            const validateAppSources = validateAppSourcesProvider();
            return this.backendDeployer.deploy(backendId, {
                deploymentType: 'sandbox',
                secretLastUpdated,
                validateAppSources,
            });
        });
    };
    /**
     * Destroy sandbox. Do not swallow errors
     */
    destroy = (backendId) => {
        console.debug('[Sandbox] Executing command `destroy`');
        return this.invoke(() => this.backendDeployer.destroy(backendId, {
            deploymentType: 'sandbox',
        }));
    };
    /**
     * Function that invokes the callback with debounce.
     * Debounce is needed in case multiple duplicate events are received.
     */
    invoke = debounce(async (callback) => await callback(), 100);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuZGJveF9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zYW5kYm94X2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sUUFBUSxNQUFNLGtCQUFrQixDQUFDO0FBU3hDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHNCQUFzQjtJQUtkO0lBQ0E7SUFMbkI7O09BRUc7SUFDSCxZQUNtQixlQUFnQyxFQUNoQyxZQUEwQjtRQUQxQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMsaUJBQVksR0FBWixZQUFZLENBQWM7SUFDMUMsQ0FBQztJQUVJLG9CQUFvQixHQUFHLEtBQUssRUFDbEMsU0FBNEIsRUFDRCxFQUFFO1FBQzdCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0QsSUFBSSxlQUFlLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekIsSUFBSSxnQkFBa0MsQ0FBQztRQUV2QyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7Z0JBQ3ZCLE9BQU87YUFDUjtZQUNELE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDbEQsSUFBSSxZQUFZLEdBQUcsQ0FBQyxJQUFJLFlBQVksR0FBRyxlQUFlLEVBQUU7Z0JBQ3RELGVBQWUsR0FBRyxZQUFZLENBQUM7Z0JBQy9CLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7YUFDdkM7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQyxDQUFDO0lBRUY7O09BRUc7SUFDSCxNQUFNLEdBQUcsS0FBSyxFQUNaLFNBQTRCLEVBQzVCLDBCQUF5QyxFQUNsQixFQUFFO1FBQ3pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0NBQXNDLENBQUMsQ0FBQztRQUN0RCxNQUFNLGlCQUFpQixHQUFHLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXJFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDdEIsNkRBQTZEO1lBQzdELG9DQUFvQztZQUNwQyxNQUFNLGtCQUFrQixHQUFHLDBCQUEwQixFQUFFLENBQUM7WUFDeEQsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Z0JBQzVDLGNBQWMsRUFBRSxTQUFTO2dCQUN6QixpQkFBaUI7Z0JBQ2pCLGtCQUFrQjthQUNuQixDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztJQUVGOztPQUVHO0lBQ0gsT0FBTyxHQUFHLENBQUMsU0FBNkIsRUFBMEIsRUFBRTtRQUNsRSxPQUFPLENBQUMsS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7UUFDdkQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUN0QixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUU7WUFDdEMsY0FBYyxFQUFFLFNBQVM7U0FDMUIsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDLENBQUM7SUFFRjs7O09BR0c7SUFDSyxNQUFNLEdBQUcsUUFBUSxDQUN2QixLQUFLLEVBQ0gsUUFBcUQsRUFDZCxFQUFFLENBQUMsTUFBTSxRQUFRLEVBQUUsRUFDNUQsR0FBRyxDQUNKLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJvdW5jZSBmcm9tICdkZWJvdW5jZS1wcm9taXNlJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyIH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQge1xuICBCYWNrZW5kRGVwbG95ZXIsXG4gIERlcGxveVJlc3VsdCxcbiAgRGVzdHJveVJlc3VsdCxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtZGVwbG95ZXInO1xuaW1wb3J0IHsgU2VjcmV0Q2xpZW50IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtc2VjcmV0JztcblxuLyoqXG4gKiBFeGVjdXRlIENESyBjb21tYW5kcy5cbiAqL1xuZXhwb3J0IGNsYXNzIEFtcGxpZnlTYW5kYm94RXhlY3V0b3Ige1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBBbXBsaWZ5U2FuZGJveEV4ZWN1dG9yIGluc3RhbmNlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGJhY2tlbmREZXBsb3llcjogQmFja2VuZERlcGxveWVyLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc2VjcmV0Q2xpZW50OiBTZWNyZXRDbGllbnRcbiAgKSB7fVxuXG4gIHByaXZhdGUgZ2V0U2VjcmV0TGFzdFVwZGF0ZWQgPSBhc3luYyAoXG4gICAgYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllclxuICApOiBQcm9taXNlPERhdGUgfCB1bmRlZmluZWQ+ID0+IHtcbiAgICBjb25zdCBzZWNyZXRzID0gYXdhaXQgdGhpcy5zZWNyZXRDbGllbnQubGlzdFNlY3JldHMoYmFja2VuZElkKTtcbiAgICBsZXQgbGF0ZXN0VGltZXN0YW1wID0gLTE7XG4gICAgbGV0IHNlY3JldExhc3RVcGRhdGU6IERhdGUgfCB1bmRlZmluZWQ7XG5cbiAgICBzZWNyZXRzLmZvckVhY2goKHNlY3JldCkgPT4ge1xuICAgICAgaWYgKCFzZWNyZXQubGFzdFVwZGF0ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY3VyVGltZVN0YW1wID0gc2VjcmV0Lmxhc3RVcGRhdGVkLmdldFRpbWUoKTtcbiAgICAgIGlmIChjdXJUaW1lU3RhbXAgPiAwICYmIGN1clRpbWVTdGFtcCA+IGxhdGVzdFRpbWVzdGFtcCkge1xuICAgICAgICBsYXRlc3RUaW1lc3RhbXAgPSBjdXJUaW1lU3RhbXA7XG4gICAgICAgIHNlY3JldExhc3RVcGRhdGUgPSBzZWNyZXQubGFzdFVwZGF0ZWQ7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2VjcmV0TGFzdFVwZGF0ZTtcbiAgfTtcblxuICAvKipcbiAgICogRGVwbG95cyBzYW5kYm94XG4gICAqL1xuICBkZXBsb3kgPSBhc3luYyAoXG4gICAgYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllcixcbiAgICB2YWxpZGF0ZUFwcFNvdXJjZXNQcm92aWRlcjogKCkgPT4gYm9vbGVhblxuICApOiBQcm9taXNlPERlcGxveVJlc3VsdD4gPT4ge1xuICAgIGNvbnNvbGUuZGVidWcoJ1tTYW5kYm94XSBFeGVjdXRpbmcgY29tbWFuZCBgZGVwbG95YCcpO1xuICAgIGNvbnN0IHNlY3JldExhc3RVcGRhdGVkID0gYXdhaXQgdGhpcy5nZXRTZWNyZXRMYXN0VXBkYXRlZChiYWNrZW5kSWQpO1xuXG4gICAgcmV0dXJuIHRoaXMuaW52b2tlKCgpID0+IHtcbiAgICAgIC8vIGl0J3MgaW1wb3J0YW50IHRvIGdldCBpbmZvcm1hdGlvbiBoZXJlIHNvIHRoYXQgaW5mb3JtYXRpb25cbiAgICAgIC8vIGRvZXNuJ3QgZ2V0IGxvc3Qgd2hpbGUgZGVib3VuY2luZ1xuICAgICAgY29uc3QgdmFsaWRhdGVBcHBTb3VyY2VzID0gdmFsaWRhdGVBcHBTb3VyY2VzUHJvdmlkZXIoKTtcbiAgICAgIHJldHVybiB0aGlzLmJhY2tlbmREZXBsb3llci5kZXBsb3koYmFja2VuZElkLCB7XG4gICAgICAgIGRlcGxveW1lbnRUeXBlOiAnc2FuZGJveCcsXG4gICAgICAgIHNlY3JldExhc3RVcGRhdGVkLFxuICAgICAgICB2YWxpZGF0ZUFwcFNvdXJjZXMsXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvKipcbiAgICogRGVzdHJveSBzYW5kYm94LiBEbyBub3Qgc3dhbGxvdyBlcnJvcnNcbiAgICovXG4gIGRlc3Ryb3kgPSAoYmFja2VuZElkPzogQmFja2VuZElkZW50aWZpZXIpOiBQcm9taXNlPERlc3Ryb3lSZXN1bHQ+ID0+IHtcbiAgICBjb25zb2xlLmRlYnVnKCdbU2FuZGJveF0gRXhlY3V0aW5nIGNvbW1hbmQgYGRlc3Ryb3lgJyk7XG4gICAgcmV0dXJuIHRoaXMuaW52b2tlKCgpID0+XG4gICAgICB0aGlzLmJhY2tlbmREZXBsb3llci5kZXN0cm95KGJhY2tlbmRJZCwge1xuICAgICAgICBkZXBsb3ltZW50VHlwZTogJ3NhbmRib3gnLFxuICAgICAgfSlcbiAgICApO1xuICB9O1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIGNhbGxiYWNrIHdpdGggZGVib3VuY2UuXG4gICAqIERlYm91bmNlIGlzIG5lZWRlZCBpbiBjYXNlIG11bHRpcGxlIGR1cGxpY2F0ZSBldmVudHMgYXJlIHJlY2VpdmVkLlxuICAgKi9cbiAgcHJpdmF0ZSBpbnZva2UgPSBkZWJvdW5jZShcbiAgICBhc3luYyAoXG4gICAgICBjYWxsYmFjazogKCkgPT4gUHJvbWlzZTxEZXBsb3lSZXN1bHQgfCBEZXN0cm95UmVzdWx0PlxuICAgICk6IFByb21pc2U8RGVwbG95UmVzdWx0IHwgRGVzdHJveVJlc3VsdD4gPT4gYXdhaXQgY2FsbGJhY2soKSxcbiAgICAxMDBcbiAgKTtcbn1cbiJdfQ==