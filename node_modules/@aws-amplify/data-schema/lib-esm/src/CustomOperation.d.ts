import { SetTypeSubArg, Brand } from '@aws-amplify/data-schema-types';
import { ModelField, InternalField } from './ModelField';
import { Authorization } from './Authorization';
import { RefType, InternalRef } from './RefType';
import { EnumType, EnumTypeParamShape } from './EnumType';
type CustomArguments = Record<string, ModelField<any, any> | EnumType<EnumTypeParamShape>>;
type CustomReturnType = RefType<any>;
type CustomFunctionRefType = string;
type InternalCustomArguments = Record<string, InternalField>;
type InternalCustomReturnType = InternalRef;
declare const brandName = "customOperation";
export declare const CustomOperationNames: readonly ["Query", "Mutation", "Subscription"];
type CustomOperationName = (typeof CustomOperationNames)[number];
type CustomData = {
    arguments: CustomArguments;
    returnType: CustomReturnType | null;
    functionRef: string | null;
    authorization: Authorization<any, any, any>[];
    typeName: CustomOperationName;
};
type InternalCustomData = CustomData & {
    arguments: InternalCustomArguments;
    returnType: InternalCustomReturnType;
    functionRef: string | null;
    authorization: Authorization<any, any, any>[];
};
export type CustomOperationParamShape = {
    arguments: CustomArguments;
    returnType: CustomReturnType | null;
    functionRef: string | null;
    authorization: Authorization<any, any, any>[];
    typeName: CustomOperationName;
};
export type CustomOperation<T extends CustomOperationParamShape, K extends keyof CustomOperation<T> = never> = Omit<{
    arguments<Arguments extends CustomArguments>(args: Arguments): CustomOperation<SetTypeSubArg<T, 'arguments', Arguments>, K | 'arguments'>;
    returns<ReturnType extends CustomReturnType>(returnType: ReturnType): CustomOperation<SetTypeSubArg<T, 'returnType', ReturnType>, K | 'returns'>;
    function<FunctionRef extends CustomFunctionRefType>(functionRefOrName: FunctionRef): CustomOperation<SetTypeSubArg<T, 'functionRef', FunctionRef>, K | 'function'>;
    authorization<AuthRuleType extends Authorization<any, any, any>>(rules: AuthRuleType[]): CustomOperation<SetTypeSubArg<T, 'authorization', AuthRuleType[]>, K | 'authorization'>;
}, K> & Brand<object, typeof brandName>;
/**
 * Internal representation of Custom Type that exposes the `data` property.
 * Used at buildtime.
 */
export type InternalCustom = CustomOperation<any> & {
    data: InternalCustomData;
};
export declare function query(): CustomOperation<{
    arguments: CustomArguments;
    returnType: null;
    functionRef: null;
    authorization: [];
    typeName: 'Query';
}>;
export declare function mutation(): CustomOperation<{
    arguments: CustomArguments;
    returnType: null;
    functionRef: null;
    authorization: [];
    typeName: 'Mutation';
}>;
export declare function subscription(): CustomOperation<{
    arguments: CustomArguments;
    returnType: null;
    functionRef: null;
    authorization: [];
    typeName: 'Subscription';
}>;
export {};
