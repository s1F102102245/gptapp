"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = exports.isModelSchema = exports.__auth = void 0;
var ModelField_1 = require("./ModelField");
Object.defineProperty(exports, "__auth", { enumerable: true, get: function () { return ModelField_1.__auth; } });
const SchemaProcessor_1 = require("./SchemaProcessor");
/**
 * Model Schema type guard
 * @param schema - api-next ModelSchema or string
 * @returns true if the given value is a ModelSchema
 */
const isModelSchema = (schema) => {
    return typeof schema === 'object' && schema.data !== undefined;
};
exports.isModelSchema = isModelSchema;
function _schema(types) {
    const data = { types, authorization: [] };
    const transform = () => {
        const internalSchema = { data };
        return (0, SchemaProcessor_1.processSchema)({ schema: internalSchema });
    };
    const authorization = (rules) => {
        data.authorization = rules;
        return { data, transform };
    };
    return { data, transform, authorization };
}
/**
 * The API and data model definition for Amplify Data. Pass in `{ <NAME>: a.model(...) }` to create a database table
 * and exposes CRUDL operations via an API.
 * @param types The API and data model definition
 * @returns An API and data model definition to be deployed with Amplify (Gen 2) experience (`processSchema(...)`)
 * or with the Amplify Data CDK construct (`@aws-amplify/data-construct`)
 */
function schema(types) {
    return _schema(types);
}
exports.schema = schema;
