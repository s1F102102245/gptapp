import { SetTypeSubArg, Brand } from '@aws-amplify/data-schema-types';
import { Authorization } from './Authorization';
import { __auth } from './ModelField';
declare const brandName = "ref";
type RefTypeData = {
    type: 'ref';
    link: string;
    required: boolean;
    authorization: Authorization<any, any, any>[];
};
export type RefTypeParamShape = {
    type: 'ref';
    link: string;
    required: boolean;
    authorization: Authorization<any, any, any>[];
};
export type RefType<T extends RefTypeParamShape, K extends keyof RefType<T> = never, Auth = undefined> = Omit<{
    /**
     * Marks a field as required.
     */
    required(): RefType<SetTypeSubArg<T, 'required', true>, K | 'required'>;
    /**
     * Configures field-level authorization rules. Pass in an array of authorizations `(a.allow.____)` to mix and match
     * multiple authorization rules for this field.
     */
    authorization<AuthRuleType extends Authorization<any, any, any>>(rules: AuthRuleType[]): RefType<T, K | 'authorization', AuthRuleType>;
}, K> & {
    [__auth]?: Auth;
} & Brand<object, typeof brandName>;
/**
 * Internal representation of Ref that exposes the `data` property.
 * Used at buildtime.
 */
export type InternalRef = RefType<RefTypeParamShape> & {
    data: RefTypeData;
};
type RefTypeArgFactory<Link extends string> = {
    type: 'ref';
    link: Link;
    required: false;
    authorization: [];
};
export declare function ref<Value extends string, T extends Value>(link: T): RefType<RefTypeArgFactory<T>, never, undefined>;
export {};
