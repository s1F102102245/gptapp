import { AmplifyLambdaFunction, } from '@aws-amplify/function-construct-alpha';
import { execaCommand } from 'execa';
import * as path from 'path';
import { getCallerDirectory } from './get_caller_directory.js';
/**
 * Create Lambda functions in the context of an Amplify backend definition
 */
export class AmplifyFunctionFactory {
    props;
    // execaCommand is assigned to a static prop so that it can be mocked in tests
    static commandExecutor = execaCommand;
    generator;
    /**
     * Create a new AmplifyFunctionFactory
     */
    constructor(props) {
        this.props = props;
    }
    /**
     * Create a function from a directory that contains pre-built code
     */
    static fromDir = (props) => {
        const absoluteCodePath = path.isAbsolute(props.codePath)
            ? props.codePath
            : path.resolve(getCallerDirectory(new Error().stack), props.codePath);
        return new AmplifyFunctionFactory({
            name: props.name,
            absoluteCodePath,
            runtime: props.runtime,
            handler: props.handler,
        });
    };
    /**
     * Create a function by executing a build command that places build artifacts at a specified location
     *
     * TODO: Investigate long-term function building strategy: https://github.com/aws-amplify/amplify-backend/issues/92
     */
    static build = async (props) => {
        const importPath = getCallerDirectory(new Error().stack);
        await AmplifyFunctionFactory.commandExecutor(props.buildCommand, {
            cwd: importPath,
            stdio: 'inherit',
            shell: 'bash',
        });
        const absoluteCodePath = path.isAbsolute(props.outDir)
            ? props.outDir
            : path.resolve(importPath, props.outDir);
        return new AmplifyFunctionFactory({
            name: props.name,
            absoluteCodePath,
            runtime: props.runtime,
            handler: props.handler,
        });
    };
    /**
     * Creates an instance of AmplifyFunction within the provided Amplify context
     */
    getInstance = ({ constructContainer, }) => {
        if (!this.generator) {
            this.generator = new AmplifyFunctionGenerator(this.props);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
class AmplifyFunctionGenerator {
    props;
    resourceGroupName = 'function';
    constructor(props) {
        this.props = props;
    }
    generateContainerEntry = (scope) => {
        return new AmplifyLambdaFunction(scope, this.props.name, this.props);
    };
}
/**
 * Alias for AmplifyFunctionFactory
 */
export const Func = AmplifyFunctionFactory;
//# sourceMappingURL=data:application/json;base64,