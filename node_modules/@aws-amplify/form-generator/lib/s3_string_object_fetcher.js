import { GetObjectCommand } from '@aws-sdk/client-s3';
/**
 * Handles fetching an object from an s3 bucket and parsing the object contents to a string
 */
export class S3StringObjectFetcher {
    s3Client;
    /**
     * Creates an S3StringObjectFetcher with the provided s3 client
     */
    constructor(s3Client) {
        this.s3Client = s3Client;
    }
    parseS3Uri = (uri) => {
        const { hostname, pathname } = new URL(uri);
        return {
            bucket: hostname,
            key: pathname.replace('/', ''),
        };
    };
    /**
     * Fetches an s3 object and converts its contents to a string
     */
    fetch = async (uri) => {
        const { bucket, key } = this.parseS3Uri(uri);
        const getSchemaCommandResult = await this.s3Client.send(new GetObjectCommand({ Bucket: bucket, Key: key }));
        const schema = await getSchemaCommandResult.Body?.transformToString();
        if (!schema) {
            throw new Error('Error on parsing output schema');
        }
        return schema;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczNfc3RyaW5nX29iamVjdF9mZXRjaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3MzX3N0cmluZ19vYmplY3RfZmV0Y2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQVksTUFBTSxvQkFBb0IsQ0FBQztBQUVoRTs7R0FFRztBQUNILE1BQU0sT0FBTyxxQkFBcUI7SUFJSDtJQUg3Qjs7T0FFRztJQUNILFlBQTZCLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFBRyxDQUFDO0lBRTNDLFVBQVUsR0FBRyxDQUFDLEdBQVcsRUFBbUMsRUFBRTtRQUNwRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLE9BQU87WUFDTCxNQUFNLEVBQUUsUUFBUTtZQUNoQixHQUFHLEVBQUUsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDO1NBQy9CLENBQUM7SUFDSixDQUFDLENBQUM7SUFDRjs7T0FFRztJQUNILEtBQUssR0FBRyxLQUFLLEVBQUUsR0FBVyxFQUFFLEVBQUU7UUFDNUIsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sc0JBQXNCLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDckQsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQ25ELENBQUM7UUFDRixNQUFNLE1BQU0sR0FBRyxNQUFNLHNCQUFzQixDQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBRSxDQUFDO1FBQ3RFLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxNQUFNLElBQUksS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7U0FDbkQ7UUFDRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdldE9iamVjdENvbW1hbmQsIFMzQ2xpZW50IH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXMzJztcblxuLyoqXG4gKiBIYW5kbGVzIGZldGNoaW5nIGFuIG9iamVjdCBmcm9tIGFuIHMzIGJ1Y2tldCBhbmQgcGFyc2luZyB0aGUgb2JqZWN0IGNvbnRlbnRzIHRvIGEgc3RyaW5nXG4gKi9cbmV4cG9ydCBjbGFzcyBTM1N0cmluZ09iamVjdEZldGNoZXIge1xuICAvKipcbiAgICogQ3JlYXRlcyBhbiBTM1N0cmluZ09iamVjdEZldGNoZXIgd2l0aCB0aGUgcHJvdmlkZWQgczMgY2xpZW50XG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHMzQ2xpZW50OiBTM0NsaWVudCkge31cblxuICBwcml2YXRlIHBhcnNlUzNVcmkgPSAodXJpOiBzdHJpbmcpOiB7IGJ1Y2tldDogc3RyaW5nOyBrZXk6IHN0cmluZyB9ID0+IHtcbiAgICBjb25zdCB7IGhvc3RuYW1lLCBwYXRobmFtZSB9ID0gbmV3IFVSTCh1cmkpO1xuICAgIHJldHVybiB7XG4gICAgICBidWNrZXQ6IGhvc3RuYW1lLFxuICAgICAga2V5OiBwYXRobmFtZS5yZXBsYWNlKCcvJywgJycpLFxuICAgIH07XG4gIH07XG4gIC8qKlxuICAgKiBGZXRjaGVzIGFuIHMzIG9iamVjdCBhbmQgY29udmVydHMgaXRzIGNvbnRlbnRzIHRvIGEgc3RyaW5nXG4gICAqL1xuICBmZXRjaCA9IGFzeW5jICh1cmk6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHsgYnVja2V0LCBrZXkgfSA9IHRoaXMucGFyc2VTM1VyaSh1cmkpO1xuICAgIGNvbnN0IGdldFNjaGVtYUNvbW1hbmRSZXN1bHQgPSBhd2FpdCB0aGlzLnMzQ2xpZW50LnNlbmQoXG4gICAgICBuZXcgR2V0T2JqZWN0Q29tbWFuZCh7IEJ1Y2tldDogYnVja2V0LCBLZXk6IGtleSB9KVxuICAgICk7XG4gICAgY29uc3Qgc2NoZW1hID0gYXdhaXQgZ2V0U2NoZW1hQ29tbWFuZFJlc3VsdC5Cb2R5Py50cmFuc2Zvcm1Ub1N0cmluZygpO1xuICAgIGlmICghc2NoZW1hKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Vycm9yIG9uIHBhcnNpbmcgb3V0cHV0IHNjaGVtYScpO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hO1xuICB9O1xufVxuIl19