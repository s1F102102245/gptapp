import { getGenericFromDataStore, } from '@aws-amplify/codegen-ui';
import { parse } from 'graphql';
import * as graphqlCodegen from '@graphql-codegen/core';
import * as appsync from '@aws-amplify/appsync-modelgen-plugin';
import { directives } from './aws_graphql_directives.js';
/**
 * Transforms an AppSync introspection schema for use in form generation
 */
export const transformIntrospectionSchema = async (modelIntrospectionSchema) => {
    const result = await appsync.preset.buildGeneratesSection({
        baseOutputDir: './',
        schema: parse(modelIntrospectionSchema),
        config: {
            directives,
            isTimestampFieldsAdded: true,
            emitAuthProvider: true,
            generateIndexRules: true,
            handleListNullabilityTransparently: true,
            usePipelinedTransformer: true,
            transformerVersion: 2,
            respectPrimaryKeyAttributesOnConnectionField: true,
            improvePluralization: false,
            generateModelsForLazyLoadAndCustomSelectionSet: false,
            target: 'introspection',
            overrideOutputDir: './',
        },
        documents: [],
        pluginMap: {},
        presetConfig: {
            overrideOutputDir: null,
            target: 'typescript',
        },
        plugins: [],
    });
    const results = result.map((cfg) => {
        return graphqlCodegen.codegen({
            ...cfg,
            config: {
                ...cfg.config,
            },
            plugins: [
                {
                    appSyncLocalCodeGen: {},
                },
            ],
            pluginMap: {
                appSyncLocalCodeGen: appsync,
            },
        });
    });
    const [synced] = await Promise.all(results);
    return getGenericFromDataStore(JSON.parse(synced));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtX2FwcHN5bmNfaW50cm9zcGVjdGlvbl9zY2hlbWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdHJhbnNmb3JtX2FwcHN5bmNfaW50cm9zcGVjdGlvbl9zY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHVCQUF1QixHQUN4QixNQUFNLHlCQUF5QixDQUFDO0FBQ2pDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxLQUFLLGNBQWMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEtBQUssT0FBTyxNQUFNLHNDQUFzQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV6RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLEtBQUssRUFDL0Msd0JBQWdDLEVBQ0osRUFBRTtJQUM5QixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMscUJBQXFCLENBQUM7UUFDeEQsYUFBYSxFQUFFLElBQUk7UUFDbkIsTUFBTSxFQUFFLEtBQUssQ0FBQyx3QkFBd0IsQ0FBQztRQUN2QyxNQUFNLEVBQUU7WUFDTixVQUFVO1lBQ1Ysc0JBQXNCLEVBQUUsSUFBSTtZQUM1QixnQkFBZ0IsRUFBRSxJQUFJO1lBQ3RCLGtCQUFrQixFQUFFLElBQUk7WUFDeEIsa0NBQWtDLEVBQUUsSUFBSTtZQUN4Qyx1QkFBdUIsRUFBRSxJQUFJO1lBQzdCLGtCQUFrQixFQUFFLENBQUM7WUFDckIsNENBQTRDLEVBQUUsSUFBSTtZQUNsRCxvQkFBb0IsRUFBRSxLQUFLO1lBQzNCLDhDQUE4QyxFQUFFLEtBQUs7WUFDckQsTUFBTSxFQUFFLGVBQWU7WUFDdkIsaUJBQWlCLEVBQUUsSUFBSTtTQUN4QjtRQUNELFNBQVMsRUFBRSxFQUFFO1FBQ2IsU0FBUyxFQUFFLEVBQUU7UUFDYixZQUFZLEVBQUU7WUFDWixpQkFBaUIsRUFBRSxJQUFJO1lBQ3ZCLE1BQU0sRUFBRSxZQUFZO1NBQ3JCO1FBQ0QsT0FBTyxFQUFFLEVBQUU7S0FDWixDQUFDLENBQUM7SUFDSCxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDakMsT0FBTyxjQUFjLENBQUMsT0FBTyxDQUFDO1lBQzVCLEdBQUcsR0FBRztZQUNOLE1BQU0sRUFBRTtnQkFDTixHQUFHLEdBQUcsQ0FBQyxNQUFNO2FBQ2Q7WUFDRCxPQUFPLEVBQUU7Z0JBQ1A7b0JBQ0UsbUJBQW1CLEVBQUUsRUFBRTtpQkFDeEI7YUFDRjtZQUNELFNBQVMsRUFBRTtnQkFDVCxtQkFBbUIsRUFBRSxPQUFPO2FBQzdCO1NBQ0YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLE9BQU8sdUJBQXVCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3JELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEdlbmVyaWNEYXRhU2NoZW1hLFxuICBnZXRHZW5lcmljRnJvbURhdGFTdG9yZSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2NvZGVnZW4tdWknO1xuaW1wb3J0IHsgcGFyc2UgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCAqIGFzIGdyYXBocWxDb2RlZ2VuIGZyb20gJ0BncmFwaHFsLWNvZGVnZW4vY29yZSc7XG5pbXBvcnQgKiBhcyBhcHBzeW5jIGZyb20gJ0Bhd3MtYW1wbGlmeS9hcHBzeW5jLW1vZGVsZ2VuLXBsdWdpbic7XG5pbXBvcnQgeyBkaXJlY3RpdmVzIH0gZnJvbSAnLi9hd3NfZ3JhcGhxbF9kaXJlY3RpdmVzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm1zIGFuIEFwcFN5bmMgaW50cm9zcGVjdGlvbiBzY2hlbWEgZm9yIHVzZSBpbiBmb3JtIGdlbmVyYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybUludHJvc3BlY3Rpb25TY2hlbWEgPSBhc3luYyAoXG4gIG1vZGVsSW50cm9zcGVjdGlvblNjaGVtYTogc3RyaW5nXG4pOiBQcm9taXNlPEdlbmVyaWNEYXRhU2NoZW1hPiA9PiB7XG4gIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGFwcHN5bmMucHJlc2V0LmJ1aWxkR2VuZXJhdGVzU2VjdGlvbih7XG4gICAgYmFzZU91dHB1dERpcjogJy4vJyxcbiAgICBzY2hlbWE6IHBhcnNlKG1vZGVsSW50cm9zcGVjdGlvblNjaGVtYSksXG4gICAgY29uZmlnOiB7XG4gICAgICBkaXJlY3RpdmVzLFxuICAgICAgaXNUaW1lc3RhbXBGaWVsZHNBZGRlZDogdHJ1ZSxcbiAgICAgIGVtaXRBdXRoUHJvdmlkZXI6IHRydWUsXG4gICAgICBnZW5lcmF0ZUluZGV4UnVsZXM6IHRydWUsXG4gICAgICBoYW5kbGVMaXN0TnVsbGFiaWxpdHlUcmFuc3BhcmVudGx5OiB0cnVlLFxuICAgICAgdXNlUGlwZWxpbmVkVHJhbnNmb3JtZXI6IHRydWUsXG4gICAgICB0cmFuc2Zvcm1lclZlcnNpb246IDIsXG4gICAgICByZXNwZWN0UHJpbWFyeUtleUF0dHJpYnV0ZXNPbkNvbm5lY3Rpb25GaWVsZDogdHJ1ZSxcbiAgICAgIGltcHJvdmVQbHVyYWxpemF0aW9uOiBmYWxzZSxcbiAgICAgIGdlbmVyYXRlTW9kZWxzRm9yTGF6eUxvYWRBbmRDdXN0b21TZWxlY3Rpb25TZXQ6IGZhbHNlLFxuICAgICAgdGFyZ2V0OiAnaW50cm9zcGVjdGlvbicsXG4gICAgICBvdmVycmlkZU91dHB1dERpcjogJy4vJyxcbiAgICB9LFxuICAgIGRvY3VtZW50czogW10sXG4gICAgcGx1Z2luTWFwOiB7fSxcbiAgICBwcmVzZXRDb25maWc6IHtcbiAgICAgIG92ZXJyaWRlT3V0cHV0RGlyOiBudWxsLFxuICAgICAgdGFyZ2V0OiAndHlwZXNjcmlwdCcsXG4gICAgfSxcbiAgICBwbHVnaW5zOiBbXSxcbiAgfSk7XG4gIGNvbnN0IHJlc3VsdHMgPSByZXN1bHQubWFwKChjZmcpID0+IHtcbiAgICByZXR1cm4gZ3JhcGhxbENvZGVnZW4uY29kZWdlbih7XG4gICAgICAuLi5jZmcsXG4gICAgICBjb25maWc6IHtcbiAgICAgICAgLi4uY2ZnLmNvbmZpZyxcbiAgICAgIH0sXG4gICAgICBwbHVnaW5zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBhcHBTeW5jTG9jYWxDb2RlR2VuOiB7fSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBwbHVnaW5NYXA6IHtcbiAgICAgICAgYXBwU3luY0xvY2FsQ29kZUdlbjogYXBwc3luYyxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IFtzeW5jZWRdID0gYXdhaXQgUHJvbWlzZS5hbGwocmVzdWx0cyk7XG4gIHJldHVybiBnZXRHZW5lcmljRnJvbURhdGFTdG9yZShKU09OLnBhcnNlKHN5bmNlZCkpO1xufTtcbiJdfQ==