import { AwsCredentialIdentityProvider } from '@aws-sdk/types';
import { BackendIdentifier, DeploymentType } from '@aws-amplify/plugin-types';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { BackendOutputClient } from './backend_output_client_factory.js';
import { S3Client } from '@aws-sdk/client-s3';
export declare enum ConflictResolutionMode {
    LAMBDA = "LAMBDA",
    OPTIMISTIC_CONCURRENCY = "OPTIMISTIC_CONCURRENCY",
    AUTOMERGE = "AUTOMERGE"
}
export declare enum ApiAuthType {
    API_KEY = "API_KEY",
    AWS_LAMBDA = "AWS_LAMBDA",
    AWS_IAM = "AWS_IAM",
    OPENID_CONNECT = "OPENID_CONNECT",
    AMAZON_COGNITO_USER_POOLS = "AMAZON_COGNITO_USER_POOLS"
}
export type SandboxMetadata = {
    name: string;
    lastUpdated: Date | undefined;
    status: BackendDeploymentStatus;
    backendId: BackendIdentifier | undefined;
};
export type ListSandboxesRequest = {
    nextToken?: string;
};
export type DeployedBackendResource = {
    logicalResourceId?: string;
    lastUpdated?: Date;
    resourceStatus?: string;
    resourceStatusReason?: string;
    resourceType?: string;
    physicalResourceId?: string;
    arn?: string;
};
export type BackendMetadata = {
    name: string;
    lastUpdated: Date | undefined;
    deploymentType: DeploymentType;
    status: BackendDeploymentStatus;
    resources: DeployedBackendResource[];
    apiConfiguration?: {
        status: BackendDeploymentStatus;
        lastUpdated: Date | undefined;
        graphqlEndpoint: string;
        defaultAuthType: ApiAuthType;
        additionalAuthTypes: ApiAuthType[];
        conflictResolutionMode?: ConflictResolutionMode;
        apiId: string;
    };
    authConfiguration?: {
        status: BackendDeploymentStatus;
        lastUpdated: Date | undefined;
        userPoolId: string;
    };
    storageConfiguration?: {
        status: BackendDeploymentStatus;
        lastUpdated: Date | undefined;
        s3BucketName: string;
    };
};
export type ListSandboxesResponse = {
    sandboxes: SandboxMetadata[];
    nextToken: string | undefined;
};
export declare enum BackendDeploymentStatus {
    DEPLOYED = "DEPLOYED",
    FAILED = "FAILED",
    DEPLOYING = "DEPLOYING",
    DELETING = "DELETING",
    DELETED = "DELETED",
    UNKNOWN = "UNKNOWN"
}
export type DeployedBackendClient = {
    listSandboxes: (listSandboxesRequest?: ListSandboxesRequest) => Promise<ListSandboxesResponse>;
    deleteSandbox: (sandboxBackendIdentifier: Omit<BackendIdentifier, 'type'>) => Promise<void>;
    getBackendMetadata: (backendId: BackendIdentifier) => Promise<BackendMetadata>;
};
export type DeployedBackendClientOptions = {
    s3Client: S3Client;
    cloudFormationClient: CloudFormationClient;
    backendOutputClient: BackendOutputClient;
};
export type DeployedBackendCredentialsOptions = {
    credentials: AwsCredentialIdentityProvider;
};
export type DeployedBackendClientFactoryOptions = DeployedBackendCredentialsOptions | DeployedBackendClientOptions;
/**
 * Factory to create a DeploymentClient
 */
export declare class DeployedBackendClientFactory {
    /**
     * Returns a single instance of DeploymentClient
     */
    static getInstance(options: DeployedBackendClientFactoryOptions): DeployedBackendClient;
}
//# sourceMappingURL=deployed_backend_client_factory.d.ts.map