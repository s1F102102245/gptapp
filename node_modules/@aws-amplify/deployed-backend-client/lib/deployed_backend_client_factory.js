import { DefaultDeployedBackendClient } from './deployed_backend_client.js';
import { CloudFormationClient } from '@aws-sdk/client-cloudformation';
import { BackendOutputClientFactory, } from './backend_output_client_factory.js';
import { S3Client } from '@aws-sdk/client-s3';
import { DeployedResourcesEnumerator } from './deployed-backend-client/deployed_resources_enumerator.js';
import { StackStatusMapper } from './deployed-backend-client/stack_status_mapper.js';
import { ArnGenerator } from './deployed-backend-client/arn_generator.js';
import { ArnParser } from './deployed-backend-client/arn_parser.js';
export var ConflictResolutionMode;
(function (ConflictResolutionMode) {
    ConflictResolutionMode["LAMBDA"] = "LAMBDA";
    ConflictResolutionMode["OPTIMISTIC_CONCURRENCY"] = "OPTIMISTIC_CONCURRENCY";
    ConflictResolutionMode["AUTOMERGE"] = "AUTOMERGE";
})(ConflictResolutionMode || (ConflictResolutionMode = {}));
export var ApiAuthType;
(function (ApiAuthType) {
    ApiAuthType["API_KEY"] = "API_KEY";
    ApiAuthType["AWS_LAMBDA"] = "AWS_LAMBDA";
    ApiAuthType["AWS_IAM"] = "AWS_IAM";
    ApiAuthType["OPENID_CONNECT"] = "OPENID_CONNECT";
    ApiAuthType["AMAZON_COGNITO_USER_POOLS"] = "AMAZON_COGNITO_USER_POOLS";
})(ApiAuthType || (ApiAuthType = {}));
export var BackendDeploymentStatus;
(function (BackendDeploymentStatus) {
    BackendDeploymentStatus["DEPLOYED"] = "DEPLOYED";
    BackendDeploymentStatus["FAILED"] = "FAILED";
    BackendDeploymentStatus["DEPLOYING"] = "DEPLOYING";
    BackendDeploymentStatus["DELETING"] = "DELETING";
    BackendDeploymentStatus["DELETED"] = "DELETED";
    BackendDeploymentStatus["UNKNOWN"] = "UNKNOWN";
})(BackendDeploymentStatus || (BackendDeploymentStatus = {}));
/**
 * Factory to create a DeploymentClient
 */
export class DeployedBackendClientFactory {
    /**
     * Returns a single instance of DeploymentClient
     */
    static getInstance(options) {
        const stackStatusMapper = new StackStatusMapper();
        const arnGenerator = new ArnGenerator();
        const arnParser = new ArnParser();
        const deployedResourcesEnumerator = new DeployedResourcesEnumerator(stackStatusMapper, arnGenerator, arnParser);
        if ('backendOutputClient' in options &&
            'cloudFormationClient' in options &&
            's3Client' in options) {
            return new DefaultDeployedBackendClient(options.cloudFormationClient, options.s3Client, options.backendOutputClient, deployedResourcesEnumerator, stackStatusMapper, arnParser);
        }
        return new DefaultDeployedBackendClient(new CloudFormationClient(options.credentials), new S3Client(options.credentials), BackendOutputClientFactory.getInstance({
            credentials: options.credentials,
        }), deployedResourcesEnumerator, stackStatusMapper, arnParser);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVwbG95ZWRfYmFja2VuZF9jbGllbnRfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kZXBsb3llZF9iYWNrZW5kX2NsaWVudF9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTVFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RFLE9BQU8sRUFFTCwwQkFBMEIsR0FDM0IsTUFBTSxvQ0FBb0MsQ0FBQztBQUM1QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sNERBQTRELENBQUM7QUFDekcsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDckYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUVwRSxNQUFNLENBQU4sSUFBWSxzQkFJWDtBQUpELFdBQVksc0JBQXNCO0lBQ2hDLDJDQUFpQixDQUFBO0lBQ2pCLDJFQUFpRCxDQUFBO0lBQ2pELGlEQUF1QixDQUFBO0FBQ3pCLENBQUMsRUFKVyxzQkFBc0IsS0FBdEIsc0JBQXNCLFFBSWpDO0FBRUQsTUFBTSxDQUFOLElBQVksV0FNWDtBQU5ELFdBQVksV0FBVztJQUNyQixrQ0FBbUIsQ0FBQTtJQUNuQix3Q0FBeUIsQ0FBQTtJQUN6QixrQ0FBbUIsQ0FBQTtJQUNuQixnREFBaUMsQ0FBQTtJQUNqQyxzRUFBdUQsQ0FBQTtBQUN6RCxDQUFDLEVBTlcsV0FBVyxLQUFYLFdBQVcsUUFNdEI7QUF1REQsTUFBTSxDQUFOLElBQVksdUJBT1g7QUFQRCxXQUFZLHVCQUF1QjtJQUNqQyxnREFBcUIsQ0FBQTtJQUNyQiw0Q0FBaUIsQ0FBQTtJQUNqQixrREFBdUIsQ0FBQTtJQUN2QixnREFBcUIsQ0FBQTtJQUNyQiw4Q0FBbUIsQ0FBQTtJQUNuQiw4Q0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBUFcsdUJBQXVCLEtBQXZCLHVCQUF1QixRQU9sQztBQTRCRDs7R0FFRztBQUNILE1BQU0sT0FBTyw0QkFBNEI7SUFDdkM7O09BRUc7SUFDSCxNQUFNLENBQUMsV0FBVyxDQUNoQixPQUE0QztRQUU1QyxNQUFNLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztRQUNsRCxNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3hDLE1BQU0sU0FBUyxHQUFHLElBQUksU0FBUyxFQUFFLENBQUM7UUFDbEMsTUFBTSwyQkFBMkIsR0FBRyxJQUFJLDJCQUEyQixDQUNqRSxpQkFBaUIsRUFDakIsWUFBWSxFQUNaLFNBQVMsQ0FDVixDQUFDO1FBRUYsSUFDRSxxQkFBcUIsSUFBSSxPQUFPO1lBQ2hDLHNCQUFzQixJQUFJLE9BQU87WUFDakMsVUFBVSxJQUFJLE9BQU8sRUFDckI7WUFDQSxPQUFPLElBQUksNEJBQTRCLENBQ3JDLE9BQU8sQ0FBQyxvQkFBb0IsRUFDNUIsT0FBTyxDQUFDLFFBQVEsRUFDaEIsT0FBTyxDQUFDLG1CQUFtQixFQUMzQiwyQkFBMkIsRUFDM0IsaUJBQWlCLEVBQ2pCLFNBQVMsQ0FDVixDQUFDO1NBQ0g7UUFDRCxPQUFPLElBQUksNEJBQTRCLENBQ3JDLElBQUksb0JBQW9CLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUM3QyxJQUFJLFFBQVEsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQ2pDLDBCQUEwQixDQUFDLFdBQVcsQ0FBQztZQUNyQyxXQUFXLEVBQUUsT0FBTyxDQUFDLFdBQVc7U0FDakMsQ0FBQyxFQUNGLDJCQUEyQixFQUMzQixpQkFBaUIsRUFDakIsU0FBUyxDQUNWLENBQUM7SUFDSixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlciB9IGZyb20gJ0Bhd3Mtc2RrL3R5cGVzJztcbmltcG9ydCB7IERlZmF1bHREZXBsb3llZEJhY2tlbmRDbGllbnQgfSBmcm9tICcuL2RlcGxveWVkX2JhY2tlbmRfY2xpZW50LmpzJztcbmltcG9ydCB7IEJhY2tlbmRJZGVudGlmaWVyLCBEZXBsb3ltZW50VHlwZSB9IGZyb20gJ0Bhd3MtYW1wbGlmeS9wbHVnaW4tdHlwZXMnO1xuaW1wb3J0IHsgQ2xvdWRGb3JtYXRpb25DbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtY2xvdWRmb3JtYXRpb24nO1xuaW1wb3J0IHtcbiAgQmFja2VuZE91dHB1dENsaWVudCxcbiAgQmFja2VuZE91dHB1dENsaWVudEZhY3RvcnksXG59IGZyb20gJy4vYmFja2VuZF9vdXRwdXRfY2xpZW50X2ZhY3RvcnkuanMnO1xuaW1wb3J0IHsgUzNDbGllbnQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtczMnO1xuaW1wb3J0IHsgRGVwbG95ZWRSZXNvdXJjZXNFbnVtZXJhdG9yIH0gZnJvbSAnLi9kZXBsb3llZC1iYWNrZW5kLWNsaWVudC9kZXBsb3llZF9yZXNvdXJjZXNfZW51bWVyYXRvci5qcyc7XG5pbXBvcnQgeyBTdGFja1N0YXR1c01hcHBlciB9IGZyb20gJy4vZGVwbG95ZWQtYmFja2VuZC1jbGllbnQvc3RhY2tfc3RhdHVzX21hcHBlci5qcyc7XG5pbXBvcnQgeyBBcm5HZW5lcmF0b3IgfSBmcm9tICcuL2RlcGxveWVkLWJhY2tlbmQtY2xpZW50L2Fybl9nZW5lcmF0b3IuanMnO1xuaW1wb3J0IHsgQXJuUGFyc2VyIH0gZnJvbSAnLi9kZXBsb3llZC1iYWNrZW5kLWNsaWVudC9hcm5fcGFyc2VyLmpzJztcblxuZXhwb3J0IGVudW0gQ29uZmxpY3RSZXNvbHV0aW9uTW9kZSB7XG4gIExBTUJEQSA9ICdMQU1CREEnLFxuICBPUFRJTUlTVElDX0NPTkNVUlJFTkNZID0gJ09QVElNSVNUSUNfQ09OQ1VSUkVOQ1knLFxuICBBVVRPTUVSR0UgPSAnQVVUT01FUkdFJyxcbn1cblxuZXhwb3J0IGVudW0gQXBpQXV0aFR5cGUge1xuICBBUElfS0VZID0gJ0FQSV9LRVknLFxuICBBV1NfTEFNQkRBID0gJ0FXU19MQU1CREEnLFxuICBBV1NfSUFNID0gJ0FXU19JQU0nLFxuICBPUEVOSURfQ09OTkVDVCA9ICdPUEVOSURfQ09OTkVDVCcsXG4gIEFNQVpPTl9DT0dOSVRPX1VTRVJfUE9PTFMgPSAnQU1BWk9OX0NPR05JVE9fVVNFUl9QT09MUycsXG59XG5cbmV4cG9ydCB0eXBlIFNhbmRib3hNZXRhZGF0YSA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICBsYXN0VXBkYXRlZDogRGF0ZSB8IHVuZGVmaW5lZDtcbiAgc3RhdHVzOiBCYWNrZW5kRGVwbG95bWVudFN0YXR1cztcbiAgYmFja2VuZElkOiBCYWNrZW5kSWRlbnRpZmllciB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCB0eXBlIExpc3RTYW5kYm94ZXNSZXF1ZXN0ID0ge1xuICBuZXh0VG9rZW4/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBEZXBsb3llZEJhY2tlbmRSZXNvdXJjZSA9IHtcbiAgbG9naWNhbFJlc291cmNlSWQ/OiBzdHJpbmc7XG4gIGxhc3RVcGRhdGVkPzogRGF0ZTtcbiAgcmVzb3VyY2VTdGF0dXM/OiBzdHJpbmc7XG4gIHJlc291cmNlU3RhdHVzUmVhc29uPzogc3RyaW5nO1xuICByZXNvdXJjZVR5cGU/OiBzdHJpbmc7XG4gIHBoeXNpY2FsUmVzb3VyY2VJZD86IHN0cmluZztcbiAgYXJuPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQmFja2VuZE1ldGFkYXRhID0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIGxhc3RVcGRhdGVkOiBEYXRlIHwgdW5kZWZpbmVkO1xuICBkZXBsb3ltZW50VHlwZTogRGVwbG95bWVudFR5cGU7XG4gIHN0YXR1czogQmFja2VuZERlcGxveW1lbnRTdGF0dXM7XG4gIHJlc291cmNlczogRGVwbG95ZWRCYWNrZW5kUmVzb3VyY2VbXTtcbiAgYXBpQ29uZmlndXJhdGlvbj86IHtcbiAgICBzdGF0dXM6IEJhY2tlbmREZXBsb3ltZW50U3RhdHVzO1xuICAgIGxhc3RVcGRhdGVkOiBEYXRlIHwgdW5kZWZpbmVkO1xuICAgIGdyYXBocWxFbmRwb2ludDogc3RyaW5nO1xuICAgIGRlZmF1bHRBdXRoVHlwZTogQXBpQXV0aFR5cGU7XG4gICAgYWRkaXRpb25hbEF1dGhUeXBlczogQXBpQXV0aFR5cGVbXTtcbiAgICBjb25mbGljdFJlc29sdXRpb25Nb2RlPzogQ29uZmxpY3RSZXNvbHV0aW9uTW9kZTtcbiAgICBhcGlJZDogc3RyaW5nO1xuICB9O1xuICBhdXRoQ29uZmlndXJhdGlvbj86IHtcbiAgICBzdGF0dXM6IEJhY2tlbmREZXBsb3ltZW50U3RhdHVzO1xuICAgIGxhc3RVcGRhdGVkOiBEYXRlIHwgdW5kZWZpbmVkO1xuICAgIHVzZXJQb29sSWQ6IHN0cmluZztcbiAgfTtcbiAgc3RvcmFnZUNvbmZpZ3VyYXRpb24/OiB7XG4gICAgc3RhdHVzOiBCYWNrZW5kRGVwbG95bWVudFN0YXR1cztcbiAgICBsYXN0VXBkYXRlZDogRGF0ZSB8IHVuZGVmaW5lZDtcbiAgICBzM0J1Y2tldE5hbWU6IHN0cmluZztcbiAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIExpc3RTYW5kYm94ZXNSZXNwb25zZSA9IHtcbiAgc2FuZGJveGVzOiBTYW5kYm94TWV0YWRhdGFbXTtcbiAgbmV4dFRva2VuOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgZW51bSBCYWNrZW5kRGVwbG95bWVudFN0YXR1cyB7XG4gIERFUExPWUVEID0gJ0RFUExPWUVEJyxcbiAgRkFJTEVEID0gJ0ZBSUxFRCcsXG4gIERFUExPWUlORyA9ICdERVBMT1lJTkcnLFxuICBERUxFVElORyA9ICdERUxFVElORycsXG4gIERFTEVURUQgPSAnREVMRVRFRCcsXG4gIFVOS05PV04gPSAnVU5LTk9XTicsXG59XG5cbmV4cG9ydCB0eXBlIERlcGxveWVkQmFja2VuZENsaWVudCA9IHtcbiAgbGlzdFNhbmRib3hlczogKFxuICAgIGxpc3RTYW5kYm94ZXNSZXF1ZXN0PzogTGlzdFNhbmRib3hlc1JlcXVlc3RcbiAgKSA9PiBQcm9taXNlPExpc3RTYW5kYm94ZXNSZXNwb25zZT47XG4gIGRlbGV0ZVNhbmRib3g6IChcbiAgICBzYW5kYm94QmFja2VuZElkZW50aWZpZXI6IE9taXQ8QmFja2VuZElkZW50aWZpZXIsICd0eXBlJz5cbiAgKSA9PiBQcm9taXNlPHZvaWQ+O1xuICBnZXRCYWNrZW5kTWV0YWRhdGE6IChcbiAgICBiYWNrZW5kSWQ6IEJhY2tlbmRJZGVudGlmaWVyXG4gICkgPT4gUHJvbWlzZTxCYWNrZW5kTWV0YWRhdGE+O1xufTtcblxuZXhwb3J0IHR5cGUgRGVwbG95ZWRCYWNrZW5kQ2xpZW50T3B0aW9ucyA9IHtcbiAgczNDbGllbnQ6IFMzQ2xpZW50O1xuICBjbG91ZEZvcm1hdGlvbkNsaWVudDogQ2xvdWRGb3JtYXRpb25DbGllbnQ7XG4gIGJhY2tlbmRPdXRwdXRDbGllbnQ6IEJhY2tlbmRPdXRwdXRDbGllbnQ7XG59O1xuXG5leHBvcnQgdHlwZSBEZXBsb3llZEJhY2tlbmRDcmVkZW50aWFsc09wdGlvbnMgPSB7XG4gIGNyZWRlbnRpYWxzOiBBd3NDcmVkZW50aWFsSWRlbnRpdHlQcm92aWRlcjtcbn07XG5cbmV4cG9ydCB0eXBlIERlcGxveWVkQmFja2VuZENsaWVudEZhY3RvcnlPcHRpb25zID1cbiAgfCBEZXBsb3llZEJhY2tlbmRDcmVkZW50aWFsc09wdGlvbnNcbiAgfCBEZXBsb3llZEJhY2tlbmRDbGllbnRPcHRpb25zO1xuXG4vKipcbiAqIEZhY3RvcnkgdG8gY3JlYXRlIGEgRGVwbG95bWVudENsaWVudFxuICovXG5leHBvcnQgY2xhc3MgRGVwbG95ZWRCYWNrZW5kQ2xpZW50RmFjdG9yeSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc2luZ2xlIGluc3RhbmNlIG9mIERlcGxveW1lbnRDbGllbnRcbiAgICovXG4gIHN0YXRpYyBnZXRJbnN0YW5jZShcbiAgICBvcHRpb25zOiBEZXBsb3llZEJhY2tlbmRDbGllbnRGYWN0b3J5T3B0aW9uc1xuICApOiBEZXBsb3llZEJhY2tlbmRDbGllbnQge1xuICAgIGNvbnN0IHN0YWNrU3RhdHVzTWFwcGVyID0gbmV3IFN0YWNrU3RhdHVzTWFwcGVyKCk7XG4gICAgY29uc3QgYXJuR2VuZXJhdG9yID0gbmV3IEFybkdlbmVyYXRvcigpO1xuICAgIGNvbnN0IGFyblBhcnNlciA9IG5ldyBBcm5QYXJzZXIoKTtcbiAgICBjb25zdCBkZXBsb3llZFJlc291cmNlc0VudW1lcmF0b3IgPSBuZXcgRGVwbG95ZWRSZXNvdXJjZXNFbnVtZXJhdG9yKFxuICAgICAgc3RhY2tTdGF0dXNNYXBwZXIsXG4gICAgICBhcm5HZW5lcmF0b3IsXG4gICAgICBhcm5QYXJzZXJcbiAgICApO1xuXG4gICAgaWYgKFxuICAgICAgJ2JhY2tlbmRPdXRwdXRDbGllbnQnIGluIG9wdGlvbnMgJiZcbiAgICAgICdjbG91ZEZvcm1hdGlvbkNsaWVudCcgaW4gb3B0aW9ucyAmJlxuICAgICAgJ3MzQ2xpZW50JyBpbiBvcHRpb25zXG4gICAgKSB7XG4gICAgICByZXR1cm4gbmV3IERlZmF1bHREZXBsb3llZEJhY2tlbmRDbGllbnQoXG4gICAgICAgIG9wdGlvbnMuY2xvdWRGb3JtYXRpb25DbGllbnQsXG4gICAgICAgIG9wdGlvbnMuczNDbGllbnQsXG4gICAgICAgIG9wdGlvbnMuYmFja2VuZE91dHB1dENsaWVudCxcbiAgICAgICAgZGVwbG95ZWRSZXNvdXJjZXNFbnVtZXJhdG9yLFxuICAgICAgICBzdGFja1N0YXR1c01hcHBlcixcbiAgICAgICAgYXJuUGFyc2VyXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IERlZmF1bHREZXBsb3llZEJhY2tlbmRDbGllbnQoXG4gICAgICBuZXcgQ2xvdWRGb3JtYXRpb25DbGllbnQob3B0aW9ucy5jcmVkZW50aWFscyksXG4gICAgICBuZXcgUzNDbGllbnQob3B0aW9ucy5jcmVkZW50aWFscyksXG4gICAgICBCYWNrZW5kT3V0cHV0Q2xpZW50RmFjdG9yeS5nZXRJbnN0YW5jZSh7XG4gICAgICAgIGNyZWRlbnRpYWxzOiBvcHRpb25zLmNyZWRlbnRpYWxzLFxuICAgICAgfSksXG4gICAgICBkZXBsb3llZFJlc291cmNlc0VudW1lcmF0b3IsXG4gICAgICBzdGFja1N0YXR1c01hcHBlcixcbiAgICAgIGFyblBhcnNlclxuICAgICk7XG4gIH1cbn1cbiJdfQ==