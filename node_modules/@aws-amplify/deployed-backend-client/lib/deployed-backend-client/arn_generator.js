/**
 * Generates a link to a resource in the AWS Console
 */
export class ArnGenerator {
    isArn = (potentialArn) => {
        return potentialArn.startsWith('arn:');
    };
    /**
     * Generates an AWS Console link to the stack resource
     * @param stackResourceSummary object including PhysicalResourceId and ResourceType, from CFN DescribeStackResources
     * @param region If `undefined` is passed here, we do not generate the arn. Not enough data -> no ARN
     * @param accountId If `undefined` is passed here, we do not generate the arn. Not enough data -> no ARN
     * @returns string if arn can be generated, undefined otherwise
     */
    generateArn = (stackResourceSummary, region, accountId) => {
        if (!accountId || !region) {
            return;
        }
        // Supported keys from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html
        const physicalResourceId = stackResourceSummary.PhysicalResourceId;
        // Some resources use arns directly as physicalResourceId.
        // These include: AWS::AppSync::GraphQLApi, AWS::AppSync::DataSource, AWS::CloudFormation::Stack, AWS::Lambda::LayerVersion
        if (this.isArn(physicalResourceId)) {
            return physicalResourceId;
        }
        switch (stackResourceSummary.ResourceType) {
            case 'AWS::Cognito::UserPool':
                return `arn:aws:cognito-idp:${region}:${accountId}:userpool/${physicalResourceId}`;
            case 'AWS::Cognito::IdentityPool':
                return `arn:aws:cognito-identity:${region}:${accountId}:identitypool/${physicalResourceId}`;
            case 'AWS::IAM::Role':
                return `arn:aws:iam:${region}:${accountId}:role/${physicalResourceId}`;
            case 'AWS::DynamoDB::Table':
                return `arn:aws:dynamodb:${region}:${accountId}:table/${physicalResourceId}`;
            case 'AWS::S3::Bucket':
                return `arn:aws:s3:::${physicalResourceId}`;
            case 'AWS::Lambda::Function':
                return `arn:aws:lambda:${region}:${accountId}:function:${physicalResourceId}`;
            default:
                break;
        }
        return;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJuX2dlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9kZXBsb3llZC1iYWNrZW5kLWNsaWVudC9hcm5fZ2VuZXJhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFlBQVk7SUFDZixLQUFLLEdBQUcsQ0FBQyxZQUFvQixFQUFFLEVBQUU7UUFDdkMsT0FBTyxZQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3pDLENBQUMsQ0FBQztJQUVGOzs7Ozs7T0FNRztJQUNILFdBQVcsR0FBRyxDQUNaLG9CQUdDLEVBQ0QsTUFBMEIsRUFDMUIsU0FBNkIsRUFDVCxFQUFFO1FBQ3RCLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDekIsT0FBTztTQUNSO1FBRUQseUhBQXlIO1FBQ3pILE1BQU0sa0JBQWtCLEdBQ3RCLG9CQUFvQixDQUFDLGtCQUE0QixDQUFDO1FBRXBELDBEQUEwRDtRQUMxRCwySEFBMkg7UUFDM0gsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLEVBQUU7WUFDbEMsT0FBTyxrQkFBa0IsQ0FBQztTQUMzQjtRQUVELFFBQVEsb0JBQW9CLENBQUMsWUFBWSxFQUFFO1lBQ3pDLEtBQUssd0JBQXdCO2dCQUMzQixPQUFPLHVCQUF1QixNQUFNLElBQUksU0FBUyxhQUFhLGtCQUFrQixFQUFFLENBQUM7WUFDckYsS0FBSyw0QkFBNEI7Z0JBQy9CLE9BQU8sNEJBQTRCLE1BQU0sSUFBSSxTQUFTLGlCQUFpQixrQkFBa0IsRUFBRSxDQUFDO1lBQzlGLEtBQUssZ0JBQWdCO2dCQUNuQixPQUFPLGVBQWUsTUFBTSxJQUFJLFNBQVMsU0FBUyxrQkFBa0IsRUFBRSxDQUFDO1lBQ3pFLEtBQUssc0JBQXNCO2dCQUN6QixPQUFPLG9CQUFvQixNQUFNLElBQUksU0FBUyxVQUFVLGtCQUFrQixFQUFFLENBQUM7WUFDL0UsS0FBSyxpQkFBaUI7Z0JBQ3BCLE9BQU8sZ0JBQWdCLGtCQUFrQixFQUFFLENBQUM7WUFDOUMsS0FBSyx1QkFBdUI7Z0JBQzFCLE9BQU8sa0JBQWtCLE1BQU0sSUFBSSxTQUFTLGFBQWEsa0JBQWtCLEVBQUUsQ0FBQztZQUNoRjtnQkFDRSxNQUFNO1NBQ1Q7UUFFRCxPQUFPO0lBQ1QsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGFja1Jlc291cmNlU3VtbWFyeSB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZGZvcm1hdGlvbic7XG5cbi8qKlxuICogR2VuZXJhdGVzIGEgbGluayB0byBhIHJlc291cmNlIGluIHRoZSBBV1MgQ29uc29sZVxuICovXG5leHBvcnQgY2xhc3MgQXJuR2VuZXJhdG9yIHtcbiAgcHJpdmF0ZSBpc0FybiA9IChwb3RlbnRpYWxBcm46IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBwb3RlbnRpYWxBcm4uc3RhcnRzV2l0aCgnYXJuOicpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYW4gQVdTIENvbnNvbGUgbGluayB0byB0aGUgc3RhY2sgcmVzb3VyY2VcbiAgICogQHBhcmFtIHN0YWNrUmVzb3VyY2VTdW1tYXJ5IG9iamVjdCBpbmNsdWRpbmcgUGh5c2ljYWxSZXNvdXJjZUlkIGFuZCBSZXNvdXJjZVR5cGUsIGZyb20gQ0ZOIERlc2NyaWJlU3RhY2tSZXNvdXJjZXNcbiAgICogQHBhcmFtIHJlZ2lvbiBJZiBgdW5kZWZpbmVkYCBpcyBwYXNzZWQgaGVyZSwgd2UgZG8gbm90IGdlbmVyYXRlIHRoZSBhcm4uIE5vdCBlbm91Z2ggZGF0YSAtPiBubyBBUk5cbiAgICogQHBhcmFtIGFjY291bnRJZCBJZiBgdW5kZWZpbmVkYCBpcyBwYXNzZWQgaGVyZSwgd2UgZG8gbm90IGdlbmVyYXRlIHRoZSBhcm4uIE5vdCBlbm91Z2ggZGF0YSAtPiBubyBBUk5cbiAgICogQHJldHVybnMgc3RyaW5nIGlmIGFybiBjYW4gYmUgZ2VuZXJhdGVkLCB1bmRlZmluZWQgb3RoZXJ3aXNlXG4gICAqL1xuICBnZW5lcmF0ZUFybiA9IChcbiAgICBzdGFja1Jlc291cmNlU3VtbWFyeTogUGljazxcbiAgICAgIFN0YWNrUmVzb3VyY2VTdW1tYXJ5LFxuICAgICAgJ1BoeXNpY2FsUmVzb3VyY2VJZCcgfCAnUmVzb3VyY2VUeXBlJ1xuICAgID4sXG4gICAgcmVnaW9uOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgYWNjb3VudElkOiBzdHJpbmcgfCB1bmRlZmluZWRcbiAgKTogc3RyaW5nIHwgdW5kZWZpbmVkID0+IHtcbiAgICBpZiAoIWFjY291bnRJZCB8fCAhcmVnaW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU3VwcG9ydGVkIGtleXMgZnJvbSBodHRwczovL2RvY3MuYXdzLmFtYXpvbi5jb20vQVdTQ2xvdWRGb3JtYXRpb24vbGF0ZXN0L1VzZXJHdWlkZS9hd3MtdGVtcGxhdGUtcmVzb3VyY2UtdHlwZS1yZWYuaHRtbFxuICAgIGNvbnN0IHBoeXNpY2FsUmVzb3VyY2VJZCA9XG4gICAgICBzdGFja1Jlc291cmNlU3VtbWFyeS5QaHlzaWNhbFJlc291cmNlSWQgYXMgc3RyaW5nO1xuXG4gICAgLy8gU29tZSByZXNvdXJjZXMgdXNlIGFybnMgZGlyZWN0bHkgYXMgcGh5c2ljYWxSZXNvdXJjZUlkLlxuICAgIC8vIFRoZXNlIGluY2x1ZGU6IEFXUzo6QXBwU3luYzo6R3JhcGhRTEFwaSwgQVdTOjpBcHBTeW5jOjpEYXRhU291cmNlLCBBV1M6OkNsb3VkRm9ybWF0aW9uOjpTdGFjaywgQVdTOjpMYW1iZGE6OkxheWVyVmVyc2lvblxuICAgIGlmICh0aGlzLmlzQXJuKHBoeXNpY2FsUmVzb3VyY2VJZCkpIHtcbiAgICAgIHJldHVybiBwaHlzaWNhbFJlc291cmNlSWQ7XG4gICAgfVxuXG4gICAgc3dpdGNoIChzdGFja1Jlc291cmNlU3VtbWFyeS5SZXNvdXJjZVR5cGUpIHtcbiAgICAgIGNhc2UgJ0FXUzo6Q29nbml0bzo6VXNlclBvb2wnOlxuICAgICAgICByZXR1cm4gYGFybjphd3M6Y29nbml0by1pZHA6JHtyZWdpb259OiR7YWNjb3VudElkfTp1c2VycG9vbC8ke3BoeXNpY2FsUmVzb3VyY2VJZH1gO1xuICAgICAgY2FzZSAnQVdTOjpDb2duaXRvOjpJZGVudGl0eVBvb2wnOlxuICAgICAgICByZXR1cm4gYGFybjphd3M6Y29nbml0by1pZGVudGl0eToke3JlZ2lvbn06JHthY2NvdW50SWR9OmlkZW50aXR5cG9vbC8ke3BoeXNpY2FsUmVzb3VyY2VJZH1gO1xuICAgICAgY2FzZSAnQVdTOjpJQU06OlJvbGUnOlxuICAgICAgICByZXR1cm4gYGFybjphd3M6aWFtOiR7cmVnaW9ufToke2FjY291bnRJZH06cm9sZS8ke3BoeXNpY2FsUmVzb3VyY2VJZH1gO1xuICAgICAgY2FzZSAnQVdTOjpEeW5hbW9EQjo6VGFibGUnOlxuICAgICAgICByZXR1cm4gYGFybjphd3M6ZHluYW1vZGI6JHtyZWdpb259OiR7YWNjb3VudElkfTp0YWJsZS8ke3BoeXNpY2FsUmVzb3VyY2VJZH1gO1xuICAgICAgY2FzZSAnQVdTOjpTMzo6QnVja2V0JzpcbiAgICAgICAgcmV0dXJuIGBhcm46YXdzOnMzOjo6JHtwaHlzaWNhbFJlc291cmNlSWR9YDtcbiAgICAgIGNhc2UgJ0FXUzo6TGFtYmRhOjpGdW5jdGlvbic6XG4gICAgICAgIHJldHVybiBgYXJuOmF3czpsYW1iZGE6JHtyZWdpb259OiR7YWNjb3VudElkfTpmdW5jdGlvbjoke3BoeXNpY2FsUmVzb3VyY2VJZH1gO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9O1xufVxuIl19