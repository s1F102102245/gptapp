import { Construct } from 'constructs';
import { Bucket } from 'aws-cdk-lib/aws-s3';
import { storageOutputKey, } from '@aws-amplify/backend-output-schemas';
import { Stack } from 'aws-cdk-lib';
import { AttributionMetadataStorage, StackMetadataBackendOutputStorageStrategy, } from '@aws-amplify/backend-output-storage';
import { fileURLToPath } from 'url';
// Be very careful editing this value. It is the string that is used to attribute stacks to Amplify Storage in BI metrics
const storageStackType = 'storage-S3';
/**
 * Amplify Storage CDK Construct
 *
 * Currently just a thin wrapper around an S3 bucket
 */
export class AmplifyStorage extends Construct {
    bucket;
    /**
     * Create a new AmplifyStorage instance
     */
    constructor(scope, id, props) {
        super(scope, id);
        const bucketProps = {
            versioned: props.versioned || false,
        };
        this.bucket = new Bucket(this, `${id}Bucket`, bucketProps);
        this.storeOutput(props.outputStorageStrategy);
        new AttributionMetadataStorage().storeAttributionMetadata(Stack.of(this), storageStackType, fileURLToPath(new URL('../package.json', import.meta.url)));
    }
    /**
     * Store storage outputs using provided strategy
     */
    storeOutput = (outputStorageStrategy = new StackMetadataBackendOutputStorageStrategy(Stack.of(this))) => {
        outputStorageStrategy.addBackendOutputEntry(storageOutputKey, {
            version: '1',
            payload: {
                storageRegion: Stack.of(this).region,
                bucketName: this.bucket.bucketName,
            },
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxNQUFNLEVBQWUsTUFBTSxvQkFBb0IsQ0FBQztBQUV6RCxPQUFPLEVBRUwsZ0JBQWdCLEdBQ2pCLE1BQU0scUNBQXFDLENBQUM7QUFDN0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQ0wsMEJBQTBCLEVBQzFCLHlDQUF5QyxHQUMxQyxNQUFNLHFDQUFxQyxDQUFDO0FBQzdDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxLQUFLLENBQUM7QUFFcEMseUhBQXlIO0FBQ3pILE1BQU0sZ0JBQWdCLEdBQUcsWUFBWSxDQUFDO0FBT3RDOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sY0FBZSxTQUFRLFNBQVM7SUFDMUIsTUFBTSxDQUFTO0lBQ2hDOztPQUVHO0lBQ0gsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUEwQjtRQUNsRSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLE1BQU0sV0FBVyxHQUFnQjtZQUMvQixTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsSUFBSSxLQUFLO1NBQ3BDLENBQUM7UUFFRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRTNELElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUFDLENBQUM7UUFFOUMsSUFBSSwwQkFBMEIsRUFBRSxDQUFDLHdCQUF3QixDQUN2RCxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUNkLGdCQUFnQixFQUNoQixhQUFhLENBQUMsSUFBSSxHQUFHLENBQUMsaUJBQWlCLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUMzRCxDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ssV0FBVyxHQUFHLENBQ3BCLHdCQUFxRSxJQUFJLHlDQUF5QyxDQUNoSCxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUNmLEVBQ0ssRUFBRTtRQUNSLHFCQUFxQixDQUFDLHFCQUFxQixDQUFDLGdCQUFnQixFQUFFO1lBQzVELE9BQU8sRUFBRSxHQUFHO1lBQ1osT0FBTyxFQUFFO2dCQUNQLGFBQWEsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU07Z0JBQ3BDLFVBQVUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVU7YUFDbkM7U0FDRixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgQnVja2V0LCBCdWNrZXRQcm9wcyB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMyc7XG5pbXBvcnQgeyBCYWNrZW5kT3V0cHV0U3RvcmFnZVN0cmF0ZWd5IH0gZnJvbSAnQGF3cy1hbXBsaWZ5L3BsdWdpbi10eXBlcyc7XG5pbXBvcnQge1xuICBTdG9yYWdlT3V0cHV0LFxuICBzdG9yYWdlT3V0cHV0S2V5LFxufSBmcm9tICdAYXdzLWFtcGxpZnkvYmFja2VuZC1vdXRwdXQtc2NoZW1hcyc7XG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7XG4gIEF0dHJpYnV0aW9uTWV0YWRhdGFTdG9yYWdlLFxuICBTdGFja01ldGFkYXRhQmFja2VuZE91dHB1dFN0b3JhZ2VTdHJhdGVneSxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2JhY2tlbmQtb3V0cHV0LXN0b3JhZ2UnO1xuaW1wb3J0IHsgZmlsZVVSTFRvUGF0aCB9IGZyb20gJ3VybCc7XG5cbi8vIEJlIHZlcnkgY2FyZWZ1bCBlZGl0aW5nIHRoaXMgdmFsdWUuIEl0IGlzIHRoZSBzdHJpbmcgdGhhdCBpcyB1c2VkIHRvIGF0dHJpYnV0ZSBzdGFja3MgdG8gQW1wbGlmeSBTdG9yYWdlIGluIEJJIG1ldHJpY3NcbmNvbnN0IHN0b3JhZ2VTdGFja1R5cGUgPSAnc3RvcmFnZS1TMyc7XG5cbmV4cG9ydCB0eXBlIEFtcGxpZnlTdG9yYWdlUHJvcHMgPSB7XG4gIHZlcnNpb25lZD86IGJvb2xlYW47XG4gIG91dHB1dFN0b3JhZ2VTdHJhdGVneT86IEJhY2tlbmRPdXRwdXRTdG9yYWdlU3RyYXRlZ3k8U3RvcmFnZU91dHB1dD47XG59O1xuXG4vKipcbiAqIEFtcGxpZnkgU3RvcmFnZSBDREsgQ29uc3RydWN0XG4gKlxuICogQ3VycmVudGx5IGp1c3QgYSB0aGluIHdyYXBwZXIgYXJvdW5kIGFuIFMzIGJ1Y2tldFxuICovXG5leHBvcnQgY2xhc3MgQW1wbGlmeVN0b3JhZ2UgZXh0ZW5kcyBDb25zdHJ1Y3Qge1xuICBwcml2YXRlIHJlYWRvbmx5IGJ1Y2tldDogQnVja2V0O1xuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IEFtcGxpZnlTdG9yYWdlIGluc3RhbmNlXG4gICAqL1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogQW1wbGlmeVN0b3JhZ2VQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICBjb25zdCBidWNrZXRQcm9wczogQnVja2V0UHJvcHMgPSB7XG4gICAgICB2ZXJzaW9uZWQ6IHByb3BzLnZlcnNpb25lZCB8fCBmYWxzZSxcbiAgICB9O1xuXG4gICAgdGhpcy5idWNrZXQgPSBuZXcgQnVja2V0KHRoaXMsIGAke2lkfUJ1Y2tldGAsIGJ1Y2tldFByb3BzKTtcblxuICAgIHRoaXMuc3RvcmVPdXRwdXQocHJvcHMub3V0cHV0U3RvcmFnZVN0cmF0ZWd5KTtcblxuICAgIG5ldyBBdHRyaWJ1dGlvbk1ldGFkYXRhU3RvcmFnZSgpLnN0b3JlQXR0cmlidXRpb25NZXRhZGF0YShcbiAgICAgIFN0YWNrLm9mKHRoaXMpLFxuICAgICAgc3RvcmFnZVN0YWNrVHlwZSxcbiAgICAgIGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi4vcGFja2FnZS5qc29uJywgaW1wb3J0Lm1ldGEudXJsKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0b3JlIHN0b3JhZ2Ugb3V0cHV0cyB1c2luZyBwcm92aWRlZCBzdHJhdGVneVxuICAgKi9cbiAgcHJpdmF0ZSBzdG9yZU91dHB1dCA9IChcbiAgICBvdXRwdXRTdG9yYWdlU3RyYXRlZ3k6IEJhY2tlbmRPdXRwdXRTdG9yYWdlU3RyYXRlZ3k8U3RvcmFnZU91dHB1dD4gPSBuZXcgU3RhY2tNZXRhZGF0YUJhY2tlbmRPdXRwdXRTdG9yYWdlU3RyYXRlZ3koXG4gICAgICBTdGFjay5vZih0aGlzKVxuICAgIClcbiAgKTogdm9pZCA9PiB7XG4gICAgb3V0cHV0U3RvcmFnZVN0cmF0ZWd5LmFkZEJhY2tlbmRPdXRwdXRFbnRyeShzdG9yYWdlT3V0cHV0S2V5LCB7XG4gICAgICB2ZXJzaW9uOiAnMScsXG4gICAgICBwYXlsb2FkOiB7XG4gICAgICAgIHN0b3JhZ2VSZWdpb246IFN0YWNrLm9mKHRoaXMpLnJlZ2lvbixcbiAgICAgICAgYnVja2V0TmFtZTogdGhpcy5idWNrZXQuYnVja2V0TmFtZSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH07XG59XG4iXX0=