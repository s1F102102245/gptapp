"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmplifyAuth = void 0;
const constructs_1 = require("constructs");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cognito_1 = require("aws-cdk-lib/aws-cognito");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const backend_output_schemas_1 = require("@aws-amplify/backend-output-schemas");
const defaults_js_1 = require("./defaults.js");
const backend_output_storage_1 = require("@aws-amplify/backend-output-storage");
const path = __importStar(require("path"));
const string_maps_js_1 = require("./string_maps.js");
const authProvidersList = {
    facebook: 'graph.facebook.com',
    google: 'accounts.google.com',
    amazon: 'www.amazon.com',
    apple: 'appleid.apple.com',
};
const VERIFICATION_EMAIL_PLACEHOLDERS = {
    CODE: '{####}',
    LINK: '{##Verify Email##}',
};
const VERIFICATION_SMS_PLACEHOLDERS = {
    CODE: '{####}',
};
const MFA_SMS_PLACEHOLDERS = {
    CODE: '{####}',
};
// Be very careful editing this value. It is the string that is used to attribute stacks to Amplify Auth in BI metrics
const authStackType = 'auth-Cognito';
/**
 * Amplify Auth CDK Construct
 */
class AmplifyAuth extends constructs_1.Construct {
    /**
     * Create a new Auth construct with AuthProps.
     * If no props are provided, email login and defaults will be used.
     */
    constructor(scope, id, props = defaults_js_1.DEFAULTS.IF_NO_PROPS_PROVIDED) {
        super(scope, id);
        /**
         * Create Auth/UnAuth Roles
         * @returns DefaultRoles
         */
        this.setupAuthAndUnAuthRoles = (identityPoolId) => {
            const result = {
                auth: new aws_iam_1.Role(this, 'authenticatedUserRole', {
                    assumedBy: new aws_iam_1.FederatedPrincipal('cognito-identity.amazonaws.com', {
                        StringEquals: {
                            'cognito-identity.amazonaws.com:aud': identityPoolId,
                        },
                        'ForAnyValue:StringLike': {
                            'cognito-identity.amazonaws.com:amr': 'authenticated',
                        },
                    }, 'sts:AssumeRoleWithWebIdentity'),
                }),
                unAuth: new aws_iam_1.Role(this, 'unauthenticatedUserRole', {
                    assumedBy: new aws_iam_1.FederatedPrincipal('cognito-identity.amazonaws.com', {
                        StringEquals: {
                            'cognito-identity.amazonaws.com:aud': identityPoolId,
                        },
                        'ForAnyValue:StringLike': {
                            'cognito-identity.amazonaws.com:amr': 'unauthenticated',
                        },
                    }, 'sts:AssumeRoleWithWebIdentity'),
                }),
            };
            return result;
        };
        /**
         * Setup Identity Pool with default roles/role mappings, and register providers
         */
        this.setupIdentityPool = (userPool, userPoolClient, providerSetupResult) => {
            // setup identity pool
            const region = aws_cdk_lib_1.Stack.of(this).region;
            const identityPool = new aws_cdk_lib_1.aws_cognito.CfnIdentityPool(this, 'IdentityPool', {
                allowUnauthenticatedIdentities: defaults_js_1.DEFAULTS.ALLOW_UNAUTHENTICATED_IDENTITIES,
            });
            const roles = this.setupAuthAndUnAuthRoles(identityPool.ref);
            const identityPoolRoleAttachment = new aws_cdk_lib_1.aws_cognito.CfnIdentityPoolRoleAttachment(this, 'IdentityPoolRoleAttachment', {
                identityPoolId: identityPool.ref,
                roles: {
                    unauthenticated: roles.unAuth.roleArn,
                    authenticated: roles.auth.roleArn,
                },
                roleMappings: {
                    UserPoolWebClientRoleMapping: {
                        type: 'Token',
                        ambiguousRoleResolution: 'AuthenticatedRole',
                        identityProvider: `cognito-idp.${region}.amazonaws.com/${userPool.userPoolId}:${userPoolClient.userPoolClientId}`,
                    },
                },
            });
            identityPoolRoleAttachment.addDependency(identityPool);
            identityPoolRoleAttachment.node.addDependency(userPoolClient);
            // add cognito provider
            identityPool.cognitoIdentityProviders = [
                {
                    clientId: userPoolClient.userPoolClientId,
                    providerName: `cognito-idp.${region}.amazonaws.com/${userPool.userPoolId}`,
                },
            ];
            // add other providers
            identityPool.supportedLoginProviders = providerSetupResult.oauthMappings;
            if (providerSetupResult.oidc) {
                identityPool.openIdConnectProviderArns = [
                    `arn:${region}:iam::${aws_cdk_lib_1.Stack.of(this).account}:oidc-provider/cognito-idp.${region}.amazonaws.com/${providerSetupResult.oidc.providerName}`,
                ];
            }
            if (providerSetupResult.saml) {
                identityPool.samlProviderArns = [
                    `arn:${region}:iam::${aws_cdk_lib_1.Stack.of(this).account}:saml-provider/${providerSetupResult.saml.providerName}`,
                ];
            }
            return {
                identityPool,
                identityPoolRoleAttachment,
                roles,
            };
        };
        /**
         * Process props into UserPoolProps (set defaults if needed)
         */
        this.getUserPoolProps = (props) => {
            const emailEnabled = props.loginWith.email ? true : false;
            const phoneEnabled = props.loginWith.phone ? true : false;
            const oneOfEmailOrPhone = emailEnabled || phoneEnabled;
            if (!oneOfEmailOrPhone) {
                throw Error('At least one of email or phone must be enabled.');
            }
            let userVerificationSettings = {};
            // extract email settings if settings object is defined
            if (typeof props.loginWith.email === 'object') {
                const emailSettings = props.loginWith.email;
                // verify email body and inject the actual template values which cognito uses
                const emailBody = this.verifyEmailBody(emailSettings);
                userVerificationSettings = {
                    emailBody: emailBody,
                    emailStyle: this.getEmailVerificationStyle(emailSettings.verificationEmailStyle),
                    emailSubject: emailSettings.verificationEmailSubject,
                };
            }
            // extract phone settings if settings object is defined
            if (typeof props.loginWith.phone === 'object') {
                const phoneSettings = props.loginWith.phone;
                let smsMessage;
                if (phoneSettings.verificationMessage &&
                    typeof phoneSettings.verificationMessage === 'function') {
                    // validate sms message structure
                    smsMessage = phoneSettings.verificationMessage(VERIFICATION_SMS_PLACEHOLDERS.CODE);
                    if (!smsMessage.includes(VERIFICATION_SMS_PLACEHOLDERS.CODE)) {
                        throw Error("Invalid phone settings. Property 'verificationMessage' must utilize the 'code' parameter at least once as a placeholder for the verification code.");
                    }
                }
                userVerificationSettings = {
                    ...userVerificationSettings,
                    smsMessage: smsMessage,
                };
            }
            const userPoolProps = {
                signInCaseSensitive: defaults_js_1.DEFAULTS.SIGN_IN_CASE_SENSITIVE,
                signInAliases: {
                    phone: phoneEnabled,
                    email: emailEnabled,
                },
                keepOriginal: {
                    email: emailEnabled,
                    phone: phoneEnabled,
                },
                autoVerify: {
                    email: emailEnabled,
                    phone: phoneEnabled,
                },
                userVerification: userVerificationSettings,
                passwordPolicy: defaults_js_1.DEFAULTS.PASSWORD_POLICY,
                standardAttributes: {
                    email: defaults_js_1.DEFAULTS.IS_REQUIRED_ATTRIBUTE.email(emailEnabled),
                    phoneNumber: defaults_js_1.DEFAULTS.IS_REQUIRED_ATTRIBUTE.phoneNumber(phoneEnabled),
                    ...(props.userAttributes ? props.userAttributes : {}),
                },
                selfSignUpEnabled: defaults_js_1.DEFAULTS.ALLOW_SELF_SIGN_UP,
                mfa: this.getMFAMode(props.multifactor),
                mfaMessage: this.getMFAMessage(props.multifactor),
                mfaSecondFactor: typeof props.multifactor === 'object' &&
                    props.multifactor.mode !== 'OFF'
                    ? {
                        sms: props.multifactor.sms ? true : false,
                        otp: props.multifactor.totp ? true : false,
                    }
                    : undefined,
                accountRecovery: this.getAccountRecoverySetting(emailEnabled, phoneEnabled, props.accountRecovery),
                removalPolicy: aws_cdk_lib_1.RemovalPolicy.DESTROY,
            };
            return userPoolProps;
        };
        /**
         * Get email verification style from user props
         * @param verificationEmailStyle - string value
         * @returns verificationEmailStyle - enum value
         */
        this.getEmailVerificationStyle = (verificationEmailStyle) => {
            if (verificationEmailStyle === 'CODE') {
                return aws_cdk_lib_1.aws_cognito.VerificationEmailStyle.CODE;
            }
            else if (verificationEmailStyle === 'LINK') {
                return aws_cdk_lib_1.aws_cognito.VerificationEmailStyle.LINK;
            }
            return undefined;
        };
        /**
         * Determine the account recovery option based on enabled login methods.
         * @param emailEnabled - is email enabled
         * @param phoneEnabled - is phone enabled
         * @param accountRecoveryMethodAsString - the user provided account recovery setting
         * @returns account recovery setting enum value
         */
        this.getAccountRecoverySetting = (emailEnabled, phoneEnabled, accountRecoveryMethodAsString) => {
            const accountRecovery = this.convertAccountRecoveryStringToEnum(accountRecoveryMethodAsString);
            if (accountRecovery !== undefined) {
                return accountRecovery;
            }
            // set default based on enabled login methods
            if (phoneEnabled && emailEnabled) {
                return aws_cdk_lib_1.aws_cognito.AccountRecovery.EMAIL_ONLY;
            }
            if (phoneEnabled) {
                return aws_cdk_lib_1.aws_cognito.AccountRecovery.PHONE_ONLY_WITHOUT_MFA;
            }
            if (emailEnabled) {
                return aws_cdk_lib_1.aws_cognito.AccountRecovery.EMAIL_ONLY;
            }
            return undefined;
        };
        /**
         * Convert user friendly Mfa mode to cognito Mfa type.
         * This eliminates the need for users to import cognito.Mfa.
         * @param mfa - MFA settings
         * @returns cognito MFA enforcement type
         */
        this.getMFAMode = (mfa) => {
            if (mfa) {
                switch (mfa.mode) {
                    case 'OFF':
                        return aws_cognito_1.Mfa.OFF;
                    case 'OPTIONAL':
                        return aws_cognito_1.Mfa.OPTIONAL;
                    case 'REQUIRED':
                        return aws_cognito_1.Mfa.REQUIRED;
                }
            }
            return undefined;
        };
        /**
         * Convert user friendly account recovery method to cognito AccountRecover enum.
         * This eliminates the need for users to import cognito.AccountRecovery.
         * @param method - account recovery method as a string value
         * @returns cognito.AccountRecovery enum value
         */
        this.convertAccountRecoveryStringToEnum = (method) => {
            if (method !== undefined) {
                return aws_cdk_lib_1.aws_cognito.AccountRecovery[method];
            }
            return undefined;
        };
        /**
         * Extract the MFA message settings and perform validation.
         * @param mfa - MFA settings
         * @returns mfa message
         */
        this.getMFAMessage = (mfa) => {
            if (mfa && mfa.mode !== 'OFF' && typeof mfa.sms === 'object') {
                const message = mfa.sms.smsMessage(MFA_SMS_PLACEHOLDERS.CODE);
                if (!message.includes(MFA_SMS_PLACEHOLDERS.CODE)) {
                    throw Error("Invalid MFA settings. Property 'smsMessage' must utilize the 'code' parameter at least once as a placeholder for the verification code.");
                }
                return message;
            }
            return undefined;
        };
        /**
         * Setup Identity Providers (OAuth/OIDC/SAML)
         */
        this.setupIdentityProviders = (userPool, loginOptions) => {
            const result = {
                oauthMappings: {},
            };
            // external providers
            const external = loginOptions.externalProviders;
            if (!external) {
                return result;
            }
            if (external.google) {
                const googleProps = external.google;
                result.google = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderGoogle(this, 'GoogleIdP', {
                    userPool,
                    clientId: googleProps.clientId,
                    clientSecretValue: googleProps.clientSecret,
                    attributeMapping: googleProps.attributeMapping,
                    scopes: googleProps.scopes,
                });
                result.oauthMappings[authProvidersList.google] = external.google.clientId;
            }
            if (external.facebook) {
                result.facebook = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderFacebook(this, 'FacebookIDP', {
                    userPool,
                    ...external.facebook,
                });
                result.oauthMappings[authProvidersList.facebook] =
                    external.facebook.clientId;
            }
            if (external.loginWithAmazon) {
                result.amazon = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderAmazon(this, 'AmazonIDP', {
                    userPool,
                    ...external.loginWithAmazon,
                });
                result.oauthMappings[authProvidersList.amazon] =
                    external.loginWithAmazon.clientId;
            }
            if (external.signInWithApple) {
                result.apple = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderApple(this, 'AppleIDP', {
                    userPool,
                    ...external.signInWithApple,
                });
                result.oauthMappings[authProvidersList.apple] =
                    external.signInWithApple.clientId;
            }
            if (external.oidc) {
                result.oidc = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderOidc(this, 'OidcIDP', {
                    userPool,
                    ...external.oidc,
                });
            }
            if (external.saml) {
                result.saml = new aws_cdk_lib_1.aws_cognito.UserPoolIdentityProviderSaml(this, 'SamlIDP', {
                    userPool,
                    ...external.saml,
                });
            }
            return result;
        };
        /**
         * Convert scopes from string list to OAuthScopes.
         * @param scopes - scope list
         * @returns cognito OAuthScopes
         */
        this.getOAuthScopes = (scopes) => {
            if (scopes === undefined) {
                return [];
            }
            const result = [];
            for (const scope of scopes) {
                result.push(aws_cdk_lib_1.aws_cognito.OAuthScope[scope]);
            }
            return result;
        };
        /**
         * Stores auth output using the provided strategy
         */
        this.storeOutput = (outputStorageStrategy = new backend_output_storage_1.StackMetadataBackendOutputStorageStrategy(aws_cdk_lib_1.Stack.of(this))) => {
            var _a, _b, _c;
            const output = {
                userPoolId: this.resources.userPool.userPoolId,
                webClientId: this.resources.userPoolClient.userPoolClientId,
                identityPoolId: this.resources.cfnResources.cfnIdentityPool.ref,
                authRegion: aws_cdk_lib_1.Stack.of(this).region,
            };
            if (this.computedUserPoolProps.standardAttributes) {
                const signupAttributes = Object.entries(this.computedUserPoolProps.standardAttributes).reduce((acc, [attributeName, attribute]) => {
                    if (attribute === null || attribute === void 0 ? void 0 : attribute.required) {
                        const treatedAttributeName = string_maps_js_1.coreAttributeNameMap.find(({ standardAttributeName }) => standardAttributeName === attributeName);
                        if (treatedAttributeName) {
                            return [
                                ...acc,
                                treatedAttributeName.userpoolAttributeName.toUpperCase(),
                            ];
                        }
                    }
                    return acc;
                }, []);
                output.signupAttributes = JSON.stringify(signupAttributes);
            }
            if (this.computedUserPoolProps.signInAliases) {
                const usernameAttributes = [];
                if (this.computedUserPoolProps.signInAliases.email) {
                    usernameAttributes.push('EMAIL');
                }
                if (this.computedUserPoolProps.signInAliases.phone) {
                    usernameAttributes.push('PHONE_NUMBER');
                }
                if (this.computedUserPoolProps.signInAliases.preferredUsername ||
                    this.computedUserPoolProps.signInAliases.username) {
                    usernameAttributes.push('PREFERRED_USERNAME');
                }
                if (usernameAttributes.length > 0) {
                    output.usernameAttributes = JSON.stringify(usernameAttributes);
                }
            }
            if (this.computedUserPoolProps.autoVerify) {
                const verificationMechanisms = [];
                if (this.computedUserPoolProps.autoVerify.email) {
                    verificationMechanisms.push('EMAIL');
                }
                if (this.computedUserPoolProps.autoVerify.phone) {
                    verificationMechanisms.push('PHONE');
                }
                if (verificationMechanisms.length > 0) {
                    output.verificationMechanisms = JSON.stringify(verificationMechanisms);
                }
            }
            if (this.computedUserPoolProps.passwordPolicy) {
                output.passwordPolicyMinLength =
                    (_a = this.computedUserPoolProps.passwordPolicy.minLength) === null || _a === void 0 ? void 0 : _a.toString();
                const requirements = [];
                if (this.computedUserPoolProps.passwordPolicy.requireDigits) {
                    requirements.push('REQUIRES_NUMBERS');
                }
                if (this.computedUserPoolProps.passwordPolicy.requireLowercase) {
                    requirements.push('REQUIRES_LOWERCASE');
                }
                if (this.computedUserPoolProps.passwordPolicy.requireUppercase) {
                    requirements.push('REQUIRES_UPPERCASE');
                }
                if (this.computedUserPoolProps.passwordPolicy.requireSymbols) {
                    requirements.push('REQUIRES_SYMBOLS');
                }
                if (requirements.length > 0) {
                    output.passwordPolicyRequirements = JSON.stringify(requirements);
                }
            }
            if (this.computedUserPoolProps.mfa) {
                output.mfaConfiguration = this.computedUserPoolProps.mfa;
                const mfaTypes = [];
                if ((_b = this.computedUserPoolProps.mfaSecondFactor) === null || _b === void 0 ? void 0 : _b.otp) {
                    mfaTypes.push('TOTP');
                }
                if ((_c = this.computedUserPoolProps.mfaSecondFactor) === null || _c === void 0 ? void 0 : _c.sms) {
                    mfaTypes.push('SMS');
                }
                if (mfaTypes.length > 0) {
                    output.mfaTypes = JSON.stringify(mfaTypes);
                }
            }
            if (this.oauthMappings[authProvidersList.amazon]) {
                output.amazonClientId = this.oauthMappings[authProvidersList.amazon];
            }
            if (this.oauthMappings[authProvidersList.facebook]) {
                output.facebookClientId = this.oauthMappings[authProvidersList.facebook];
            }
            if (this.oauthMappings[authProvidersList.google]) {
                output.googleClientId = this.oauthMappings[authProvidersList.google];
            }
            if (this.oauthMappings[authProvidersList.apple]) {
                output.appleClientId = this.oauthMappings[authProvidersList.apple];
            }
            outputStorageStrategy.addBackendOutputEntry(backend_output_schemas_1.authOutputKey, {
                version: '1',
                payload: output,
            });
        };
        /**
         * Attach a Lambda function trigger handler to the UserPool in this construct
         * @param event - The trigger event operation
         * @param handler - The function that will handle the event
         */
        this.addTrigger = (event, handler) => {
            if ('resources' in handler) {
                this.userPool.addTrigger(aws_cognito_1.UserPoolOperation.of(event), handler.resources.lambda);
            }
            else {
                // handler is an IFunction
                this.userPool.addTrigger(aws_cognito_1.UserPoolOperation.of(event), handler);
            }
        };
        // UserPool
        this.computedUserPoolProps = this.getUserPoolProps(props);
        this.userPool = new aws_cdk_lib_1.aws_cognito.UserPool(this, 'UserPool', this.computedUserPoolProps);
        // UserPool - Identity Providers
        const providerSetupResult = this.setupIdentityProviders(this.userPool, props.loginWith);
        this.oauthMappings = providerSetupResult.oauthMappings;
        // UserPool Client
        const externalProviders = props.loginWith.externalProviders;
        const userPoolClient = new aws_cdk_lib_1.aws_cognito.UserPoolClient(this, 'UserPoolAppClient', {
            userPool: this.userPool,
            authFlows: defaults_js_1.DEFAULTS.AUTH_FLOWS,
            preventUserExistenceErrors: defaults_js_1.DEFAULTS.PREVENT_USER_EXISTENCE_ERRORS,
            oAuth: {
                ...((externalProviders === null || externalProviders === void 0 ? void 0 : externalProviders.callbackUrls)
                    ? { callbackUrls: externalProviders.callbackUrls }
                    : {}),
                ...((externalProviders === null || externalProviders === void 0 ? void 0 : externalProviders.logoutUrls)
                    ? { logoutUrls: externalProviders.logoutUrls }
                    : {}),
                ...((externalProviders === null || externalProviders === void 0 ? void 0 : externalProviders.scopes)
                    ? { scopes: this.getOAuthScopes(externalProviders.scopes) }
                    : {}),
            },
        });
        // Identity Pool
        const { identityPool, identityPoolRoleAttachment, roles: { auth, unAuth }, } = this.setupIdentityPool(this.userPool, userPoolClient, providerSetupResult);
        // expose resources
        this.resources = {
            userPool: this.userPool,
            userPoolClient,
            authenticatedUserIamRole: auth,
            unauthenticatedUserIamRole: unAuth,
            cfnResources: {
                cfnUserPool: this.userPool.node.findChild('Resource'),
                cfnUserPoolClient: userPoolClient.node.findChild('Resource'),
                cfnIdentityPool: identityPool,
                cfnIdentityPoolRoleAttachment: identityPoolRoleAttachment,
            },
        };
        this.storeOutput(props.outputStorageStrategy);
        new backend_output_storage_1.AttributionMetadataStorage().storeAttributionMetadata(aws_cdk_lib_1.Stack.of(this), authStackType, path.resolve(__dirname, '..', 'package.json'));
    }
    /**
     * Verify the email body depending on if 'CODE' or 'LINK' style is used.
     * This ensures that the template contains the necessary placeholders for Cognito to insert verification codes or links.
     * @param emailSettings the provided email settings
     * @returns emailBody
     */
    verifyEmailBody(emailSettings) {
        let emailBody;
        if (emailSettings.verificationEmailBody &&
            emailSettings.verificationEmailStyle !== 'LINK') {
            emailBody = emailSettings.verificationEmailBody(VERIFICATION_EMAIL_PLACEHOLDERS.CODE);
            if (!emailBody.includes(VERIFICATION_EMAIL_PLACEHOLDERS.CODE)) {
                throw Error("Invalid email settings. Property 'verificationEmailBody' must utilize the 'code' parameter at least once as a placeholder for the verification code.");
            }
        }
        if (emailSettings.verificationEmailBody &&
            emailSettings.verificationEmailStyle === 'LINK') {
            emailBody = emailSettings.verificationEmailBody(VERIFICATION_EMAIL_PLACEHOLDERS.LINK);
            if (!emailBody.includes(VERIFICATION_EMAIL_PLACEHOLDERS.LINK)) {
                throw Error("Invalid email settings. Property 'verificationEmailBody' must utilize the 'link' parameter at least once as a placeholder for the verification link.");
            }
        }
        return emailBody;
    }
}
exports.AmplifyAuth = AmplifyAuth;
//# sourceMappingURL=data:application/json;base64,