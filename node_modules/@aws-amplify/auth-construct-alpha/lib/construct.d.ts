import { Construct } from 'constructs';
import { AmplifyFunction, AuthResources, ResourceProvider } from '@aws-amplify/plugin-types';
import { AuthProps, TriggerEvent } from './types.js';
import { IFunction } from 'aws-cdk-lib/aws-lambda';
/**
 * Amplify Auth CDK Construct
 */
export declare class AmplifyAuth extends Construct implements ResourceProvider<AuthResources> {
    /**
     * The resources generated by the construct.
     */
    readonly resources: AuthResources;
    /**
     * Map from oauth provider to client id
     */
    private readonly oauthMappings;
    private readonly userPool;
    private readonly computedUserPoolProps;
    /**
     * Create a new Auth construct with AuthProps.
     * If no props are provided, email login and defaults will be used.
     */
    constructor(scope: Construct, id: string, props?: AuthProps);
    /**
     * Create Auth/UnAuth Roles
     * @returns DefaultRoles
     */
    private setupAuthAndUnAuthRoles;
    /**
     * Setup Identity Pool with default roles/role mappings, and register providers
     */
    private setupIdentityPool;
    /**
     * Process props into UserPoolProps (set defaults if needed)
     */
    private getUserPoolProps;
    /**
     * Verify the email body depending on if 'CODE' or 'LINK' style is used.
     * This ensures that the template contains the necessary placeholders for Cognito to insert verification codes or links.
     * @param emailSettings the provided email settings
     * @returns emailBody
     */
    private verifyEmailBody;
    /**
     * Get email verification style from user props
     * @param verificationEmailStyle - string value
     * @returns verificationEmailStyle - enum value
     */
    private getEmailVerificationStyle;
    /**
     * Determine the account recovery option based on enabled login methods.
     * @param emailEnabled - is email enabled
     * @param phoneEnabled - is phone enabled
     * @param accountRecoveryMethodAsString - the user provided account recovery setting
     * @returns account recovery setting enum value
     */
    private getAccountRecoverySetting;
    /**
     * Convert user friendly Mfa mode to cognito Mfa type.
     * This eliminates the need for users to import cognito.Mfa.
     * @param mfa - MFA settings
     * @returns cognito MFA enforcement type
     */
    private getMFAMode;
    /**
     * Convert user friendly account recovery method to cognito AccountRecover enum.
     * This eliminates the need for users to import cognito.AccountRecovery.
     * @param method - account recovery method as a string value
     * @returns cognito.AccountRecovery enum value
     */
    private convertAccountRecoveryStringToEnum;
    /**
     * Extract the MFA message settings and perform validation.
     * @param mfa - MFA settings
     * @returns mfa message
     */
    private getMFAMessage;
    /**
     * Setup Identity Providers (OAuth/OIDC/SAML)
     */
    private setupIdentityProviders;
    /**
     * Convert scopes from string list to OAuthScopes.
     * @param scopes - scope list
     * @returns cognito OAuthScopes
     */
    private getOAuthScopes;
    /**
     * Stores auth output using the provided strategy
     */
    private storeOutput;
    /**
     * Attach a Lambda function trigger handler to the UserPool in this construct
     * @param event - The trigger event operation
     * @param handler - The function that will handle the event
     */
    addTrigger: (event: TriggerEvent, handler: IFunction | AmplifyFunction) => void;
}
//# sourceMappingURL=construct.d.ts.map