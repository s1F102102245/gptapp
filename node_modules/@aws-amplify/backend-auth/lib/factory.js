import { AmplifyAuth, } from '@aws-amplify/auth-construct-alpha';
import * as path from 'path';
import { translateToAuthConstructLoginWith } from './translate_auth_props.js';
/**
 * Singleton factory for AmplifyAuth that can be used in Amplify project files
 */
class AmplifyAuthFactory {
    props;
    importStack;
    provides = 'AuthResources';
    generator;
    /**
     * Set the properties that will be used to initialize AmplifyAuth
     */
    constructor(props, importStack = new Error().stack) {
        this.props = props;
        this.importStack = importStack;
    }
    /**
     * Get a singleton instance of AmplifyAuth
     */
    getInstance = (getInstanceProps) => {
        const { constructContainer, importPathVerifier } = getInstanceProps;
        importPathVerifier?.verify(this.importStack, path.join('amplify', 'auth', 'resource'), 'Amplify Auth must be defined in amplify/auth/resource.ts');
        if (!this.generator) {
            this.generator = new AmplifyAuthGenerator(this.props, getInstanceProps);
        }
        return constructContainer.getOrCompute(this.generator);
    };
}
class AmplifyAuthGenerator {
    props;
    getInstanceProps;
    resourceGroupName = 'auth';
    defaultName = 'amplifyAuth';
    constructor(props, getInstanceProps) {
        this.props = props;
        this.getInstanceProps = getInstanceProps;
    }
    generateContainerEntry = (scope, backendSecretResolver) => {
        const authProps = {
            ...this.props,
            loginWith: translateToAuthConstructLoginWith(this.props.loginWith, backendSecretResolver),
            outputStorageStrategy: this.getInstanceProps.outputStorageStrategy,
        };
        const authConstruct = new AmplifyAuth(scope, this.defaultName, authProps);
        Object.entries(this.props.triggers || {}).forEach(([triggerEvent, handlerFactory]) => {
            authConstruct.addTrigger(triggerEvent, // this type assertion is necessary before .forEach types keys as just "string"
            handlerFactory.getInstance(this.getInstanceProps));
        });
        return authConstruct;
    };
}
/**
 * Provide the settings that will be used for authentication.
 */
export const defineAuth = (props) => 
// Creates a factory that implements ConstructFactory<AmplifyAuth & ResourceProvider<AuthResources>>
new AmplifyAuthFactory(props, new Error().stack);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxXQUFXLEdBR1osTUFBTSxtQ0FBbUMsQ0FBQztBQVczQyxPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUU3QixPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQW9COUU7O0dBRUc7QUFDSCxNQUFNLGtCQUFrQjtJQVVIO0lBQ0E7SUFSVixRQUFRLEdBQUcsZUFBZSxDQUFDO0lBQzVCLFNBQVMsQ0FBbUM7SUFFcEQ7O09BRUc7SUFDSCxZQUNtQixLQUF1QixFQUN2QixjQUFjLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSztRQUQvQixVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUN2QixnQkFBVyxHQUFYLFdBQVcsQ0FBb0I7SUFDL0MsQ0FBQztJQUVKOztPQUVHO0lBQ0gsV0FBVyxHQUFHLENBQ1osZ0JBQWtELEVBQ3JDLEVBQUU7UUFDZixNQUFNLEVBQUUsa0JBQWtCLEVBQUUsa0JBQWtCLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQztRQUNwRSxrQkFBa0IsRUFBRSxNQUFNLENBQ3hCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsRUFDeEMsMERBQTBELENBQzNELENBQUM7UUFDRixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksb0JBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1NBQ3pFO1FBQ0QsT0FBTyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBZ0IsQ0FBQztJQUN4RSxDQUFDLENBQUM7Q0FDSDtBQUVELE1BQU0sb0JBQW9CO0lBS0w7SUFDQTtJQUxWLGlCQUFpQixHQUFHLE1BQU0sQ0FBQztJQUNuQixXQUFXLEdBQUcsYUFBYSxDQUFDO0lBRTdDLFlBQ21CLEtBQXVCLEVBQ3ZCLGdCQUFrRDtRQURsRCxVQUFLLEdBQUwsS0FBSyxDQUFrQjtRQUN2QixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtDO0lBQ2xFLENBQUM7SUFFSixzQkFBc0IsR0FBRyxDQUN2QixLQUFnQixFQUNoQixxQkFBNEMsRUFDNUMsRUFBRTtRQUNGLE1BQU0sU0FBUyxHQUFjO1lBQzNCLEdBQUcsSUFBSSxDQUFDLEtBQUs7WUFDYixTQUFTLEVBQUUsaUNBQWlDLENBQzFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUNwQixxQkFBcUIsQ0FDdEI7WUFDRCxxQkFBcUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCO1NBQ25FLENBQUM7UUFFRixNQUFNLGFBQWEsR0FBRyxJQUFJLFdBQVcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUMxRSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FDL0MsQ0FBQyxDQUFDLFlBQVksRUFBRSxjQUFjLENBQUMsRUFBRSxFQUFFO1lBQ2pDLGFBQWEsQ0FBQyxVQUFVLENBQ3RCLFlBQTRCLEVBQUUsK0VBQStFO1lBQzdHLGNBQWMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQ2xELENBQUM7UUFDSixDQUFDLENBQ0YsQ0FBQztRQUNGLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUMsQ0FBQztDQUNIO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsS0FBdUIsRUFDMEMsRUFBRTtBQUNuRSxvR0FBb0c7QUFDcEcsSUFBSSxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxLQUFLLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFtcGxpZnlBdXRoLFxuICBBdXRoUHJvcHMsXG4gIFRyaWdnZXJFdmVudCxcbn0gZnJvbSAnQGF3cy1hbXBsaWZ5L2F1dGgtY29uc3RydWN0LWFscGhhJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHtcbiAgQXV0aFJlc291cmNlcyxcbiAgQmFja2VuZFNlY3JldFJlc29sdmVyLFxuICBDb25zdHJ1Y3RDb250YWluZXJFbnRyeUdlbmVyYXRvcixcbiAgQ29uc3RydWN0RmFjdG9yeSxcbiAgQ29uc3RydWN0RmFjdG9yeUdldEluc3RhbmNlUHJvcHMsXG4gIEZ1bmN0aW9uUmVzb3VyY2VzLFxuICBSZXNvdXJjZVByb3ZpZGVyLFxufSBmcm9tICdAYXdzLWFtcGxpZnkvcGx1Z2luLXR5cGVzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBBdXRoTG9naW5XaXRoRmFjdG9yeVByb3BzLCBFeHBhbmQgfSBmcm9tICcuL3R5cGVzLmpzJztcbmltcG9ydCB7IHRyYW5zbGF0ZVRvQXV0aENvbnN0cnVjdExvZ2luV2l0aCB9IGZyb20gJy4vdHJhbnNsYXRlX2F1dGhfcHJvcHMuanMnO1xuXG5leHBvcnQgdHlwZSBBbXBsaWZ5QXV0aFByb3BzID0gRXhwYW5kPFxuICBPbWl0PEF1dGhQcm9wcywgJ291dHB1dFN0b3JhZ2VTdHJhdGVneScgfCAnbG9naW5XaXRoJz4gJiB7XG4gICAgLyoqXG4gICAgICogU3BlY2lmeSBob3cgeW91IHdvdWxkIGxpa2UgdXNlcnMgdG8gbG9nIGluLiBZb3UgY2FuIGNob29zZSBmcm9tIGVtYWlsLCBwaG9uZSwgYW5kIGV2ZW4gZXh0ZXJuYWwgcHJvdmlkZXJzIHN1Y2ggYXMgTG9naW5XaXRoQW1hem9uLlxuICAgICAqL1xuICAgIGxvZ2luV2l0aDogRXhwYW5kPEF1dGhMb2dpbldpdGhGYWN0b3J5UHJvcHM+O1xuICAgIC8qKlxuICAgICAqIENvbmZpZ3VyZSBjdXN0b20gYXV0aCB0cmlnZ2Vyc1xuICAgICAqL1xuICAgIHRyaWdnZXJzPzogUGFydGlhbDxcbiAgICAgIFJlY29yZDxcbiAgICAgICAgVHJpZ2dlckV2ZW50LFxuICAgICAgICBDb25zdHJ1Y3RGYWN0b3J5PFJlc291cmNlUHJvdmlkZXI8RnVuY3Rpb25SZXNvdXJjZXM+PlxuICAgICAgPlxuICAgID47XG4gIH1cbj47XG5cbi8qKlxuICogU2luZ2xldG9uIGZhY3RvcnkgZm9yIEFtcGxpZnlBdXRoIHRoYXQgY2FuIGJlIHVzZWQgaW4gQW1wbGlmeSBwcm9qZWN0IGZpbGVzXG4gKi9cbmNsYXNzIEFtcGxpZnlBdXRoRmFjdG9yeVxuICBpbXBsZW1lbnRzIENvbnN0cnVjdEZhY3Rvcnk8QW1wbGlmeUF1dGggJiBSZXNvdXJjZVByb3ZpZGVyPEF1dGhSZXNvdXJjZXM+Plxue1xuICByZWFkb25seSBwcm92aWRlcyA9ICdBdXRoUmVzb3VyY2VzJztcbiAgcHJpdmF0ZSBnZW5lcmF0b3I6IENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yO1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHByb3BlcnRpZXMgdGhhdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZSBBbXBsaWZ5QXV0aFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBwcm9wczogQW1wbGlmeUF1dGhQcm9wcyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGltcG9ydFN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2tcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBHZXQgYSBzaW5nbGV0b24gaW5zdGFuY2Ugb2YgQW1wbGlmeUF1dGhcbiAgICovXG4gIGdldEluc3RhbmNlID0gKFxuICAgIGdldEluc3RhbmNlUHJvcHM6IENvbnN0cnVjdEZhY3RvcnlHZXRJbnN0YW5jZVByb3BzXG4gICk6IEFtcGxpZnlBdXRoID0+IHtcbiAgICBjb25zdCB7IGNvbnN0cnVjdENvbnRhaW5lciwgaW1wb3J0UGF0aFZlcmlmaWVyIH0gPSBnZXRJbnN0YW5jZVByb3BzO1xuICAgIGltcG9ydFBhdGhWZXJpZmllcj8udmVyaWZ5KFxuICAgICAgdGhpcy5pbXBvcnRTdGFjayxcbiAgICAgIHBhdGguam9pbignYW1wbGlmeScsICdhdXRoJywgJ3Jlc291cmNlJyksXG4gICAgICAnQW1wbGlmeSBBdXRoIG11c3QgYmUgZGVmaW5lZCBpbiBhbXBsaWZ5L2F1dGgvcmVzb3VyY2UudHMnXG4gICAgKTtcbiAgICBpZiAoIXRoaXMuZ2VuZXJhdG9yKSB7XG4gICAgICB0aGlzLmdlbmVyYXRvciA9IG5ldyBBbXBsaWZ5QXV0aEdlbmVyYXRvcih0aGlzLnByb3BzLCBnZXRJbnN0YW5jZVByb3BzKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnN0cnVjdENvbnRhaW5lci5nZXRPckNvbXB1dGUodGhpcy5nZW5lcmF0b3IpIGFzIEFtcGxpZnlBdXRoO1xuICB9O1xufVxuXG5jbGFzcyBBbXBsaWZ5QXV0aEdlbmVyYXRvciBpbXBsZW1lbnRzIENvbnN0cnVjdENvbnRhaW5lckVudHJ5R2VuZXJhdG9yIHtcbiAgcmVhZG9ubHkgcmVzb3VyY2VHcm91cE5hbWUgPSAnYXV0aCc7XG4gIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdE5hbWUgPSAnYW1wbGlmeUF1dGgnO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvcHM6IEFtcGxpZnlBdXRoUHJvcHMsXG4gICAgcHJpdmF0ZSByZWFkb25seSBnZXRJbnN0YW5jZVByb3BzOiBDb25zdHJ1Y3RGYWN0b3J5R2V0SW5zdGFuY2VQcm9wc1xuICApIHt9XG5cbiAgZ2VuZXJhdGVDb250YWluZXJFbnRyeSA9IChcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGJhY2tlbmRTZWNyZXRSZXNvbHZlcjogQmFja2VuZFNlY3JldFJlc29sdmVyXG4gICkgPT4ge1xuICAgIGNvbnN0IGF1dGhQcm9wczogQXV0aFByb3BzID0ge1xuICAgICAgLi4udGhpcy5wcm9wcyxcbiAgICAgIGxvZ2luV2l0aDogdHJhbnNsYXRlVG9BdXRoQ29uc3RydWN0TG9naW5XaXRoKFxuICAgICAgICB0aGlzLnByb3BzLmxvZ2luV2l0aCxcbiAgICAgICAgYmFja2VuZFNlY3JldFJlc29sdmVyXG4gICAgICApLFxuICAgICAgb3V0cHV0U3RvcmFnZVN0cmF0ZWd5OiB0aGlzLmdldEluc3RhbmNlUHJvcHMub3V0cHV0U3RvcmFnZVN0cmF0ZWd5LFxuICAgIH07XG5cbiAgICBjb25zdCBhdXRoQ29uc3RydWN0ID0gbmV3IEFtcGxpZnlBdXRoKHNjb3BlLCB0aGlzLmRlZmF1bHROYW1lLCBhdXRoUHJvcHMpO1xuICAgIE9iamVjdC5lbnRyaWVzKHRoaXMucHJvcHMudHJpZ2dlcnMgfHwge30pLmZvckVhY2goXG4gICAgICAoW3RyaWdnZXJFdmVudCwgaGFuZGxlckZhY3RvcnldKSA9PiB7XG4gICAgICAgIGF1dGhDb25zdHJ1Y3QuYWRkVHJpZ2dlcihcbiAgICAgICAgICB0cmlnZ2VyRXZlbnQgYXMgVHJpZ2dlckV2ZW50LCAvLyB0aGlzIHR5cGUgYXNzZXJ0aW9uIGlzIG5lY2Vzc2FyeSBiZWZvcmUgLmZvckVhY2ggdHlwZXMga2V5cyBhcyBqdXN0IFwic3RyaW5nXCJcbiAgICAgICAgICBoYW5kbGVyRmFjdG9yeS5nZXRJbnN0YW5jZSh0aGlzLmdldEluc3RhbmNlUHJvcHMpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gYXV0aENvbnN0cnVjdDtcbiAgfTtcbn1cblxuLyoqXG4gKiBQcm92aWRlIHRoZSBzZXR0aW5ncyB0aGF0IHdpbGwgYmUgdXNlZCBmb3IgYXV0aGVudGljYXRpb24uXG4gKi9cbmV4cG9ydCBjb25zdCBkZWZpbmVBdXRoID0gKFxuICBwcm9wczogQW1wbGlmeUF1dGhQcm9wc1xuKTogQ29uc3RydWN0RmFjdG9yeTxBbXBsaWZ5QXV0aCAmIFJlc291cmNlUHJvdmlkZXI8QXV0aFJlc291cmNlcz4+ID0+XG4gIC8vIENyZWF0ZXMgYSBmYWN0b3J5IHRoYXQgaW1wbGVtZW50cyBDb25zdHJ1Y3RGYWN0b3J5PEFtcGxpZnlBdXRoICYgUmVzb3VyY2VQcm92aWRlcjxBdXRoUmVzb3VyY2VzPj5cbiAgbmV3IEFtcGxpZnlBdXRoRmFjdG9yeShwcm9wcywgbmV3IEVycm9yKCkuc3RhY2spO1xuIl19